
neopixel_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000168  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b70  00000000  00000000  0002b959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000860  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e06  00000000  00000000  0002e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c535  00000000  00000000  0003044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b06e  00000000  00000000  0003c983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d79f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000268c  00000000  00000000  000d7a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003908 	.word	0x08003908

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003908 	.word	0x08003908

080001c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc0b 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f86b 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f937 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f917 	bl	800040c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8e5 	bl	80003ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e2:	f000 f8a5 	bl	8000330 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  //set cycle value
  float *cycle_basis = (float*) calloc(CYCLE_LAST, sizeof(float));
 80001e6:	2104      	movs	r1, #4
 80001e8:	2001      	movs	r0, #1
 80001ea:	f003 fa37 	bl	800365c <calloc>
 80001ee:	4603      	mov	r3, r0
 80001f0:	60bb      	str	r3, [r7, #8]
  uint32_t *cycle_old = (uint32_t*) calloc(CYCLE_LAST, sizeof(uint32_t));
 80001f2:	2104      	movs	r1, #4
 80001f4:	2001      	movs	r0, #1
 80001f6:	f003 fa31 	bl	800365c <calloc>
 80001fa:	4603      	mov	r3, r0
 80001fc:	607b      	str	r3, [r7, #4]
  cycle_basis[CYCLE_MAIN] = 100;
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	4a27      	ldr	r2, [pc, #156]	; (80002a0 <main+0xd8>)
 8000202:	601a      	str	r2, [r3, #0]
  RGB RGB_buf[N];
  int i = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]

  NeoPixel_Init(&hspi1);
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <main+0xdc>)
 800020a:	f000 f947 	bl	800049c <NeoPixel_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    RGB_buf[0].r = i % 255;
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <main+0xe0>)
 8000212:	fb83 1302 	smull	r1, r3, r3, r2
 8000216:	4413      	add	r3, r2
 8000218:	11d9      	asrs	r1, r3, #7
 800021a:	17d3      	asrs	r3, r2, #31
 800021c:	1ac9      	subs	r1, r1, r3
 800021e:	460b      	mov	r3, r1
 8000220:	021b      	lsls	r3, r3, #8
 8000222:	1a5b      	subs	r3, r3, r1
 8000224:	1ad1      	subs	r1, r2, r3
 8000226:	b2cb      	uxtb	r3, r1
 8000228:	703b      	strb	r3, [r7, #0]
    RGB_buf[0].g = i * i % 255;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	fb03 f203 	mul.w	r2, r3, r3
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <main+0xe0>)
 8000232:	fb83 1302 	smull	r1, r3, r3, r2
 8000236:	4413      	add	r3, r2
 8000238:	11d9      	asrs	r1, r3, #7
 800023a:	17d3      	asrs	r3, r2, #31
 800023c:	1ac9      	subs	r1, r1, r3
 800023e:	460b      	mov	r3, r1
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	1a5b      	subs	r3, r3, r1
 8000244:	1ad1      	subs	r1, r2, r3
 8000246:	b2cb      	uxtb	r3, r1
 8000248:	707b      	strb	r3, [r7, #1]
    RGB_buf[0].b = i * i * i % 255;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	fb03 f303 	mul.w	r3, r3, r3
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	fb03 f202 	mul.w	r2, r3, r2
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <main+0xe0>)
 8000258:	fb83 1302 	smull	r1, r3, r3, r2
 800025c:	4413      	add	r3, r2
 800025e:	11d9      	asrs	r1, r3, #7
 8000260:	17d3      	asrs	r3, r2, #31
 8000262:	1ac9      	subs	r1, r1, r3
 8000264:	460b      	mov	r3, r1
 8000266:	021b      	lsls	r3, r3, #8
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	1ad1      	subs	r1, r2, r3
 800026c:	b2cb      	uxtb	r3, r1
 800026e:	70bb      	strb	r3, [r7, #2]
    NeoPixel_Send(RGB_buf);
 8000270:	463b      	mov	r3, r7
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f922 	bl	80004bc <NeoPixel_Send>
//    NeoPixel_FullBright();
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000278:	e002      	b.n	8000280 <main+0xb8>
      HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fc1a 	bl	8000ab4 <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fb49 	bl	800091c <CycleController>
 800028a:	4603      	mov	r3, r0
 800028c:	f083 0301 	eor.w	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1f1      	bne.n	800027a <main+0xb2>
    }
    i++;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	3301      	adds	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
    RGB_buf[0].r = i % 255;
 800029c:	e7b7      	b.n	800020e <main+0x46>
 800029e:	bf00      	nop
 80002a0:	42c80000 	.word	0x42c80000
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	80808081 	.word	0x80808081

080002ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fa08 	bl	80036d0 <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
    { 0 };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002de:	2300      	movs	r3, #0
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 80002e2:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 f81f 	bl	8001330 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x50>
    Error_Handler();
 80002f8:	f000 f8ca 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f848 	bl	80023ac <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x7a>
    Error_Handler();
 8000322:	f000 f8b5 	bl	8000490 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_SPI1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_SPI1_Init+0x74>)
 800033c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000348:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_SPI1_Init+0x74>)
 800034c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_SPI1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000368:	2210      	movs	r2, #16
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000380:	2207      	movs	r2, #7
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000392:	f002 fa2b 	bl	80027ec <HAL_SPI_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_SPI1_Init+0x70>
    Error_Handler();
 800039c:	f000 f878 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	40013000 	.word	0x40013000

080003ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003b2:	4a15      	ldr	r2, [pc, #84]	; (8000408 <MX_USART2_UART_Init+0x5c>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003f0:	f002 fd94 	bl	8002f1c <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x52>
    Error_Handler();
 80003fa:	f000 f849 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000134 	.word	0x20000134
 8000408:	40004400 	.word	0x40004400

0800040c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_DMA_Init+0x38>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <MX_DMA_Init+0x38>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_DMA_Init+0x38>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	200d      	movs	r0, #13
 8000430:	f000 fc3f 	bl	8000cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000434:	200d      	movs	r0, #13
 8000436:	f000 fc58 	bl	8000cea <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_GPIO_Init+0x44>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <MX_GPIO_Init+0x44>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_GPIO_Init+0x44>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_GPIO_Init+0x44>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <MX_GPIO_Init+0x44>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_GPIO_Init+0x44>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <NeoPixel_Init+0x1c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	200001bc 	.word	0x200001bc

080004bc <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB RGB_buf[]) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(sizeof(uint8_t), N * 24);
 80004c4:	2118      	movs	r1, #24
 80004c6:	2001      	movs	r0, #1
 80004c8:	f003 f8c8 	bl	800365c <calloc>
 80004cc:	4603      	mov	r3, r0
 80004ce:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf);
 80004d0:	68f9      	ldr	r1, [r7, #12]
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f82e 	bl	8000534 <NeoPixel_Serialize>
  NeoPixel_Reset();
 80004d8:	f000 f810 	bl	80004fc <NeoPixel_Reset>
  HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24);
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <NeoPixel_Send+0x3c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2218      	movs	r2, #24
 80004e2:	68f9      	ldr	r1, [r7, #12]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f002 fa25 	bl	8002934 <HAL_SPI_Transmit_DMA>
  free(send_buf);
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f003 f8e8 	bl	80036c0 <free>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200001bc 	.word	0x200001bc

080004fc <NeoPixel_Reset>:

void NeoPixel_Reset() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e009      	b.n	8000520 <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <NeoPixel_Reset+0x34>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1cf9      	adds	r1, r7, #3
 8000512:	2201      	movs	r2, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fa0d 	bl	8002934 <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b63      	cmp	r3, #99	; 0x63
 8000524:	ddf2      	ble.n	800050c <NeoPixel_Reset+0x10>
  }
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200001bc 	.word	0x200001bc

08000534 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e090      	b.n	8000666 <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	e086      	b.n	8000658 <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4613      	mov	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	461a      	mov	r2, r3
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	f1c3 0307 	rsb	r3, r3, #7
 8000560:	fa42 f303 	asr.w	r3, r2, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00d      	beq.n	8000588 <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	4613      	mov	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	4413      	add	r3, r2
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	461a      	mov	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	461a      	mov	r2, r3
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	4413      	add	r3, r2
 8000582:	22f0      	movs	r2, #240	; 0xf0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e00c      	b.n	80005a2 <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	461a      	mov	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4413      	add	r3, r2
 8000598:	461a      	mov	r2, r3
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	4413      	add	r3, r2
 800059e:	22c0      	movs	r2, #192	; 0xc0
 80005a0:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	f1c3 0307 	rsb	r3, r3, #7
 80005b8:	fa42 f303 	asr.w	r3, r2, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00d      	beq.n	80005e0 <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	461a      	mov	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4413      	add	r3, r2
 80005d4:	3308      	adds	r3, #8
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	22f0      	movs	r2, #240	; 0xf0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	e00c      	b.n	80005fa <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	461a      	mov	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	3308      	adds	r3, #8
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	22c0      	movs	r2, #192	; 0xc0
 80005f8:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	461a      	mov	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	f1c3 0307 	rsb	r3, r3, #7
 8000610:	fa42 f303 	asr.w	r3, r2, r3
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	461a      	mov	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	3310      	adds	r3, #16
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	22f0      	movs	r2, #240	; 0xf0
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e00c      	b.n	8000652 <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	461a      	mov	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4413      	add	r3, r2
 8000648:	3310      	adds	r3, #16
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	22c0      	movs	r2, #192	; 0xc0
 8000650:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	3301      	adds	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b07      	cmp	r3, #7
 800065c:	f77f af75 	ble.w	800054a <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	f77f af6b 	ble.w	8000544 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <HAL_SPI_MspInit+0xc8>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d14e      	bne.n	8000784 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 80006ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_SPI_MspInit+0xcc>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000716:	23a0      	movs	r3, #160	; 0xa0
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000726:	2305      	movs	r3, #5
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f000 fc8a 	bl	800104c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_SPI_MspInit+0xd4>)
 800073c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000740:	2210      	movs	r2, #16
 8000742:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 800076a:	f000 fad8 	bl	8000d1e <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000774:	f7ff fe8c 	bl	8000490 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 800077c:	655a      	str	r2, [r3, #84]	; 0x54
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <HAL_SPI_MspInit+0xd0>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40013000 	.word	0x40013000
 8000790:	40021000 	.word	0x40021000
 8000794:	200000f0 	.word	0x200000f0
 8000798:	40020030 	.word	0x40020030

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <HAL_UART_MspInit+0x80>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d129      	bne.n	8000812 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_UART_MspInit+0x84>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007ee:	f248 0304 	movw	r3, #32772	; 0x8004
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000800:	2307      	movs	r3, #7
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 fc1d 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400
 8000820:	40021000 	.word	0x40021000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f900 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <DMA1_Channel3_IRQHandler+0x10>)
 800087e:	f000 faf4 	bl	8000e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000f0 	.word	0x200000f0

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f002 fed6 	bl	800366c <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20003000 	.word	0x20003000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200001c0 	.word	0x200001c0
 80008f4:	200001d8 	.word	0x200001d8

080008f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d107      	bne.n	8000946 <CycleController+0x2a>
    old[data] = HAL_GetTick();
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	18d4      	adds	r4, r2, r3
 800093e:	f000 f8ad 	bl	8000a9c <HAL_GetTick>
 8000942:	4603      	mov	r3, r0
 8000944:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 8000946:	f000 f8a9 	bl	8000a9c <HAL_GetTick>
 800094a:	6178      	str	r0, [r7, #20]
  if (current - old[data] > basis[data]) {
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	4413      	add	r3, r2
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000976:	dd07      	ble.n	8000988 <CycleController+0x6c>
    old[data] = current;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	601a      	str	r2, [r3, #0]
    return 1;
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <CycleController+0x6e>
  } else {
    return 0;
 8000988:	2300      	movs	r3, #0
  }
}
 800098a:	4618      	mov	r0, r3
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd90      	pop	{r4, r7, pc}
	...

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ffae 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f002 fe59 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fbff 	bl	80001c8 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d8:	08003960 	.word	0x08003960
  ldr r2, =_sbss
 80009dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e0:	200001d8 	.word	0x200001d8

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f94f 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe3a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f967 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f92f 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200001c4 	.word	0x200001c4

08000a9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200001c4 	.word	0x200001c4

08000ab4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e037      	b.n	8000da4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2202      	movs	r2, #2
 8000d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f940 	bl	800100c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_DMA_Start_IT+0x20>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e04a      	b.n	8000e62 <HAL_DMA_Start_IT+0xb6>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d13a      	bne.n	8000e54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2202      	movs	r2, #2
 8000de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f000 f8d4 	bl	8000fb0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 020e 	orr.w	r2, r2, #14
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e00f      	b.n	8000e42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 020a 	orr.w	r2, r2, #10
 8000e30:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0204 	bic.w	r2, r2, #4
 8000e40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e005      	b.n	8000e60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	2204      	movs	r2, #4
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d024      	beq.n	8000edc <HAL_DMA_IRQHandler+0x72>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01f      	beq.n	8000edc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0204 	bic.w	r2, r2, #4
 8000eb8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d06a      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eda:	e065      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d02c      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xdc>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d027      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0320 	and.w	r3, r3, #32
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10b      	bne.n	8000f1c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 020a 	bic.w	r2, r2, #10
 8000f12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f24:	2102      	movs	r1, #2
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d035      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f44:	e030      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d028      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d023      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 020e 	bic.w	r2, r2, #14
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	4798      	blx	r3
    }
  }
}
 8000fa6:	e7ff      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x13e>
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d108      	bne.n	8000ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fee:	e007      	b.n	8001000 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	60da      	str	r2, [r3, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <DMA_CalcBaseAndBitshift+0x34>)
 800101c:	4413      	add	r3, r2
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <DMA_CalcBaseAndBitshift+0x38>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	009a      	lsls	r2, r3, #2
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <DMA_CalcBaseAndBitshift+0x3c>)
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	bffdfff8 	.word	0xbffdfff8
 8001044:	cccccccd 	.word	0xcccccccd
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e14e      	b.n	80012fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8140 	beq.w	80012f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <HAL_GPIO_Init+0x40>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 0201 	and.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d017      	beq.n	800112a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d123      	bne.n	800117e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	6939      	ldr	r1, [r7, #16]
 800117a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0203 	and.w	r2, r3, #3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 809a 	beq.w	80012f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4b55      	ldr	r3, [pc, #340]	; (8001318 <HAL_GPIO_Init+0x2cc>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2cc>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b52      	ldr	r3, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x2cc>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d8:	4a50      	ldr	r2, [pc, #320]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1e0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a46      	ldr	r2, [pc, #280]	; (8001320 <HAL_GPIO_Init+0x2d4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1dc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_GPIO_Init+0x2d8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1d8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a44      	ldr	r2, [pc, #272]	; (8001328 <HAL_GPIO_Init+0x2dc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1d4>
 800121c:	2303      	movs	r3, #3
 800121e:	e006      	b.n	800122e <HAL_GPIO_Init+0x1e2>
 8001220:	2305      	movs	r3, #5
 8001222:	e004      	b.n	800122e <HAL_GPIO_Init+0x1e2>
 8001224:	2302      	movs	r3, #2
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0x1e2>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_GPIO_Init+0x1e2>
 800122c:	2300      	movs	r3, #0
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4093      	lsls	r3, r2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800123e:	4937      	ldr	r1, [pc, #220]	; (800131c <HAL_GPIO_Init+0x2d0>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_GPIO_Init+0x2e0>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001270:	4a2e      	ldr	r2, [pc, #184]	; (800132c <HAL_GPIO_Init+0x2e0>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_GPIO_Init+0x2e0>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800129a:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_GPIO_Init+0x2e0>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_GPIO_Init+0x2e0>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_GPIO_Init+0x2e0>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_GPIO_Init+0x2e0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_GPIO_Init+0x2e0>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	f47f aea9 	bne.w	800105c <HAL_GPIO_Init+0x10>
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000
 8001320:	48000400 	.word	0x48000400
 8001324:	48000800 	.word	0x48000800
 8001328:	48000c00 	.word	0x48000c00
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001336:	af00      	add	r7, sp, #0
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001340:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	f001 b823 	b.w	800239c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 817d 	beq.w	8001666 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800136c:	4bbc      	ldr	r3, [pc, #752]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00c      	beq.n	8001392 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001378:	4bb9      	ldr	r3, [pc, #740]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d15c      	bne.n	800143e <HAL_RCC_OscConfig+0x10e>
 8001384:	4bb6      	ldr	r3, [pc, #728]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d155      	bne.n	800143e <HAL_RCC_OscConfig+0x10e>
 8001392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001396:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <HAL_RCC_OscConfig+0x94>
 80013be:	4ba8      	ldr	r3, [pc, #672]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 80013c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013ec:	4b9c      	ldr	r3, [pc, #624]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001404:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001408:	fab2 f282 	clz	r2, r2
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f002 021f 	and.w	r2, r2, #31
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 811f 	beq.w	8001664 <HAL_RCC_OscConfig+0x334>
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 8116 	bne.w	8001664 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	f000 bfaf 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x12e>
 8001450:	4b83      	ldr	r3, [pc, #524]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a82      	ldr	r2, [pc, #520]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e036      	b.n	80014cc <HAL_RCC_OscConfig+0x19c>
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x158>
 800146e:	4b7c      	ldr	r3, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b79      	ldr	r3, [pc, #484]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e021      	b.n	80014cc <HAL_RCC_OscConfig+0x19c>
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x184>
 800149a:	4b71      	ldr	r3, [pc, #452]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a70      	ldr	r2, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0x19c>
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a66      	ldr	r2, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f023 020f 	bic.w	r2, r3, #15
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	495f      	ldr	r1, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d059      	beq.n	80015aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fad1 	bl	8000a9c <HAL_GetTick>
 80014fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff facc 	bl	8000a9c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d902      	bls.n	8001516 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	f000 bf43 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 8001516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800152a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x218>
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	e015      	b.n	8001574 <HAL_RCC_OscConfig+0x244>
 8001548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800155c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001560:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001564:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001570:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001578:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800157c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001580:	fa92 f2a2 	rbit	r2, r2
 8001584:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001588:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800158c:	fab2 f282 	clz	r2, r2
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	f002 021f 	and.w	r2, r2, #31
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ab      	beq.n	8001500 <HAL_RCC_OscConfig+0x1d0>
 80015a8:	e05d      	b.n	8001666 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa77 	bl	8000a9c <HAL_GetTick>
 80015ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fa72 	bl	8000a9c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b64      	cmp	r3, #100	; 0x64
 80015c2:	d902      	bls.n	80015ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	f000 bee9 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 80015ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	095b      	lsrs	r3, r3, #5
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x2cc>
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0x2f8>
 80015fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001600:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001614:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001618:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_RCC_OscConfig+0x330>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800162c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001630:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001634:	fa92 f2a2 	rbit	r2, r2
 8001638:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800163c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001640:	fab2 f282 	clz	r2, r2
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	f002 021f 	and.w	r2, r2, #31
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ab      	bne.n	80015b4 <HAL_RCC_OscConfig+0x284>
 800165c:	e003      	b.n	8001666 <HAL_RCC_OscConfig+0x336>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 817d 	beq.w	8001976 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800167c:	4ba6      	ldr	r3, [pc, #664]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001688:	4ba3      	ldr	r3, [pc, #652]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d172      	bne.n	800177a <HAL_RCC_OscConfig+0x44a>
 8001694:	4ba0      	ldr	r3, [pc, #640]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d16c      	bne.n	800177a <HAL_RCC_OscConfig+0x44a>
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3a0>
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	e013      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c8>
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016f4:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	2202      	movs	r2, #2
 80016fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001702:	fa92 f2a2 	rbit	r2, r2
 8001706:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800170a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800170e:	fab2 f282 	clz	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <HAL_RCC_OscConfig+0x410>
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 be2e 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	21f8      	movs	r1, #248	; 0xf8
 8001756:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800175e:	fa91 f1a1 	rbit	r1, r1
 8001762:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001766:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800176a:	fab1 f181 	clz	r1, r1
 800176e:	b2c9      	uxtb	r1, r1
 8001770:	408b      	lsls	r3, r1
 8001772:	4969      	ldr	r1, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001778:	e0fd      	b.n	8001976 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8088 	beq.w	800189c <HAL_RCC_OscConfig+0x56c>
 800178c:	2301      	movs	r3, #1
 800178e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800179e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	461a      	mov	r2, r3
 80017b4:	2301      	movs	r3, #1
 80017b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff f970 	bl	8000a9c <HAL_GetTick>
 80017bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff f96b 	bl	8000a9c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d902      	bls.n	80017d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	f000 bde2 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d8>
 8001802:	4b45      	ldr	r3, [pc, #276]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	e013      	b.n	8001830 <HAL_RCC_OscConfig+0x500>
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001820:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	2202      	movs	r2, #2
 8001832:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001836:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800183a:	fa92 f2a2 	rbit	r2, r2
 800183e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001842:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001846:	fab2 f282 	clz	r2, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	f002 021f 	and.w	r2, r2, #31
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0af      	beq.n	80017c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	21f8      	movs	r1, #248	; 0xf8
 8001878:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001880:	fa91 f1a1 	rbit	r1, r1
 8001884:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001888:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800188c:	fab1 f181 	clz	r1, r1
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	408b      	lsls	r3, r1
 8001894:	4920      	ldr	r1, [pc, #128]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
 800189a:	e06c      	b.n	8001976 <HAL_RCC_OscConfig+0x646>
 800189c:	2301      	movs	r3, #1
 800189e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	461a      	mov	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f8e8 	bl	8000a9c <HAL_GetTick>
 80018cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff f8e3 	bl	8000a9c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d902      	bls.n	80018e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f000 bd5a 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d104      	bne.n	800191c <HAL_RCC_OscConfig+0x5ec>
 8001912:	4b01      	ldr	r3, [pc, #4]	; (8001918 <HAL_RCC_OscConfig+0x5e8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	e015      	b.n	8001944 <HAL_RCC_OscConfig+0x614>
 8001918:	40021000 	.word	0x40021000
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001934:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001940:	4bc8      	ldr	r3, [pc, #800]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2202      	movs	r2, #2
 8001946:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800194a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800194e:	fa92 f2a2 	rbit	r2, r2
 8001952:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001956:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ad      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8110 	beq.w	8001bac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d079      	beq.n	8001a90 <HAL_RCC_OscConfig+0x760>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	4bab      	ldr	r3, [pc, #684]	; (8001c68 <HAL_RCC_OscConfig+0x938>)
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	461a      	mov	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff f869 	bl	8000a9c <HAL_GetTick>
 80019ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff f864 	bl	8000a9c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d902      	bls.n	80019e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f000 bcdb 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a40:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	6019      	str	r1, [r3, #0]
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f1a3 	rbit	r1, r3
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a66:	6019      	str	r1, [r3, #0]
  return result;
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0a0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x6a0>
 8001a8e:	e08d      	b.n	8001bac <HAL_RCC_OscConfig+0x87c>
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ab2:	601a      	str	r2, [r3, #0]
  return result;
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001abc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x938>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7fe ffe3 	bl	8000a9c <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe ffde 	bl	8000a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d902      	bls.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 bc55 	b.w	800239c <HAL_RCC_OscConfig+0x106c>
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001afa:	2202      	movs	r2, #2
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b42:	2202      	movs	r2, #2
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	6019      	str	r1, [r3, #0]
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fa93 f1a3 	rbit	r1, r3
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b84:	6019      	str	r1, [r3, #0]
  return result;
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d197      	bne.n	8001adc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 81a1 	beq.w	8001f04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	61d3      	str	r3, [r2, #28]
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x93c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCC_OscConfig+0x93c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <HAL_RCC_OscConfig+0x93c>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7fe ff3f 	bl	8000a9c <HAL_GetTick>
 8001c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	e009      	b.n	8001c38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7fe ff3a 	bl	8000a9c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e3b1      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x93c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ef      	beq.n	8001c24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10d      	bne.n	8001c70 <HAL_RCC_OscConfig+0x940>
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a02      	ldr	r2, [pc, #8]	; (8001c64 <HAL_RCC_OscConfig+0x934>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e03c      	b.n	8001cdc <HAL_RCC_OscConfig+0x9ac>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	10908120 	.word	0x10908120
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x96a>
 8001c80:	4bc1      	ldr	r3, [pc, #772]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4ac0      	ldr	r2, [pc, #768]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	4bbe      	ldr	r3, [pc, #760]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4abd      	ldr	r2, [pc, #756]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e020      	b.n	8001cdc <HAL_RCC_OscConfig+0x9ac>
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x994>
 8001caa:	4bb7      	ldr	r3, [pc, #732]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4ab6      	ldr	r2, [pc, #728]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	4bb4      	ldr	r3, [pc, #720]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4ab3      	ldr	r2, [pc, #716]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x9ac>
 8001cc4:	4bb0      	ldr	r3, [pc, #704]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4aaf      	ldr	r2, [pc, #700]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4bad      	ldr	r3, [pc, #692]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4aac      	ldr	r2, [pc, #688]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8081 	beq.w	8001df0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fed5 	bl	8000a9c <HAL_GetTick>
 8001cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fed0 	bl	8000a9c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e345      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d18:	2202      	movs	r2, #2
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0xa4c>
 8001d76:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0xa74>
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001dac:	2102      	movs	r1, #2
 8001dae:	6011      	str	r1, [r2, #0]
 8001db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	fa92 f1a2 	rbit	r1, r2
 8001dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dc6:	6011      	str	r1, [r2, #0]
  return result;
 8001dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dcc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d084      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x9c8>
 8001dee:	e07f      	b.n	8001ef0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7fe fe54 	bl	8000a9c <HAL_GetTick>
 8001df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe fe4f 	bl	8000a9c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e2c4      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fa93 f2a3 	rbit	r2, r3
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e58:	601a      	str	r2, [r3, #0]
  return result;
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_OscConfig+0xb4e>
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	e013      	b.n	8001ea6 <HAL_RCC_OscConfig+0xb76>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eaa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001eae:	2102      	movs	r1, #2
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fa92 f1a2 	rbit	r1, r2
 8001ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ec8:	6011      	str	r1, [r2, #0]
  return result;
 8001eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ece:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d184      	bne.n	8001dfa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ef0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8242 	beq.w	800239a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_OscConfig+0xc58>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	f000 8213 	beq.w	800234a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 8162 	bne.w	80021fa <HAL_RCC_OscConfig+0xeca>
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f5a:	601a      	str	r2, [r3, #0]
  return result;
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fd8e 	bl	8000a9c <HAL_GetTick>
 8001f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	e00c      	b.n	8001fa0 <HAL_RCC_OscConfig+0xc70>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe fd86 	bl	8000a9c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1fd      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fc4:	601a      	str	r2, [r3, #0]
  return result;
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0xcba>
 8001fe4:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e027      	b.n	800203a <HAL_RCC_OscConfig+0xd0a>
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b9c      	ldr	r3, [pc, #624]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800203e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002042:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002046:	6011      	str	r1, [r2, #0]
 8002048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800204c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	fa92 f1a2 	rbit	r1, r2
 8002056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800205e:	6011      	str	r1, [r2, #0]
  return result;
 8002060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002064:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d182      	bne.n	8001f8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002086:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	430b      	orrs	r3, r1
 80020a8:	497f      	ldr	r1, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020d2:	601a      	str	r2, [r3, #0]
  return result;
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fcd2 	bl	8000a9c <HAL_GetTick>
 80020f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe fccd 	bl	8000a9c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e144      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800211a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	fa93 f2a3 	rbit	r2, r3
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002136:	601a      	str	r2, [r3, #0]
  return result;
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002140:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0xe2c>
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e027      	b.n	80021ac <HAL_RCC_OscConfig+0xe7c>
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800218a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021b8:	6011      	str	r1, [r2, #0]
 80021ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	fa92 f1a2 	rbit	r1, r2
 80021c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021d0:	6011      	str	r1, [r2, #0]
  return result;
 80021d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f002 021f 	and.w	r2, r2, #31
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d082      	beq.n	80020fe <HAL_RCC_OscConfig+0xdce>
 80021f8:	e0cf      	b.n	800239a <HAL_RCC_OscConfig+0x106a>
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002228:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	461a      	mov	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fc2c 	bl	8000a9c <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	e009      	b.n	800225e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fc27 	bl	8000a9c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e09e      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002282:	601a      	str	r2, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800228c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d104      	bne.n	80022ac <HAL_RCC_OscConfig+0xf7c>
 80022a2:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <HAL_RCC_OscConfig+0xf78>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e029      	b.n	80022fc <HAL_RCC_OscConfig+0xfcc>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0x1078>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002300:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002304:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002308:	6011      	str	r1, [r2, #0]
 800230a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	fa92 f1a2 	rbit	r1, r2
 8002318:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002320:	6011      	str	r1, [r2, #0]
  return result;
 8002322:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002326:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d180      	bne.n	800224a <HAL_RCC_OscConfig+0xf1a>
 8002348:	e027      	b.n	800239a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e01e      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_OscConfig+0x1078>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002366:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800236a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	429a      	cmp	r2, r3
 800237c:	d10b      	bne.n	8002396 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800237e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b09e      	sub	sp, #120	; 0x78
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e162      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d910      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	498b      	ldr	r1, [pc, #556]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e14a      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	497f      	ldr	r1, [pc, #508]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80dc 	beq.w	80025d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d13c      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xf6>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_RCC_ClockConfig+0xa6>
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e00f      	b.n	8002472 <HAL_RCC_ClockConfig+0xc6>
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	667b      	str	r3, [r7, #100]	; 0x64
 8002460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002464:	663b      	str	r3, [r7, #96]	; 0x60
 8002466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002476:	65ba      	str	r2, [r7, #88]	; 0x58
 8002478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800247a:	fa92 f2a2 	rbit	r2, r2
 800247e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d17b      	bne.n	8002596 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0f3      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d13c      	bne.n	8002524 <HAL_RCC_ClockConfig+0x178>
 80024aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x128>
 80024ce:	4b4f      	ldr	r3, [pc, #316]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_ClockConfig+0x148>
 80024d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
 80024e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
 80024e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80024fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0220 	orr.w	r2, r2, #32
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d13a      	bne.n	8002596 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b2      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
 8002524:	2302      	movs	r3, #2
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	e00d      	b.n	8002568 <HAL_RCC_ClockConfig+0x1bc>
 800254c:	2302      	movs	r3, #2
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	2302      	movs	r3, #2
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2202      	movs	r2, #2
 800256a:	61ba      	str	r2, [r7, #24]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	617a      	str	r2, [r7, #20]
  return result;
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	fab2 f282 	clz	r2, r2
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f002 021f 	and.w	r2, r2, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e079      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	491a      	ldr	r1, [pc, #104]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fa78 	bl	8000a9c <HAL_GetTick>
 80025ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fa74 	bl	8000a9c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e061      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_ClockConfig+0x260>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d214      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4906      	ldr	r1, [pc, #24]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e040      	b.n	800268a <HAL_RCC_ClockConfig+0x2de>
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_ClockConfig+0x2e8>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	491a      	ldr	r1, [pc, #104]	; (8002694 <HAL_RCC_ClockConfig+0x2e8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x2e8>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4912      	ldr	r1, [pc, #72]	; (8002694 <HAL_RCC_ClockConfig+0x2e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800264e:	f000 f829 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002652:	4601      	mov	r1, r0
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RCC_ClockConfig+0x2e8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265c:	22f0      	movs	r2, #240	; 0xf0
 800265e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	60fa      	str	r2, [r7, #12]
  return result;
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	40d3      	lsrs	r3, r2
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x2ec>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	fa21 f303 	lsr.w	r3, r1, r3
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_RCC_ClockConfig+0x2f0>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_RCC_ClockConfig+0x2f4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe f9c6 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3778      	adds	r7, #120	; 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	08003920 	.word	0x08003920
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x36>
 80026d2:	e026      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 80026d6:	613b      	str	r3, [r7, #16]
      break;
 80026d8:	e026      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	fbb2 f2f3 	udiv	r2, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e004      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
      break;
 8002720:	e002      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 8002724:	613b      	str	r3, [r7, #16]
      break;
 8002726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	08003938 	.word	0x08003938
 8002744:	08003948 	.word	0x08003948
 8002748:	003d0900 	.word	0x003d0900

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800276a:	f7ff ffef 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276e:	4601      	mov	r1, r0
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002778:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800277c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	603a      	str	r2, [r7, #0]
  return result;
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	fab2 f282 	clz	r2, r2
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	40d3      	lsrs	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08003930 	.word	0x08003930

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027ae:	f7ff ffcd 	bl	800274c <HAL_RCC_GetHCLKFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	fa92 f2a2 	rbit	r2, r2
 80027c8:	603a      	str	r2, [r7, #0]
  return result;
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	40d3      	lsrs	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08003930 	.word	0x08003930

080027ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e095      	b.n	800292a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280e:	d009      	beq.n	8002824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
 8002816:	e005      	b.n	8002824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd ff40 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002864:	d902      	bls.n	800286c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e002      	b.n	8002872 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800286c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002870:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800287a:	d007      	beq.n	800288c <HAL_SPI_Init+0xa0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002884:	d002      	beq.n	800288c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	ea42 0103 	orr.w	r1, r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	f003 0204 	and.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_SPI_Transmit_DMA+0x20>
 8002950:	2302      	movs	r3, #2
 8002952:	e0d4      	b.n	8002afe <HAL_SPI_Transmit_DMA+0x1ca>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d002      	beq.n	800296e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002968:	2302      	movs	r3, #2
 800296a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800296c:	e0c2      	b.n	8002af4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_SPI_Transmit_DMA+0x46>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800297e:	e0b9      	b.n	8002af4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2203      	movs	r2, #3
 8002984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d10f      	bne.n	80029ec <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_SPI_Transmit_DMA+0x1d4>)
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_SPI_Transmit_DMA+0x1d8>)
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	4a43      	ldr	r2, [pc, #268]	; (8002b10 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a1a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a24:	d82d      	bhi.n	8002a82 <HAL_SPI_Transmit_DMA+0x14e>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d127      	bne.n	8002a82 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a5e:	e010      	b.n	8002a82 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a9a:	f7fe f987 	bl	8000dac <HAL_DMA_Start_IT>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002ab4:	e01e      	b.n	8002af4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d007      	beq.n	8002ad4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0202 	orr.w	r2, r2, #2
 8002af2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08002bf7 	.word	0x08002bf7
 8002b0c:	08002b51 	.word	0x08002b51
 8002b10:	08002c13 	.word	0x08002c13

08002b14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5e:	f7fd ff9d 	bl	8000a9c <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d03b      	beq.n	8002bea <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0220 	bic.w	r2, r2, #32
 8002b80:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0202 	bic.w	r2, r2, #2
 8002b90:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	2164      	movs	r1, #100	; 0x64
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f000 f97a 	bl	8002e90 <SPI_EndRxTxTransaction>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ffaa 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002be8:	e002      	b.n	8002bf0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff92 	bl	8002b14 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff ff8f 	bl	8002b28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0203 	bic.w	r2, r2, #3
 8002c2e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff ff79 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c64:	f7fd ff1a 	bl	8000a9c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c74:	f7fd ff12 	bl	8000a9c <HAL_GetTick>
 8002c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	0d1b      	lsrs	r3, r3, #20
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	e054      	b.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d050      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c94:	f7fd ff02 	bl	8000a9c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d902      	bls.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13d      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc2:	d111      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ccc:	d004      	beq.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d107      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d10f      	bne.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e017      	b.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d19b      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d76:	f7fd fe91 	bl	8000a9c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d86:	f7fd fe89 	bl	8000a9c <HAL_GetTick>
 8002d8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00da      	lsls	r2, r3, #3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	0d1b      	lsrs	r3, r3, #20
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002dac:	e060      	b.n	8002e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002db4:	d107      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d050      	beq.n	8002e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dce:	f7fd fe65 	bl	8000a9c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13d      	bne.n	8002e60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002df2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfc:	d111      	bne.n	8002e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d004      	beq.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	d107      	bne.n	8002e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d10f      	bne.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e010      	b.n	8002e82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d196      	bne.n	8002dae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff ff5b 	bl	8002d64 <SPI_WaitFifoStateUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e027      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fec0 	bl	8002c54 <SPI_WaitFlagStateUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e014      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff34 	bl	8002d64 <SPI_WaitFifoStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e000      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e040      	b.n	8002fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fc2c 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f95e 	bl	8003224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f825 	bl	8002fb8 <UART_SetConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01b      	b.n	8002fb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f9dd 	bl	8003368 <UART_CheckIdleState>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b8a      	ldr	r3, [pc, #552]	; (800320c <UART_SetConfig+0x254>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	6979      	ldr	r1, [r7, #20]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a78      	ldr	r2, [pc, #480]	; (8003210 <UART_SetConfig+0x258>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d120      	bne.n	8003076 <UART_SetConfig+0xbe>
 8003034:	4b77      	ldr	r3, [pc, #476]	; (8003214 <UART_SetConfig+0x25c>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b03      	cmp	r3, #3
 800303e:	d817      	bhi.n	8003070 <UART_SetConfig+0xb8>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x90>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	08003065 	.word	0x08003065
 8003050:	0800306b 	.word	0x0800306b
 8003054:	0800305f 	.word	0x0800305f
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e01d      	b.n	800309a <UART_SetConfig+0xe2>
 800305e:	2302      	movs	r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e01a      	b.n	800309a <UART_SetConfig+0xe2>
 8003064:	2304      	movs	r3, #4
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e017      	b.n	800309a <UART_SetConfig+0xe2>
 800306a:	2308      	movs	r3, #8
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e014      	b.n	800309a <UART_SetConfig+0xe2>
 8003070:	2310      	movs	r3, #16
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e011      	b.n	800309a <UART_SetConfig+0xe2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a67      	ldr	r2, [pc, #412]	; (8003218 <UART_SetConfig+0x260>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <UART_SetConfig+0xce>
 8003080:	2300      	movs	r3, #0
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e009      	b.n	800309a <UART_SetConfig+0xe2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a64      	ldr	r2, [pc, #400]	; (800321c <UART_SetConfig+0x264>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d102      	bne.n	8003096 <UART_SetConfig+0xde>
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e001      	b.n	800309a <UART_SetConfig+0xe2>
 8003096:	2310      	movs	r3, #16
 8003098:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d15a      	bne.n	800315a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d827      	bhi.n	80030fa <UART_SetConfig+0x142>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0xf8>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080030fb 	.word	0x080030fb
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	080030fb 	.word	0x080030fb
 80030c8:	080030fb 	.word	0x080030fb
 80030cc:	080030fb 	.word	0x080030fb
 80030d0:	080030f3 	.word	0x080030f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7ff fb46 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80030d8:	61b8      	str	r0, [r7, #24]
        break;
 80030da:	e013      	b.n	8003104 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fb64 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80030e0:	61b8      	str	r0, [r7, #24]
        break;
 80030e2:	e00f      	b.n	8003104 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <UART_SetConfig+0x268>)
 80030e6:	61bb      	str	r3, [r7, #24]
        break;
 80030e8:	e00c      	b.n	8003104 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff fadb 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80030ee:	61b8      	str	r0, [r7, #24]
        break;
 80030f0:	e008      	b.n	8003104 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f6:	61bb      	str	r3, [r7, #24]
        break;
 80030f8:	e004      	b.n	8003104 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77bb      	strb	r3, [r7, #30]
        break;
 8003102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d074      	beq.n	80031f4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d916      	bls.n	8003154 <UART_SetConfig+0x19c>
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d212      	bcs.n	8003154 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f023 030f 	bic.w	r3, r3, #15
 8003136:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	b29a      	uxth	r2, r3
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	4313      	orrs	r3, r2
 8003148:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	89fa      	ldrh	r2, [r7, #14]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	e04f      	b.n	80031f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	77bb      	strb	r3, [r7, #30]
 8003158:	e04c      	b.n	80031f4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315a:	7ffb      	ldrb	r3, [r7, #31]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d828      	bhi.n	80031b2 <UART_SetConfig+0x1fa>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0x1b0>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7ff faea 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 8003190:	61b8      	str	r0, [r7, #24]
        break;
 8003192:	e013      	b.n	80031bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff fb08 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8003198:	61b8      	str	r0, [r7, #24]
        break;
 800319a:	e00f      	b.n	80031bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <UART_SetConfig+0x268>)
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00c      	b.n	80031bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7ff fa7f 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80031a6:	61b8      	str	r0, [r7, #24]
        break;
 80031a8:	e008      	b.n	80031bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	61bb      	str	r3, [r7, #24]
        break;
 80031b0:	e004      	b.n	80031bc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	77bb      	strb	r3, [r7, #30]
        break;
 80031ba:	bf00      	nop
    }

    if (pclk != 0U)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085a      	lsrs	r2, r3, #1
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d909      	bls.n	80031f0 <UART_SetConfig+0x238>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d205      	bcs.n	80031f0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e001      	b.n	80031f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003200:	7fbb      	ldrb	r3, [r7, #30]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	40013800 	.word	0x40013800
 8003214:	40021000 	.word	0x40021000
 8003218:	40004400 	.word	0x40004400
 800321c:	40004800 	.word	0x40004800
 8003220:	007a1200 	.word	0x007a1200

08003224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01a      	beq.n	800333a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003322:	d10a      	bne.n	800333a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b098      	sub	sp, #96	; 0x60
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003378:	f7fd fb90 	bl	8000a9c <HAL_GetTick>
 800337c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d12e      	bne.n	80033ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f88c 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d021      	beq.n	80033ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	647b      	str	r3, [r7, #68]	; 0x44
 80033c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e6      	bne.n	80033a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e062      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d149      	bne.n	800348c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f856 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	623b      	str	r3, [r7, #32]
   return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
 8003432:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e6      	bne.n	8003412 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	60fb      	str	r3, [r7, #12]
   return(result);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003464:	61fa      	str	r2, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	617b      	str	r3, [r7, #20]
   return(result);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e011      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3758      	adds	r7, #88	; 0x58
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e04f      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d04b      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fd fae3 	bl	8000a9c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e04e      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d037      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d034      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d031      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d110      	bne.n	8003536 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f838 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2208      	movs	r2, #8
 8003526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e029      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d111      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800354e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f81e 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0a0      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003592:	b480      	push	{r7}
 8003594:	b095      	sub	sp, #84	; 0x54
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	61fb      	str	r3, [r7, #28]
   return(result);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	2b01      	cmp	r3, #1
 8003606:	d118      	bne.n	800363a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	60bb      	str	r3, [r7, #8]
   return(result);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f023 0310 	bic.w	r3, r3, #16
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	613b      	str	r3, [r7, #16]
   return(result);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e6      	bne.n	8003608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800364e:	bf00      	nop
 8003650:	3754      	adds	r7, #84	; 0x54
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <calloc>:
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <calloc+0xc>)
 800365e:	460a      	mov	r2, r1
 8003660:	4601      	mov	r1, r0
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f000 b83c 	b.w	80036e0 <_calloc_r>
 8003668:	2000000c 	.word	0x2000000c

0800366c <__errno>:
 800366c:	4b01      	ldr	r3, [pc, #4]	; (8003674 <__errno+0x8>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000000c 	.word	0x2000000c

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f000 f93c 	bl	8003908 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	08003958 	.word	0x08003958
 80036b4:	08003958 	.word	0x08003958
 80036b8:	08003958 	.word	0x08003958
 80036bc:	0800395c 	.word	0x0800395c

080036c0 <free>:
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <free+0xc>)
 80036c2:	4601      	mov	r1, r0
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	f000 b821 	b.w	800370c <_free_r>
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c

080036d0 <memset>:
 80036d0:	4402      	add	r2, r0
 80036d2:	4603      	mov	r3, r0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d100      	bne.n	80036da <memset+0xa>
 80036d8:	4770      	bx	lr
 80036da:	f803 1b01 	strb.w	r1, [r3], #1
 80036de:	e7f9      	b.n	80036d4 <memset+0x4>

080036e0 <_calloc_r>:
 80036e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036e2:	fba1 2402 	umull	r2, r4, r1, r2
 80036e6:	b94c      	cbnz	r4, 80036fc <_calloc_r+0x1c>
 80036e8:	4611      	mov	r1, r2
 80036ea:	9201      	str	r2, [sp, #4]
 80036ec:	f000 f87a 	bl	80037e4 <_malloc_r>
 80036f0:	9a01      	ldr	r2, [sp, #4]
 80036f2:	4605      	mov	r5, r0
 80036f4:	b930      	cbnz	r0, 8003704 <_calloc_r+0x24>
 80036f6:	4628      	mov	r0, r5
 80036f8:	b003      	add	sp, #12
 80036fa:	bd30      	pop	{r4, r5, pc}
 80036fc:	220c      	movs	r2, #12
 80036fe:	6002      	str	r2, [r0, #0]
 8003700:	2500      	movs	r5, #0
 8003702:	e7f8      	b.n	80036f6 <_calloc_r+0x16>
 8003704:	4621      	mov	r1, r4
 8003706:	f7ff ffe3 	bl	80036d0 <memset>
 800370a:	e7f4      	b.n	80036f6 <_calloc_r+0x16>

0800370c <_free_r>:
 800370c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800370e:	2900      	cmp	r1, #0
 8003710:	d044      	beq.n	800379c <_free_r+0x90>
 8003712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003716:	9001      	str	r0, [sp, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f1a1 0404 	sub.w	r4, r1, #4
 800371e:	bfb8      	it	lt
 8003720:	18e4      	addlt	r4, r4, r3
 8003722:	f000 f8e3 	bl	80038ec <__malloc_lock>
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <_free_r+0x94>)
 8003728:	9801      	ldr	r0, [sp, #4]
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	b933      	cbnz	r3, 800373c <_free_r+0x30>
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	6014      	str	r4, [r2, #0]
 8003732:	b003      	add	sp, #12
 8003734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003738:	f000 b8de 	b.w	80038f8 <__malloc_unlock>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d908      	bls.n	8003752 <_free_r+0x46>
 8003740:	6825      	ldr	r5, [r4, #0]
 8003742:	1961      	adds	r1, r4, r5
 8003744:	428b      	cmp	r3, r1
 8003746:	bf01      	itttt	eq
 8003748:	6819      	ldreq	r1, [r3, #0]
 800374a:	685b      	ldreq	r3, [r3, #4]
 800374c:	1949      	addeq	r1, r1, r5
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	e7ed      	b.n	800372e <_free_r+0x22>
 8003752:	461a      	mov	r2, r3
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b10b      	cbz	r3, 800375c <_free_r+0x50>
 8003758:	42a3      	cmp	r3, r4
 800375a:	d9fa      	bls.n	8003752 <_free_r+0x46>
 800375c:	6811      	ldr	r1, [r2, #0]
 800375e:	1855      	adds	r5, r2, r1
 8003760:	42a5      	cmp	r5, r4
 8003762:	d10b      	bne.n	800377c <_free_r+0x70>
 8003764:	6824      	ldr	r4, [r4, #0]
 8003766:	4421      	add	r1, r4
 8003768:	1854      	adds	r4, r2, r1
 800376a:	42a3      	cmp	r3, r4
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	d1e0      	bne.n	8003732 <_free_r+0x26>
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	6053      	str	r3, [r2, #4]
 8003776:	4421      	add	r1, r4
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	e7da      	b.n	8003732 <_free_r+0x26>
 800377c:	d902      	bls.n	8003784 <_free_r+0x78>
 800377e:	230c      	movs	r3, #12
 8003780:	6003      	str	r3, [r0, #0]
 8003782:	e7d6      	b.n	8003732 <_free_r+0x26>
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	1961      	adds	r1, r4, r5
 8003788:	428b      	cmp	r3, r1
 800378a:	bf04      	itt	eq
 800378c:	6819      	ldreq	r1, [r3, #0]
 800378e:	685b      	ldreq	r3, [r3, #4]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	bf04      	itt	eq
 8003794:	1949      	addeq	r1, r1, r5
 8003796:	6021      	streq	r1, [r4, #0]
 8003798:	6054      	str	r4, [r2, #4]
 800379a:	e7ca      	b.n	8003732 <_free_r+0x26>
 800379c:	b003      	add	sp, #12
 800379e:	bd30      	pop	{r4, r5, pc}
 80037a0:	200001c8 	.word	0x200001c8

080037a4 <sbrk_aligned>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4e0e      	ldr	r6, [pc, #56]	; (80037e0 <sbrk_aligned+0x3c>)
 80037a8:	460c      	mov	r4, r1
 80037aa:	6831      	ldr	r1, [r6, #0]
 80037ac:	4605      	mov	r5, r0
 80037ae:	b911      	cbnz	r1, 80037b6 <sbrk_aligned+0x12>
 80037b0:	f000 f88c 	bl	80038cc <_sbrk_r>
 80037b4:	6030      	str	r0, [r6, #0]
 80037b6:	4621      	mov	r1, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 f887 	bl	80038cc <_sbrk_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	d00a      	beq.n	80037d8 <sbrk_aligned+0x34>
 80037c2:	1cc4      	adds	r4, r0, #3
 80037c4:	f024 0403 	bic.w	r4, r4, #3
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d007      	beq.n	80037dc <sbrk_aligned+0x38>
 80037cc:	1a21      	subs	r1, r4, r0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f87c 	bl	80038cc <_sbrk_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d101      	bne.n	80037dc <sbrk_aligned+0x38>
 80037d8:	f04f 34ff 	mov.w	r4, #4294967295
 80037dc:	4620      	mov	r0, r4
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	200001cc 	.word	0x200001cc

080037e4 <_malloc_r>:
 80037e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	1ccd      	adds	r5, r1, #3
 80037ea:	f025 0503 	bic.w	r5, r5, #3
 80037ee:	3508      	adds	r5, #8
 80037f0:	2d0c      	cmp	r5, #12
 80037f2:	bf38      	it	cc
 80037f4:	250c      	movcc	r5, #12
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	4607      	mov	r7, r0
 80037fa:	db01      	blt.n	8003800 <_malloc_r+0x1c>
 80037fc:	42a9      	cmp	r1, r5
 80037fe:	d905      	bls.n	800380c <_malloc_r+0x28>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	2600      	movs	r6, #0
 8003806:	4630      	mov	r0, r6
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	4e2e      	ldr	r6, [pc, #184]	; (80038c8 <_malloc_r+0xe4>)
 800380e:	f000 f86d 	bl	80038ec <__malloc_lock>
 8003812:	6833      	ldr	r3, [r6, #0]
 8003814:	461c      	mov	r4, r3
 8003816:	bb34      	cbnz	r4, 8003866 <_malloc_r+0x82>
 8003818:	4629      	mov	r1, r5
 800381a:	4638      	mov	r0, r7
 800381c:	f7ff ffc2 	bl	80037a4 <sbrk_aligned>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	4604      	mov	r4, r0
 8003824:	d14d      	bne.n	80038c2 <_malloc_r+0xde>
 8003826:	6834      	ldr	r4, [r6, #0]
 8003828:	4626      	mov	r6, r4
 800382a:	2e00      	cmp	r6, #0
 800382c:	d140      	bne.n	80038b0 <_malloc_r+0xcc>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	4631      	mov	r1, r6
 8003832:	4638      	mov	r0, r7
 8003834:	eb04 0803 	add.w	r8, r4, r3
 8003838:	f000 f848 	bl	80038cc <_sbrk_r>
 800383c:	4580      	cmp	r8, r0
 800383e:	d13a      	bne.n	80038b6 <_malloc_r+0xd2>
 8003840:	6821      	ldr	r1, [r4, #0]
 8003842:	3503      	adds	r5, #3
 8003844:	1a6d      	subs	r5, r5, r1
 8003846:	f025 0503 	bic.w	r5, r5, #3
 800384a:	3508      	adds	r5, #8
 800384c:	2d0c      	cmp	r5, #12
 800384e:	bf38      	it	cc
 8003850:	250c      	movcc	r5, #12
 8003852:	4629      	mov	r1, r5
 8003854:	4638      	mov	r0, r7
 8003856:	f7ff ffa5 	bl	80037a4 <sbrk_aligned>
 800385a:	3001      	adds	r0, #1
 800385c:	d02b      	beq.n	80038b6 <_malloc_r+0xd2>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	442b      	add	r3, r5
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	e00e      	b.n	8003884 <_malloc_r+0xa0>
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	1b52      	subs	r2, r2, r5
 800386a:	d41e      	bmi.n	80038aa <_malloc_r+0xc6>
 800386c:	2a0b      	cmp	r2, #11
 800386e:	d916      	bls.n	800389e <_malloc_r+0xba>
 8003870:	1961      	adds	r1, r4, r5
 8003872:	42a3      	cmp	r3, r4
 8003874:	6025      	str	r5, [r4, #0]
 8003876:	bf18      	it	ne
 8003878:	6059      	strne	r1, [r3, #4]
 800387a:	6863      	ldr	r3, [r4, #4]
 800387c:	bf08      	it	eq
 800387e:	6031      	streq	r1, [r6, #0]
 8003880:	5162      	str	r2, [r4, r5]
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	4638      	mov	r0, r7
 8003886:	f104 060b 	add.w	r6, r4, #11
 800388a:	f000 f835 	bl	80038f8 <__malloc_unlock>
 800388e:	f026 0607 	bic.w	r6, r6, #7
 8003892:	1d23      	adds	r3, r4, #4
 8003894:	1af2      	subs	r2, r6, r3
 8003896:	d0b6      	beq.n	8003806 <_malloc_r+0x22>
 8003898:	1b9b      	subs	r3, r3, r6
 800389a:	50a3      	str	r3, [r4, r2]
 800389c:	e7b3      	b.n	8003806 <_malloc_r+0x22>
 800389e:	6862      	ldr	r2, [r4, #4]
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	bf0c      	ite	eq
 80038a4:	6032      	streq	r2, [r6, #0]
 80038a6:	605a      	strne	r2, [r3, #4]
 80038a8:	e7ec      	b.n	8003884 <_malloc_r+0xa0>
 80038aa:	4623      	mov	r3, r4
 80038ac:	6864      	ldr	r4, [r4, #4]
 80038ae:	e7b2      	b.n	8003816 <_malloc_r+0x32>
 80038b0:	4634      	mov	r4, r6
 80038b2:	6876      	ldr	r6, [r6, #4]
 80038b4:	e7b9      	b.n	800382a <_malloc_r+0x46>
 80038b6:	230c      	movs	r3, #12
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4638      	mov	r0, r7
 80038bc:	f000 f81c 	bl	80038f8 <__malloc_unlock>
 80038c0:	e7a1      	b.n	8003806 <_malloc_r+0x22>
 80038c2:	6025      	str	r5, [r4, #0]
 80038c4:	e7de      	b.n	8003884 <_malloc_r+0xa0>
 80038c6:	bf00      	nop
 80038c8:	200001c8 	.word	0x200001c8

080038cc <_sbrk_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d06      	ldr	r5, [pc, #24]	; (80038e8 <_sbrk_r+0x1c>)
 80038d0:	2300      	movs	r3, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fc ffd8 	bl	800088c <_sbrk>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_sbrk_r+0x1a>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_sbrk_r+0x1a>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	200001d0 	.word	0x200001d0

080038ec <__malloc_lock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_lock+0x8>)
 80038ee:	f000 b809 	b.w	8003904 <__retarget_lock_acquire_recursive>
 80038f2:	bf00      	nop
 80038f4:	200001d4 	.word	0x200001d4

080038f8 <__malloc_unlock>:
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <__malloc_unlock+0x8>)
 80038fa:	f000 b804 	b.w	8003906 <__retarget_lock_release_recursive>
 80038fe:	bf00      	nop
 8003900:	200001d4 	.word	0x200001d4

08003904 <__retarget_lock_acquire_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_release_recursive>:
 8003906:	4770      	bx	lr

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
