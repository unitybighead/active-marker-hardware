
VEML6030_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080053c0  080053c0  000153c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005428  08005428  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005428  08005428  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005428  08005428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000011c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c994  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3a  00000000  00000000  0002ca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aec8  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e278  00000000  00000000  0004a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb8f  00000000  00000000  00058988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f4517  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e50  00000000  00000000  000f4568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053a4 	.word	0x080053a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080053a4 	.word	0x080053a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <VEML6030_init+0x38>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00};
 8000b92:	2300      	movs	r3, #0
 8000b94:	81bb      	strh	r3, [r7, #12]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 2, 100);
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <VEML6030_init+0x38>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	f107 020c 	add.w	r2, r7, #12
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f000 ff84 	bl	8001ab4 <HAL_I2C_Master_Transmit>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	00000000 	.word	0x00000000

08000bc0 <VEML6030_getLux>:
/*
 * @brief get lux data
 * @param sensor address
 * @return lux
 */
float VEML6030_getLux(uint8_t addr) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  float gain = VEML6030_getGain(addr);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f857 	bl	8000c80 <VEML6030_getGain>
 8000bd2:	ed87 0a05 	vstr	s0, [r7, #20]
  uint16_t inttime = VEML6030_getIntTime(addr);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f891 	bl	8000d00 <VEML6030_getIntTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	827b      	strh	r3, [r7, #18]
  uint16_t als = VEML6030_getALS(addr);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f8ed 	bl	8000dc4 <VEML6030_getALS>
 8000bea:	4603      	mov	r3, r0
 8000bec:	823b      	strh	r3, [r7, #16]
  float resolution = (1.8432 / ((float) inttime / 25.0)) * (0.125 / gain);
 8000bee:	8a7b      	ldrh	r3, [r7, #18]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf8:	ee17 0a90 	vmov	r0, s15
 8000bfc:	f7ff fc48 	bl	8000490 <__aeabi_f2d>
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <VEML6030_getLux+0xb8>)
 8000c06:	f7ff fdc5 	bl	8000794 <__aeabi_ddiv>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	a118      	add	r1, pc, #96	; (adr r1, 8000c70 <VEML6030_getLux+0xb0>)
 8000c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c14:	f7ff fdbe 	bl	8000794 <__aeabi_ddiv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4614      	mov	r4, r2
 8000c1e:	461d      	mov	r5, r3
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff fc35 	bl	8000490 <__aeabi_f2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000c32:	f7ff fdaf 	bl	8000794 <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	f7ff fc7f 	bl	8000540 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff ff49 	bl	8000ae0 <__aeabi_d2f>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60fb      	str	r3, [r7, #12]
  return als * resolution;
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	487fcb92 	.word	0x487fcb92
 8000c74:	3ffd7dbf 	.word	0x3ffd7dbf
 8000c78:	40390000 	.word	0x40390000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <VEML6030_getGain>:
/*
 * @brief get gain data
 * @param addr sensor address
 * @return gain
 */
float VEML6030_getGain(uint8_t addr) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8aa 	bl	8000de8 <VEML6030_readWord>
 8000c94:	4603      	mov	r3, r0
 8000c96:	82fb      	strh	r3, [r7, #22]
  uint16_t x0 = VEML6030_readBit(config, 11);
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	210b      	movs	r1, #11
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f8cd 	bl	8000e3c <VEML6030_readBit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	82bb      	strh	r3, [r7, #20]
  uint16_t x1 = VEML6030_readBit(config, 12);
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	210c      	movs	r1, #12
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8c6 	bl	8000e3c <VEML6030_readBit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	827b      	strh	r3, [r7, #18]
  float gain = pow(2,(x0 - 3 * x1));
 8000cb4:	8aba      	ldrh	r2, [r7, #20]
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	1acb      	subs	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbd3 	bl	800046c <__aeabi_i2d>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	ec43 2b11 	vmov	d1, r2, r3
 8000cce:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000cf8 <VEML6030_getGain+0x78>
 8000cd2:	f003 fc4d 	bl	8004570 <pow>
 8000cd6:	ec53 2b10 	vmov	r2, r3, d0
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff feff 	bl	8000ae0 <__aeabi_d2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60fb      	str	r3, [r7, #12]
  return gain;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	ee07 3a90 	vmov	s15, r3
}
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40000000 	.word	0x40000000

08000d00 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f86a 	bl	8000de8 <VEML6030_readWord>
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
  uint8_t x2x1 = (config >> 6) & 0x03;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	099b      	lsrs	r3, r3, #6
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	737b      	strb	r3, [r7, #13]
  uint8_t x3 = VEML6030_readBit(config, 8);
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f886 	bl	8000e3c <VEML6030_readBit>
 8000d30:	4603      	mov	r3, r0
 8000d32:	733b      	strb	r3, [r7, #12]
  uint8_t x4 = VEML6030_readBit(config, 9);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	2109      	movs	r1, #9
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f87f 	bl	8000e3c <VEML6030_readBit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	72fb      	strb	r3, [r7, #11]
  uint16_t IntTime = 100 *pow(2,x2x1)/ pow(2,(x3 + x4));
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb81 	bl	800044c <__aeabi_ui2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	ec43 2b11 	vmov	d1, r2, r3
 8000d52:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000db8 <VEML6030_getIntTime+0xb8>
 8000d56:	f003 fc0b 	bl	8004570 <pow>
 8000d5a:	ec51 0b10 	vmov	r0, r1, d0
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <VEML6030_getIntTime+0xc0>)
 8000d64:	f7ff fbec 	bl	8000540 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	461d      	mov	r5, r3
 8000d70:	7b3a      	ldrb	r2, [r7, #12]
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4413      	add	r3, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb78 	bl	800046c <__aeabi_i2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	ec43 2b11 	vmov	d1, r2, r3
 8000d84:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000db8 <VEML6030_getIntTime+0xb8>
 8000d88:	f003 fbf2 	bl	8004570 <pow>
 8000d8c:	ec53 2b10 	vmov	r2, r3, d0
 8000d90:	4620      	mov	r0, r4
 8000d92:	4629      	mov	r1, r5
 8000d94:	f7ff fcfe 	bl	8000794 <__aeabi_ddiv>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe7e 	bl	8000aa0 <__aeabi_d2uiz>
 8000da4:	4603      	mov	r3, r0
 8000da6:	813b      	strh	r3, [r7, #8]
  return IntTime;
 8000da8:	893b      	ldrh	r3, [r7, #8]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bdb0      	pop	{r4, r5, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40000000 	.word	0x40000000
 8000dc0:	40590000 	.word	0x40590000

08000dc4 <VEML6030_getALS>:
/*
 * @brief get row illuminance data
 * @param addr address
 * @return row data
 */
uint16_t VEML6030_getALS(uint8_t addr){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  uint16_t als = VEML6030_readWord(addr, ALS_CMD);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f808 	bl	8000de8 <VEML6030_readWord>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	81fb      	strh	r3, [r7, #14]
  return als;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = { };
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <VEML6030_readWord+0x50>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	b299      	uxth	r1, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	f000 ff64 	bl	8001ce4 <HAL_I2C_Mem_Read>
  uint16_t data = (buf[1] << 8) + buf[0];
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	81fb      	strh	r3, [r7, #14]
  return data;
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000008c 	.word	0x2000008c

08000e3c <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000e4c:	88fa      	ldrh	r2, [r7, #6]
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	fa42 f303 	asr.w	r3, r2, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f000 fac7 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f851 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f000 f917 	bl	80010a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 f8e5 	bl	8001048 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e7e:	f000 f8a3 	bl	8000fc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (VEML6030_init(&hi2c1, SENS_ADDR_0) != HAL_OK) {
 8000e82:	2190      	movs	r1, #144	; 0x90
 8000e84:	4821      	ldr	r0, [pc, #132]	; (8000f0c <main+0xa4>)
 8000e86:	f7ff fe7b 	bl	8000b80 <VEML6030_init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <main+0x2c>
    Error_Handler();
 8000e90:	f000 f93a 	bl	8001108 <Error_Handler>
  }
  float *cycle_basis = calloc(sizeof(float), CYCLE_LAST);
 8000e94:	2102      	movs	r1, #2
 8000e96:	2004      	movs	r0, #4
 8000e98:	f003 fa68 	bl	800436c <calloc>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	607b      	str	r3, [r7, #4]
  uint32_t *cycle_old = calloc(sizeof(float), CYCLE_LAST);
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f003 fa62 	bl	800436c <calloc>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	603b      	str	r3, [r7, #0]
  cycle_basis[CYCLE_MAIN] = 1000 / 60;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000eb2:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_SENSOR] = VEML6030_getIntTime(SENS_ADDR_0);
 8000eb4:	2090      	movs	r0, #144	; 0x90
 8000eb6:	f7ff ff23 	bl	8000d00 <VEML6030_getIntTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    i++;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <main+0xa8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <main+0xa8>)
 8000ed4:	6013      	str	r3, [r2, #0]
    if (CycleController(CYCLE_SENSOR, cycle_basis, cycle_old)) {
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 fa38 	bl	8001350 <CycleController>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <main+0x8e>
      g_lux = VEML6030_getLux(SENS_ADDR_0);
 8000ee6:	2090      	movs	r0, #144	; 0x90
 8000ee8:	f7ff fe6a 	bl	8000bc0 <VEML6030_getLux>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <main+0xac>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
    }
    while (CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000ef6:	bf00      	nop
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 fa27 	bl	8001350 <CycleController>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f7      	bne.n	8000ef8 <main+0x90>
    i++;
 8000f08:	e7e0      	b.n	8000ecc <main+0x64>
 8000f0a:	bf00      	nop
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	20000170 	.word	0x20000170
 8000f14:	2000016c 	.word	0x2000016c

08000f18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fa52 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	2310      	movs	r3, #16
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000f60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fada 	bl	8002524 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x62>
    Error_Handler();
 8000f76:	f000 f8c7 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	2101      	movs	r1, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fb02 	bl	80035a0 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x8e>
    Error_Handler();
 8000fa2:	f000 f8b1 	bl	8001108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fd15 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xa8>
    Error_Handler();
 8000fbc:	f000 f8a4 	bl	8001108 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3758      	adds	r7, #88	; 0x58
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_I2C1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <MX_I2C1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_I2C1_Init+0x74>)
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <MX_I2C1_Init+0x7c>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_I2C1_Init+0x74>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_I2C1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_I2C1_Init+0x74>)
 8001004:	f000 fcba 	bl	800197c <HAL_I2C_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C1_Init+0x4a>
    Error_Handler();
 800100e:	f000 f87b 	bl	8001108 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001012:	2100      	movs	r1, #0
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_I2C1_Init+0x74>)
 8001016:	f001 f9ed 	bl	80023f4 <HAL_I2CEx_ConfigAnalogFilter>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8001020:	f000 f872 	bl	8001108 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001024:	2100      	movs	r1, #0
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_I2C1_Init+0x74>)
 8001028:	f001 fa2f 	bl	800248a <HAL_I2CEx_ConfigDigitalFilter>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8001032:	f000 f869 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000090 	.word	0x20000090
 8001040:	40005400 	.word	0x40005400
 8001044:	2000090e 	.word	0x2000090e

08001048 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_USART2_UART_Init+0x5c>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001054:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800108c:	f002 fdce 	bl	8003c2c <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x52>
    Error_Handler();
 8001096:	f000 f837 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000e4 	.word	0x200000e4
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_GPIO_Init+0x5c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x44>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x44>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_I2C_MspInit+0x7c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d127      	bne.n	80011ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x80>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_I2C_MspInit+0x80>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_I2C_MspInit+0x80>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <HAL_I2C_MspInit+0x84>)
 80011b2:	f000 fa71 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40005400 	.word	0x40005400
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x80>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d129      	bne.n	800125a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x84>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_UART_MspInit+0x84>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001236:	f248 0304 	movw	r3, #32772	; 0x8004
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f000 fa1f 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004400 	.word	0x40004400
 8001268:	40021000 	.word	0x40021000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8e8 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f003 f844 	bl	800437c <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20003000 	.word	0x20003000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000174 	.word	0x20000174
 8001328:	20000190 	.word	0x20000190

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <CycleController+0x2a>
    old[data] = HAL_GetTick();
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	18d4      	adds	r4, r2, r3
 8001372:	f000 f89f 	bl	80014b4 <HAL_GetTick>
 8001376:	4603      	mov	r3, r0
 8001378:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 800137a:	f000 f89b 	bl	80014b4 <HAL_GetTick>
 800137e:	6178      	str	r0, [r7, #20]
  if (current - old[data] > 0) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	d007      	beq.n	80013a0 <CycleController+0x50>
    old[data] = current;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	601a      	str	r2, [r3, #0]
    return 1;
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <CycleController+0x52>
  } else {
    return 0;
 80013a0:	2300      	movs	r3, #0
  }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	371c      	adds	r7, #28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
	...

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b0:	f7ff ffbc 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f002 ffd5 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff fd43 	bl	8000e68 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013f0:	08005430 	.word	0x08005430
  ldr r2, =_sbss
 80013f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f8:	2000018c 	.word	0x2000018c

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f90d 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fe7a 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f917 	bl	800167e <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f8ed 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000178 	.word	0x20000178

080014b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000178 	.word	0x20000178

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff47 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff5c 	bl	8001514 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff8e 	bl	8001584 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5d 	bl	8001530 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffb0 	bl	80015ec <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e14e      	b.n	8001946 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8140 	beq.w	8001940 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	6939      	ldr	r1, [r7, #16]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 809a 	beq.w	8001940 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184e:	d013      	beq.n	8001878 <HAL_GPIO_Init+0x1e0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <HAL_GPIO_Init+0x2d4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d00d      	beq.n	8001874 <HAL_GPIO_Init+0x1dc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a45      	ldr	r2, [pc, #276]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0x1d8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a44      	ldr	r2, [pc, #272]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_GPIO_Init+0x1d4>
 8001868:	2303      	movs	r3, #3
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 800186c:	2305      	movs	r3, #5
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188a:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f47f aea9 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	48000400 	.word	0x48000400
 8001970:	48000800 	.word	0x48000800
 8001974:	48000c00 	.word	0x48000c00
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e08d      	b.n	8001aaa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fbda 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e006      	b.n	8001a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d108      	bne.n	8001a1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	e007      	b.n	8001a2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69d9      	ldr	r1, [r3, #28]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	f040 80fd 	bne.w	8001cd0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2C_Master_Transmit+0x30>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0f6      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aec:	f7ff fce2 	bl	80014b4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fa82 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e1      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2221      	movs	r2, #33	; 0x21
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	893a      	ldrh	r2, [r7, #8]
 8001b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2bff      	cmp	r3, #255	; 0xff
 8001b3e:	d906      	bls.n	8001b4e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e007      	b.n	8001b5e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d024      	beq.n	8001bb0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_I2C_Master_Transmit+0x228>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fbf1 	bl	8002390 <I2C_TransferConfig>
 8001bae:	e066      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_I2C_Master_Transmit+0x228>)
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fbe6 	bl	8002390 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc4:	e05b      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fa75 	bl	80020ba <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07b      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d034      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x1ca>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d130      	bne.n	8001c7e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	2200      	movs	r2, #0
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f9ee 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e04d      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2bff      	cmp	r3, #255	; 0xff
 8001c3e:	d90e      	bls.n	8001c5e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fb9a 	bl	8002390 <I2C_TransferConfig>
 8001c5c:	e00f      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fb89 	bl	8002390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d19e      	bne.n	8001bc6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	6a39      	ldr	r1, [r7, #32]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 fa5b 	bl	8002148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01a      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_I2C_Master_Transmit+0x22c>)
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	80002000 	.word	0x80002000
 8001ce0:	fe00e800 	.word	0xfe00e800

08001ce4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	817b      	strh	r3, [r7, #10]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	813b      	strh	r3, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	f040 80fd 	bne.w	8001f06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_I2C_Mem_Read+0x34>
 8001d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0f1      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Mem_Read+0x4e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0ea      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fbbb 	bl	80014b4 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2319      	movs	r3, #25
 8001d46:	2201      	movs	r2, #1
 8001d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f95b 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0d5      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2222      	movs	r2, #34	; 0x22
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a3a      	ldr	r2, [r7, #32]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d84:	88f8      	ldrh	r0, [r7, #6]
 8001d86:	893a      	ldrh	r2, [r7, #8]
 8001d88:	8979      	ldrh	r1, [r7, #10]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4603      	mov	r3, r0
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f8bf 	bl	8001f18 <I2C_RequestMemoryRead>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ad      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2bff      	cmp	r3, #255	; 0xff
 8001db4:	d90e      	bls.n	8001dd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	8979      	ldrh	r1, [r7, #10]
 8001dc4:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <HAL_I2C_Mem_Read+0x22c>)
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fadf 	bl	8002390 <I2C_TransferConfig>
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	8979      	ldrh	r1, [r7, #10]
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_I2C_Mem_Read+0x22c>)
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 face 	bl	8002390 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f902 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07c      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d034      	beq.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d130      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f8d3 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e04d      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d90e      	bls.n	8001e94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fa7f 	bl	8002390 <I2C_TransferConfig>
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fa6e 	bl	8002390 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d19a      	bne.n	8001df4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f940 	bl	8002148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01a      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_I2C_Mem_Read+0x230>)
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	80002400 	.word	0x80002400
 8001f14:	fe00e800 	.word	0xfe00e800

08001f18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	817b      	strh	r3, [r7, #10]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	813b      	strh	r3, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <I2C_RequestMemoryRead+0xa4>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fa26 	bl	8002390 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f8b6 	bl	80020ba <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e02c      	b.n	8001fb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f5e:	893b      	ldrh	r3, [r7, #8]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
 8001f68:	e015      	b.n	8001f96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f6a:	893b      	ldrh	r3, [r7, #8]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f89c 	bl	80020ba <I2C_WaitOnTXISFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e012      	b.n	8001fb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8c:	893b      	ldrh	r3, [r7, #8]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f831 	bl	8002008 <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	80002000 	.word	0x80002000

08001fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d103      	bne.n	8001fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d007      	beq.n	8001ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	619a      	str	r2, [r3, #24]
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002018:	e03b      	b.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f8d6 	bl	80021d0 <I2C_IsErrorOccurred>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e041      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d02d      	beq.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7ff fa3d 	bl	80014b4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d122      	bne.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4013      	ands	r3, r2
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	429a      	cmp	r2, r3
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	429a      	cmp	r2, r3
 8002068:	d113      	bne.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4013      	ands	r3, r2
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d0b4      	beq.n	800201a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c6:	e033      	b.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f87f 	bl	80021d0 <I2C_IsErrorOccurred>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e031      	b.n	8002140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e2:	d025      	beq.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e4:	f7ff f9e6 	bl	80014b4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d302      	bcc.n	80020fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11a      	bne.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d013      	beq.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e007      	b.n	8002140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d1c4      	bne.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002154:	e02f      	b.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f838 	bl	80021d0 <I2C_IsErrorOccurred>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e02d      	b.n	80021c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7ff f9a3 	bl	80014b4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11a      	bne.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d013      	beq.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e007      	b.n	80021c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d1c8      	bne.n	8002156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d068      	beq.n	80022ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002204:	e049      	b.n	800229a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d045      	beq.n	800229a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f951 	bl	80014b4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_IsErrorOccurred+0x54>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d13a      	bne.n	800229a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002246:	d121      	bne.n	800228c <I2C_IsErrorOccurred+0xbc>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224e:	d01d      	beq.n	800228c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b20      	cmp	r3, #32
 8002254:	d01a      	beq.n	800228c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002264:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002266:	f7ff f925 	bl	80014b4 <HAL_GetTick>
 800226a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	e00e      	b.n	800228c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800226e:	f7ff f921 	bl	80014b4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b19      	cmp	r3, #25
 800227a:	d907      	bls.n	800228c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800228a:	e006      	b.n	800229a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d1e9      	bne.n	800226e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d003      	beq.n	80022b0 <I2C_IsErrorOccurred+0xe0>
 80022a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0aa      	beq.n	8002206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002312:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800233c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01c      	beq.n	800237e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fe3b 	bl	8001fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <I2C_IsErrorOccurred+0x1bc>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800237e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002382:	4618      	mov	r0, r3
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	fe00e800 	.word	0xfe00e800

08002390 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	4613      	mov	r3, r2
 80023a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023a8:	7a7b      	ldrb	r3, [r7, #9]
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	0d5b      	lsrs	r3, r3, #21
 80023ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <I2C_TransferConfig+0x60>)
 80023d0:	430b      	orrs	r3, r1
 80023d2:	43db      	mvns	r3, r3
 80023d4:	ea02 0103 	and.w	r1, r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	03ff63ff 	.word	0x03ff63ff

080023f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	d138      	bne.n	800247c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002414:	2302      	movs	r3, #2
 8002416:	e032      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002446:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	d139      	bne.n	8002514 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e033      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800252a:	af00      	add	r7, sp, #0
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002534:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f001 b823 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 817d 	beq.w	800285a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002560:	4bbc      	ldr	r3, [pc, #752]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4bb9      	ldr	r3, [pc, #740]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d15c      	bne.n	8002632 <HAL_RCC_OscConfig+0x10e>
 8002578:	4bb6      	ldr	r3, [pc, #728]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d155      	bne.n	8002632 <HAL_RCC_OscConfig+0x10e>
 8002586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800259a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_OscConfig+0x94>
 80025b2:	4ba8      	ldr	r3, [pc, #672]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e015      	b.n	80025e4 <HAL_RCC_OscConfig+0xc0>
 80025b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025e0:	4b9c      	ldr	r3, [pc, #624]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 811f 	beq.w	8002858 <HAL_RCC_OscConfig+0x334>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8116 	bne.w	8002858 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f000 bfaf 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x12e>
 8002644:	4b83      	ldr	r3, [pc, #524]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a82      	ldr	r2, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e036      	b.n	80026c0 <HAL_RCC_OscConfig+0x19c>
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x158>
 8002662:	4b7c      	ldr	r3, [pc, #496]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7b      	ldr	r2, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b79      	ldr	r3, [pc, #484]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a78      	ldr	r2, [pc, #480]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e021      	b.n	80026c0 <HAL_RCC_OscConfig+0x19c>
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x184>
 800268e:	4b71      	ldr	r3, [pc, #452]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a70      	ldr	r2, [pc, #448]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b6e      	ldr	r3, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x19c>
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a69      	ldr	r2, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c0:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f023 020f 	bic.w	r2, r3, #15
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	495f      	ldr	r1, [pc, #380]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d059      	beq.n	800279e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fee3 	bl	80014b4 <HAL_GetTick>
 80026ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fede 	bl	80014b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d902      	bls.n	800270a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	f000 bf43 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 800270a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800271e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_OscConfig+0x218>
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0x244>
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002754:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002758:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800276c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002770:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800277c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ab      	beq.n	80026f4 <HAL_RCC_OscConfig+0x1d0>
 800279c:	e05d      	b.n	800285a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fe89 	bl	80014b4 <HAL_GetTick>
 80027a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe fe84 	bl	80014b4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b64      	cmp	r3, #100	; 0x64
 80027b6:	d902      	bls.n	80027be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	f000 bee9 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 80027be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2cc>
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e015      	b.n	800281c <HAL_RCC_OscConfig+0x2f8>
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002808:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800280c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_RCC_OscConfig+0x330>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002820:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002824:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002830:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ab      	bne.n	80027a8 <HAL_RCC_OscConfig+0x284>
 8002850:	e003      	b.n	800285a <HAL_RCC_OscConfig+0x336>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 817d 	beq.w	8002b6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002870:	4ba6      	ldr	r3, [pc, #664]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800287c:	4ba3      	ldr	r3, [pc, #652]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d172      	bne.n	800296e <HAL_RCC_OscConfig+0x44a>
 8002888:	4ba0      	ldr	r3, [pc, #640]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d16c      	bne.n	800296e <HAL_RCC_OscConfig+0x44a>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3a0>
 80028be:	4b93      	ldr	r3, [pc, #588]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0x3c8>
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028e8:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2202      	movs	r2, #2
 80028ee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028f6:	fa92 f2a2 	rbit	r2, r2
 80028fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002902:	fab2 f282 	clz	r2, r2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f042 0220 	orr.w	r2, r2, #32
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f002 021f 	and.w	r2, r2, #31
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCC_OscConfig+0x410>
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f000 be2e 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	21f8      	movs	r1, #248	; 0xf8
 800294a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002952:	fa91 f1a1 	rbit	r1, r1
 8002956:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800295a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800295e:	fab1 f181 	clz	r1, r1
 8002962:	b2c9      	uxtb	r1, r1
 8002964:	408b      	lsls	r3, r1
 8002966:	4969      	ldr	r1, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296c:	e0fd      	b.n	8002b6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8088 	beq.w	8002a90 <HAL_RCC_OscConfig+0x56c>
 8002980:	2301      	movs	r3, #1
 8002982:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002992:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	461a      	mov	r2, r3
 80029a8:	2301      	movs	r3, #1
 80029aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd82 	bl	80014b4 <HAL_GetTick>
 80029b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fd7d 	bl	80014b4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f000 bde2 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d8>
 80029f6:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e013      	b.n	8002a24 <HAL_RCC_OscConfig+0x500>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a20:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2202      	movs	r2, #2
 8002a26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f002 021f 	and.w	r2, r2, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0af      	beq.n	80029b6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	21f8      	movs	r1, #248	; 0xf8
 8002a6c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a74:	fa91 f1a1 	rbit	r1, r1
 8002a78:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a7c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a80:	fab1 f181 	clz	r1, r1
 8002a84:	b2c9      	uxtb	r1, r1
 8002a86:	408b      	lsls	r3, r1
 8002a88:	4920      	ldr	r1, [pc, #128]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
 8002a8e:	e06c      	b.n	8002b6a <HAL_RCC_OscConfig+0x646>
 8002a90:	2301      	movs	r3, #1
 8002a92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002aa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fcfa 	bl	80014b4 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fcf5 	bl	80014b4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d902      	bls.n	8002adc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f000 bd5a 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d104      	bne.n	8002b10 <HAL_RCC_OscConfig+0x5ec>
 8002b06:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <HAL_RCC_OscConfig+0x5e8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_OscConfig+0x614>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	2302      	movs	r3, #2
 8002b12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b34:	4bc8      	ldr	r3, [pc, #800]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ad      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8110 	beq.w	8002da0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d079      	beq.n	8002c84 <HAL_RCC_OscConfig+0x760>
 8002b90:	2301      	movs	r3, #1
 8002b92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	4bab      	ldr	r3, [pc, #684]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fc7b 	bl	80014b4 <HAL_GetTick>
 8002bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fc76 	bl	80014b4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d902      	bls.n	8002bda <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f000 bcdb 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c18:	2202      	movs	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c40:	2102      	movs	r1, #2
 8002c42:	6019      	str	r1, [r3, #0]
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f1a3 	rbit	r1, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c5a:	6019      	str	r1, [r3, #0]
  return result;
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0a0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x6a0>
 8002c82:	e08d      	b.n	8002da0 <HAL_RCC_OscConfig+0x87c>
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ca6:	601a      	str	r2, [r3, #0]
  return result;
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cb0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <HAL_RCC_OscConfig+0x938>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fbf5 	bl	80014b4 <HAL_GetTick>
 8002cca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fbf0 	bl	80014b4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d902      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	f000 bc55 	b.w	8003590 <HAL_RCC_OscConfig+0x106c>
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d5e:	2102      	movs	r1, #2
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f1a3 	rbit	r1, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d78:	6019      	str	r1, [r3, #0]
  return result;
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d197      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 81a1 	beq.w	80030f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002dee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCC_OscConfig+0x93c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x93c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_RCC_OscConfig+0x93c>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fb51 	bl	80014b4 <HAL_GetTick>
 8002e12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	e009      	b.n	8002e2c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e18:	f7fe fb4c 	bl	80014b4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	; 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e3b1      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x93c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCC_OscConfig+0x940>
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4a02      	ldr	r2, [pc, #8]	; (8002e58 <HAL_RCC_OscConfig+0x934>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6213      	str	r3, [r2, #32]
 8002e54:	e03c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	10908120 	.word	0x10908120
 8002e60:	40007000 	.word	0x40007000
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x96a>
 8002e74:	4bc1      	ldr	r3, [pc, #772]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4ac0      	ldr	r2, [pc, #768]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4bbe      	ldr	r3, [pc, #760]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4abd      	ldr	r2, [pc, #756]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002e86:	f023 0304 	bic.w	r3, r3, #4
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e020      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x994>
 8002e9e:	4bb7      	ldr	r3, [pc, #732]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4ab6      	ldr	r2, [pc, #728]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4bb4      	ldr	r3, [pc, #720]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4ab3      	ldr	r2, [pc, #716]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x9ac>
 8002eb8:	4bb0      	ldr	r3, [pc, #704]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4aaf      	ldr	r2, [pc, #700]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	4bad      	ldr	r3, [pc, #692]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4aac      	ldr	r2, [pc, #688]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8081 	beq.w	8002fe4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fae7 	bl	80014b4 <HAL_GetTick>
 8002ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe fae2 	bl	80014b4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e345      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f30:	2202      	movs	r2, #2
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f4a:	601a      	str	r2, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_OscConfig+0xa4c>
 8002f6a:	4b84      	ldr	r3, [pc, #528]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	e013      	b.n	8002f98 <HAL_RCC_OscConfig+0xa74>
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f78:	2202      	movs	r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f9c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	6011      	str	r1, [r2, #0]
 8002fa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	fa92 f1a2 	rbit	r1, r2
 8002fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fba:	6011      	str	r1, [r2, #0]
  return result;
 8002fbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f002 021f 	and.w	r2, r2, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d084      	beq.n	8002eec <HAL_RCC_OscConfig+0x9c8>
 8002fe2:	e07f      	b.n	80030e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fa66 	bl	80014b4 <HAL_GetTick>
 8002fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	e00b      	b.n	8003006 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe fa61 	bl	80014b4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e2c4      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800304c:	601a      	str	r2, [r3, #0]
  return result;
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003056:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0302 	orr.w	r3, r3, #2
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0xb4e>
 800306c:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	e013      	b.n	800309a <HAL_RCC_OscConfig+0xb76>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030a2:	2102      	movs	r1, #2
 80030a4:	6011      	str	r1, [r2, #0]
 80030a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fa92 f1a2 	rbit	r1, r2
 80030b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030bc:	6011      	str	r1, [r2, #0]
  return result;
 80030be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d184      	bne.n	8002fee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8242 	beq.w	800358e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_RCC_OscConfig+0xc58>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	f000 8213 	beq.w	800353e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f040 8162 	bne.w	80033ee <HAL_RCC_OscConfig+0xeca>
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003132:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003158:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe f9a0 	bl	80014b4 <HAL_GetTick>
 8003174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e00c      	b.n	8003194 <HAL_RCC_OscConfig+0xc70>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe f998 	bl	80014b4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1fd      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800319c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031b8:	601a      	str	r2, [r3, #0]
  return result;
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0xcba>
 80031d8:	4bb0      	ldr	r3, [pc, #704]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e027      	b.n	800322e <HAL_RCC_OscConfig+0xd0a>
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fa93 f2a3 	rbit	r2, r3
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800320c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	4b9c      	ldr	r3, [pc, #624]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003232:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003236:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800323a:	6011      	str	r1, [r2, #0]
 800323c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003240:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	fa92 f1a2 	rbit	r1, r2
 800324a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003252:	6011      	str	r1, [r2, #0]
  return result;
 8003254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003258:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	fab2 f282 	clz	r2, r2
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f042 0220 	orr.w	r2, r2, #32
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	f002 021f 	and.w	r2, r2, #31
 800326e:	2101      	movs	r1, #1
 8003270:	fa01 f202 	lsl.w	r2, r1, r2
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d182      	bne.n	8003180 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	430b      	orrs	r3, r1
 800329c:	497f      	ldr	r1, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	fa93 f2a3 	rbit	r2, r3
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032c6:	601a      	str	r2, [r3, #0]
  return result;
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	2301      	movs	r3, #1
 80032e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe f8e4 	bl	80014b4 <HAL_GetTick>
 80032ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	e009      	b.n	8003306 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe f8df 	bl	80014b4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e144      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800330e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003334:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <HAL_RCC_OscConfig+0xe2c>
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	e027      	b.n	80033a0 <HAL_RCC_OscConfig+0xe7c>
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800337e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	fa93 f2a3 	rbit	r2, r3
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	fa92 f1a2 	rbit	r1, r2
 80033bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033c4:	6011      	str	r1, [r2, #0]
  return result;
 80033c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d082      	beq.n	80032f2 <HAL_RCC_OscConfig+0xdce>
 80033ec:	e0cf      	b.n	800358e <HAL_RCC_OscConfig+0x106a>
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003412:	601a      	str	r2, [r3, #0]
  return result;
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800341c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	461a      	mov	r2, r3
 8003430:	2300      	movs	r3, #0
 8003432:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe f83e 	bl	80014b4 <HAL_GetTick>
 8003438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e009      	b.n	8003452 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe f839 	bl	80014b4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e09e      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800345a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003476:	601a      	str	r2, [r3, #0]
  return result;
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003480:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d104      	bne.n	80034a0 <HAL_RCC_OscConfig+0xf7c>
 8003496:	4b01      	ldr	r3, [pc, #4]	; (800349c <HAL_RCC_OscConfig+0xf78>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e029      	b.n	80034f0 <HAL_RCC_OscConfig+0xfcc>
 800349c:	40021000 	.word	0x40021000
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x1078>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003502:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	fa92 f1a2 	rbit	r1, r2
 800350c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003510:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003514:	6011      	str	r1, [r2, #0]
  return result;
 8003516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f042 0220 	orr.w	r2, r2, #32
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f002 021f 	and.w	r2, r2, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d180      	bne.n	800343e <HAL_RCC_OscConfig+0xf1a>
 800353c:	e027      	b.n	800358e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01e      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_OscConfig+0x1078>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800355a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800355e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	429a      	cmp	r2, r3
 8003570:	d10b      	bne.n	800358a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003572:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b09e      	sub	sp, #120	; 0x78
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e162      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b90      	ldr	r3, [pc, #576]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d910      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b8d      	ldr	r3, [pc, #564]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0207 	bic.w	r2, r3, #7
 80035ce:	498b      	ldr	r1, [pc, #556]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e14a      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	497f      	ldr	r1, [pc, #508]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80dc 	beq.w	80037cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d13c      	bne.n	8003696 <HAL_RCC_ClockConfig+0xf6>
 800361c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003620:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <HAL_RCC_ClockConfig+0xa6>
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	e00f      	b.n	8003666 <HAL_RCC_ClockConfig+0xc6>
 8003646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	667b      	str	r3, [r7, #100]	; 0x64
 8003654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003658:	663b      	str	r3, [r7, #96]	; 0x60
 800365a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800366a:	65ba      	str	r2, [r7, #88]	; 0x58
 800366c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f042 0220 	orr.w	r2, r2, #32
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	f002 021f 	and.w	r2, r2, #31
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d17b      	bne.n	800378a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0f3      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d13c      	bne.n	8003718 <HAL_RCC_ClockConfig+0x178>
 800369e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d102      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x128>
 80036c2:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	e00f      	b.n	80036e8 <HAL_RCC_ClockConfig+0x148>
 80036c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
 80036dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f042 0220 	orr.w	r2, r2, #32
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13a      	bne.n	800378a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0b2      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
 8003718:	2302      	movs	r3, #2
 800371a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_RCC_ClockConfig+0x1a0>
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	e00d      	b.n	800375c <HAL_RCC_ClockConfig+0x1bc>
 8003740:	2302      	movs	r3, #2
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	2302      	movs	r3, #2
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2202      	movs	r2, #2
 800375e:	61ba      	str	r2, [r7, #24]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	fa92 f2a2 	rbit	r2, r2
 8003766:	617a      	str	r2, [r7, #20]
  return result;
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f042 0220 	orr.w	r2, r2, #32
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f002 021f 	and.w	r2, r2, #31
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e079      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	491a      	ldr	r1, [pc, #104]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd fe8a 	bl	80014b4 <HAL_GetTick>
 80037a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd fe86 	bl	80014b4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e061      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d214      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	4906      	ldr	r1, [pc, #24]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e040      	b.n	800387e <HAL_RCC_ClockConfig+0x2de>
 80037fc:	40022000 	.word	0x40022000
 8003800:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_ClockConfig+0x2e8>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	491a      	ldr	r1, [pc, #104]	; (8003888 <HAL_RCC_ClockConfig+0x2e8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_RCC_ClockConfig+0x2e8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4912      	ldr	r1, [pc, #72]	; (8003888 <HAL_RCC_ClockConfig+0x2e8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003842:	f000 f829 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003846:	4601      	mov	r1, r0
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_RCC_ClockConfig+0x2e8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003850:	22f0      	movs	r2, #240	; 0xf0
 8003852:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	fa92 f2a2 	rbit	r2, r2
 800385a:	60fa      	str	r2, [r7, #12]
  return result;
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	fab2 f282 	clz	r2, r2
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	40d3      	lsrs	r3, r2
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_RCC_ClockConfig+0x2ec>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	fa21 f303 	lsr.w	r3, r1, r3
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_ClockConfig+0x2f0>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_ClockConfig+0x2f4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fdd8 	bl	800142c <HAL_InitTick>
  
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3778      	adds	r7, #120	; 0x78
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	080053c0 	.word	0x080053c0
 8003890:	20000000 	.word	0x20000000
 8003894:	20000004 	.word	0x20000004

08003898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x30>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x36>
 80038c6:	e026      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e026      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e004      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0c      	ldr	r2, [pc, #48]	; (800393c <HAL_RCC_GetSysClockFreq+0xa4>)
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
      break;
 8003914:	e002      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 8003918:	613b      	str	r3, [r7, #16]
      break;
 800391a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391c:	693b      	ldr	r3, [r7, #16]
}
 800391e:	4618      	mov	r0, r3
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	080053d8 	.word	0x080053d8
 8003938:	080053e8 	.word	0x080053e8
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCC_GetHCLKFreq+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800395e:	f7ff ffef 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003962:	4601      	mov	r1, r0
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800396c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003970:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	fa92 f2a2 	rbit	r2, r2
 8003978:	603a      	str	r2, [r7, #0]
  return result;
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	40d3      	lsrs	r3, r2
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	080053d0 	.word	0x080053d0

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039a2:	f7ff ffcd 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 80039a6:	4601      	mov	r1, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	fa92 f2a2 	rbit	r2, r2
 80039bc:	603a      	str	r2, [r7, #0]
  return result;
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	40d3      	lsrs	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	080053d0 	.word	0x080053d0

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b092      	sub	sp, #72	; 0x48
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80cd 	beq.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a04:	4b86      	ldr	r3, [pc, #536]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10e      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b83      	ldr	r3, [pc, #524]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a82      	ldr	r2, [pc, #520]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	61d3      	str	r3, [r2, #28]
 8003a1c:	4b80      	ldr	r3, [pc, #512]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d118      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3a:	4b7a      	ldr	r3, [pc, #488]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a79      	ldr	r2, [pc, #484]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fd35 	bl	80014b4 <HAL_GetTick>
 8003a4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e008      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fd fd31 	bl	80014b4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0db      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a6c:	4b6c      	ldr	r3, [pc, #432]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d07d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d076      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8a:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003adc:	4a50      	ldr	r2, [pc, #320]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d045      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fce2 	bl	80014b4 <HAL_GetTick>
 8003af0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fd fcde 	bl	80014b4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e086      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	61fb      	str	r3, [r7, #28]
  return result;
 8003b22:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f043 0302 	orr.w	r3, r3, #2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d102      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b38:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	e007      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2202      	movs	r2, #2
 8003b50:	613a      	str	r2, [r7, #16]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	60fa      	str	r2, [r7, #12]
  return result;
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f002 021f 	and.w	r2, r2, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0bd      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4926      	ldr	r1, [pc, #152]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	491a      	ldr	r1, [pc, #104]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	f023 0210 	bic.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	490b      	ldr	r1, [pc, #44]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3748      	adds	r7, #72	; 0x48
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	10908100 	.word	0x10908100

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd fac8 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f95e 	bl	8003f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f825 	bl	8003cc8 <UART_SetConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01b      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f9dd 	bl	8004078 <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8a      	ldr	r3, [pc, #552]	; (8003f1c <UART_SetConfig+0x254>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a78      	ldr	r2, [pc, #480]	; (8003f20 <UART_SetConfig+0x258>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d120      	bne.n	8003d86 <UART_SetConfig+0xbe>
 8003d44:	4b77      	ldr	r3, [pc, #476]	; (8003f24 <UART_SetConfig+0x25c>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d817      	bhi.n	8003d80 <UART_SetConfig+0xb8>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x90>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d75 	.word	0x08003d75
 8003d60:	08003d7b 	.word	0x08003d7b
 8003d64:	08003d6f 	.word	0x08003d6f
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e01d      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e01a      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d74:	2304      	movs	r3, #4
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e017      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d80:	2310      	movs	r3, #16
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e011      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a67      	ldr	r2, [pc, #412]	; (8003f28 <UART_SetConfig+0x260>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d102      	bne.n	8003d96 <UART_SetConfig+0xce>
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0xe2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a64      	ldr	r2, [pc, #400]	; (8003f2c <UART_SetConfig+0x264>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d102      	bne.n	8003da6 <UART_SetConfig+0xde>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e001      	b.n	8003daa <UART_SetConfig+0xe2>
 8003da6:	2310      	movs	r3, #16
 8003da8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db2:	d15a      	bne.n	8003e6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d827      	bhi.n	8003e0a <UART_SetConfig+0x142>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <UART_SetConfig+0xf8>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003e0b 	.word	0x08003e0b
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003e0b 	.word	0x08003e0b
 8003dd8:	08003e0b 	.word	0x08003e0b
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7ff fdb8 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8003de8:	61b8      	str	r0, [r7, #24]
        break;
 8003dea:	e013      	b.n	8003e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7ff fdd6 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8003df0:	61b8      	str	r0, [r7, #24]
        break;
 8003df2:	e00f      	b.n	8003e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <UART_SetConfig+0x268>)
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e00c      	b.n	8003e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7ff fd4d 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003dfe:	61b8      	str	r0, [r7, #24]
        break;
 8003e00:	e008      	b.n	8003e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	61bb      	str	r3, [r7, #24]
        break;
 8003e08:	e004      	b.n	8003e14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77bb      	strb	r3, [r7, #30]
        break;
 8003e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d074      	beq.n	8003f04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	005a      	lsls	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d916      	bls.n	8003e64 <UART_SetConfig+0x19c>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d212      	bcs.n	8003e64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f023 030f 	bic.w	r3, r3, #15
 8003e46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	89fa      	ldrh	r2, [r7, #14]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e04f      	b.n	8003f04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	77bb      	strb	r3, [r7, #30]
 8003e68:	e04c      	b.n	8003f04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d828      	bhi.n	8003ec2 <UART_SetConfig+0x1fa>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x1b0>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7ff fd5c 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61b8      	str	r0, [r7, #24]
        break;
 8003ea2:	e013      	b.n	8003ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7ff fd7a 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8003ea8:	61b8      	str	r0, [r7, #24]
        break;
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <UART_SetConfig+0x268>)
 8003eae:	61bb      	str	r3, [r7, #24]
        break;
 8003eb0:	e00c      	b.n	8003ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7ff fcf1 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003eb6:	61b8      	str	r0, [r7, #24]
        break;
 8003eb8:	e008      	b.n	8003ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ebe:	61bb      	str	r3, [r7, #24]
        break;
 8003ec0:	e004      	b.n	8003ecc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eca:	bf00      	nop
    }

    if (pclk != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085a      	lsrs	r2, r3, #1
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d909      	bls.n	8003f00 <UART_SetConfig+0x238>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d205      	bcs.n	8003f00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	e001      	b.n	8003f04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	efff69f3 	.word	0xefff69f3
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40004400 	.word	0x40004400
 8003f2c:	40004800 	.word	0x40004800
 8003f30:	007a1200 	.word	0x007a1200

08003f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01a      	beq.n	800404a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004032:	d10a      	bne.n	800404a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b098      	sub	sp, #96	; 0x60
 800407c:	af02      	add	r7, sp, #8
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004088:	f7fd fa14 	bl	80014b4 <HAL_GetTick>
 800408c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d12e      	bne.n	80040fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800409c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a4:	2200      	movs	r2, #0
 80040a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f88c 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d021      	beq.n	80040fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ca:	653b      	str	r3, [r7, #80]	; 0x50
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e062      	b.n	80041c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d149      	bne.n	800419c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f856 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03c      	beq.n	800419c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	623b      	str	r3, [r7, #32]
   return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
 8004142:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e6      	bne.n	8004122 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60fb      	str	r3, [r7, #12]
   return(result);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004174:	61fa      	str	r2, [r7, #28]
 8004176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	617b      	str	r3, [r7, #20]
   return(result);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e011      	b.n	80041c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3758      	adds	r7, #88	; 0x58
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	e04f      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d04b      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fd f967 	bl	80014b4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e04e      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d037      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d034      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d031      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d110      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2208      	movs	r2, #8
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f838 	bl	80042a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2208      	movs	r2, #8
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e029      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004254:	d111      	bne.n	800427a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800425e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f81e 	bl	80042a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00f      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0a0      	beq.n	80041da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b095      	sub	sp, #84	; 0x54
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e6      	bne.n	80042aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	2b01      	cmp	r3, #1
 8004316:	d118      	bne.n	800434a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	60bb      	str	r3, [r7, #8]
   return(result);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	613b      	str	r3, [r7, #16]
   return(result);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e6      	bne.n	8004318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800435e:	bf00      	nop
 8004360:	3754      	adds	r7, #84	; 0x54
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <calloc>:
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <calloc+0xc>)
 800436e:	460a      	mov	r2, r1
 8004370:	4601      	mov	r1, r0
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	f000 b834 	b.w	80043e0 <_calloc_r>
 8004378:	2000000c 	.word	0x2000000c

0800437c <__errno>:
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <__errno+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4d0d      	ldr	r5, [pc, #52]	; (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2600      	movs	r6, #0
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4d0b      	ldr	r5, [pc, #44]	; (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	; (80043cc <__libc_init_array+0x44>)
 800439c:	f001 f802 	bl	80053a4 <_init>
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2600      	movs	r6, #0
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	08005428 	.word	0x08005428
 80043c4:	08005428 	.word	0x08005428
 80043c8:	08005428 	.word	0x08005428
 80043cc:	0800542c 	.word	0x0800542c

080043d0 <memset>:
 80043d0:	4402      	add	r2, r0
 80043d2:	4603      	mov	r3, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <_calloc_r>:
 80043e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043e2:	fba1 2402 	umull	r2, r4, r1, r2
 80043e6:	b94c      	cbnz	r4, 80043fc <_calloc_r+0x1c>
 80043e8:	4611      	mov	r1, r2
 80043ea:	9201      	str	r2, [sp, #4]
 80043ec:	f000 f82e 	bl	800444c <_malloc_r>
 80043f0:	9a01      	ldr	r2, [sp, #4]
 80043f2:	4605      	mov	r5, r0
 80043f4:	b930      	cbnz	r0, 8004404 <_calloc_r+0x24>
 80043f6:	4628      	mov	r0, r5
 80043f8:	b003      	add	sp, #12
 80043fa:	bd30      	pop	{r4, r5, pc}
 80043fc:	220c      	movs	r2, #12
 80043fe:	6002      	str	r2, [r0, #0]
 8004400:	2500      	movs	r5, #0
 8004402:	e7f8      	b.n	80043f6 <_calloc_r+0x16>
 8004404:	4621      	mov	r1, r4
 8004406:	f7ff ffe3 	bl	80043d0 <memset>
 800440a:	e7f4      	b.n	80043f6 <_calloc_r+0x16>

0800440c <sbrk_aligned>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4e0e      	ldr	r6, [pc, #56]	; (8004448 <sbrk_aligned+0x3c>)
 8004410:	460c      	mov	r4, r1
 8004412:	6831      	ldr	r1, [r6, #0]
 8004414:	4605      	mov	r5, r0
 8004416:	b911      	cbnz	r1, 800441e <sbrk_aligned+0x12>
 8004418:	f000 f88c 	bl	8004534 <_sbrk_r>
 800441c:	6030      	str	r0, [r6, #0]
 800441e:	4621      	mov	r1, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f000 f887 	bl	8004534 <_sbrk_r>
 8004426:	1c43      	adds	r3, r0, #1
 8004428:	d00a      	beq.n	8004440 <sbrk_aligned+0x34>
 800442a:	1cc4      	adds	r4, r0, #3
 800442c:	f024 0403 	bic.w	r4, r4, #3
 8004430:	42a0      	cmp	r0, r4
 8004432:	d007      	beq.n	8004444 <sbrk_aligned+0x38>
 8004434:	1a21      	subs	r1, r4, r0
 8004436:	4628      	mov	r0, r5
 8004438:	f000 f87c 	bl	8004534 <_sbrk_r>
 800443c:	3001      	adds	r0, #1
 800443e:	d101      	bne.n	8004444 <sbrk_aligned+0x38>
 8004440:	f04f 34ff 	mov.w	r4, #4294967295
 8004444:	4620      	mov	r0, r4
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	20000180 	.word	0x20000180

0800444c <_malloc_r>:
 800444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004450:	1ccd      	adds	r5, r1, #3
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	2d00      	cmp	r5, #0
 8004460:	4607      	mov	r7, r0
 8004462:	db01      	blt.n	8004468 <_malloc_r+0x1c>
 8004464:	42a9      	cmp	r1, r5
 8004466:	d905      	bls.n	8004474 <_malloc_r+0x28>
 8004468:	230c      	movs	r3, #12
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	2600      	movs	r6, #0
 800446e:	4630      	mov	r0, r6
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004474:	4e2e      	ldr	r6, [pc, #184]	; (8004530 <_malloc_r+0xe4>)
 8004476:	f000 f86d 	bl	8004554 <__malloc_lock>
 800447a:	6833      	ldr	r3, [r6, #0]
 800447c:	461c      	mov	r4, r3
 800447e:	bb34      	cbnz	r4, 80044ce <_malloc_r+0x82>
 8004480:	4629      	mov	r1, r5
 8004482:	4638      	mov	r0, r7
 8004484:	f7ff ffc2 	bl	800440c <sbrk_aligned>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	4604      	mov	r4, r0
 800448c:	d14d      	bne.n	800452a <_malloc_r+0xde>
 800448e:	6834      	ldr	r4, [r6, #0]
 8004490:	4626      	mov	r6, r4
 8004492:	2e00      	cmp	r6, #0
 8004494:	d140      	bne.n	8004518 <_malloc_r+0xcc>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	4631      	mov	r1, r6
 800449a:	4638      	mov	r0, r7
 800449c:	eb04 0803 	add.w	r8, r4, r3
 80044a0:	f000 f848 	bl	8004534 <_sbrk_r>
 80044a4:	4580      	cmp	r8, r0
 80044a6:	d13a      	bne.n	800451e <_malloc_r+0xd2>
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	3503      	adds	r5, #3
 80044ac:	1a6d      	subs	r5, r5, r1
 80044ae:	f025 0503 	bic.w	r5, r5, #3
 80044b2:	3508      	adds	r5, #8
 80044b4:	2d0c      	cmp	r5, #12
 80044b6:	bf38      	it	cc
 80044b8:	250c      	movcc	r5, #12
 80044ba:	4629      	mov	r1, r5
 80044bc:	4638      	mov	r0, r7
 80044be:	f7ff ffa5 	bl	800440c <sbrk_aligned>
 80044c2:	3001      	adds	r0, #1
 80044c4:	d02b      	beq.n	800451e <_malloc_r+0xd2>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	442b      	add	r3, r5
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	e00e      	b.n	80044ec <_malloc_r+0xa0>
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	1b52      	subs	r2, r2, r5
 80044d2:	d41e      	bmi.n	8004512 <_malloc_r+0xc6>
 80044d4:	2a0b      	cmp	r2, #11
 80044d6:	d916      	bls.n	8004506 <_malloc_r+0xba>
 80044d8:	1961      	adds	r1, r4, r5
 80044da:	42a3      	cmp	r3, r4
 80044dc:	6025      	str	r5, [r4, #0]
 80044de:	bf18      	it	ne
 80044e0:	6059      	strne	r1, [r3, #4]
 80044e2:	6863      	ldr	r3, [r4, #4]
 80044e4:	bf08      	it	eq
 80044e6:	6031      	streq	r1, [r6, #0]
 80044e8:	5162      	str	r2, [r4, r5]
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	4638      	mov	r0, r7
 80044ee:	f104 060b 	add.w	r6, r4, #11
 80044f2:	f000 f835 	bl	8004560 <__malloc_unlock>
 80044f6:	f026 0607 	bic.w	r6, r6, #7
 80044fa:	1d23      	adds	r3, r4, #4
 80044fc:	1af2      	subs	r2, r6, r3
 80044fe:	d0b6      	beq.n	800446e <_malloc_r+0x22>
 8004500:	1b9b      	subs	r3, r3, r6
 8004502:	50a3      	str	r3, [r4, r2]
 8004504:	e7b3      	b.n	800446e <_malloc_r+0x22>
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	42a3      	cmp	r3, r4
 800450a:	bf0c      	ite	eq
 800450c:	6032      	streq	r2, [r6, #0]
 800450e:	605a      	strne	r2, [r3, #4]
 8004510:	e7ec      	b.n	80044ec <_malloc_r+0xa0>
 8004512:	4623      	mov	r3, r4
 8004514:	6864      	ldr	r4, [r4, #4]
 8004516:	e7b2      	b.n	800447e <_malloc_r+0x32>
 8004518:	4634      	mov	r4, r6
 800451a:	6876      	ldr	r6, [r6, #4]
 800451c:	e7b9      	b.n	8004492 <_malloc_r+0x46>
 800451e:	230c      	movs	r3, #12
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4638      	mov	r0, r7
 8004524:	f000 f81c 	bl	8004560 <__malloc_unlock>
 8004528:	e7a1      	b.n	800446e <_malloc_r+0x22>
 800452a:	6025      	str	r5, [r4, #0]
 800452c:	e7de      	b.n	80044ec <_malloc_r+0xa0>
 800452e:	bf00      	nop
 8004530:	2000017c 	.word	0x2000017c

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d06      	ldr	r5, [pc, #24]	; (8004550 <_sbrk_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc febe 	bl	80012c0 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20000184 	.word	0x20000184

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f000 b809 	b.w	800456c <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000188 	.word	0x20000188

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f000 b804 	b.w	800456e <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000188 	.word	0x20000188

0800456c <__retarget_lock_acquire_recursive>:
 800456c:	4770      	bx	lr

0800456e <__retarget_lock_release_recursive>:
 800456e:	4770      	bx	lr

08004570 <pow>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	ed2d 8b02 	vpush	{d8}
 8004576:	eeb0 8a40 	vmov.f32	s16, s0
 800457a:	eef0 8a60 	vmov.f32	s17, s1
 800457e:	ec55 4b11 	vmov	r4, r5, d1
 8004582:	f000 f865 	bl	8004650 <__ieee754_pow>
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	ec57 6b10 	vmov	r6, r7, d0
 8004592:	f7fc fa6f 	bl	8000a74 <__aeabi_dcmpun>
 8004596:	2800      	cmp	r0, #0
 8004598:	d13b      	bne.n	8004612 <pow+0xa2>
 800459a:	ec51 0b18 	vmov	r0, r1, d8
 800459e:	2200      	movs	r2, #0
 80045a0:	2300      	movs	r3, #0
 80045a2:	f7fc fa35 	bl	8000a10 <__aeabi_dcmpeq>
 80045a6:	b1b8      	cbz	r0, 80045d8 <pow+0x68>
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	4620      	mov	r0, r4
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fc fa2e 	bl	8000a10 <__aeabi_dcmpeq>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d146      	bne.n	8004646 <pow+0xd6>
 80045b8:	ec45 4b10 	vmov	d0, r4, r5
 80045bc:	f000 fe61 	bl	8005282 <finite>
 80045c0:	b338      	cbz	r0, 8004612 <pow+0xa2>
 80045c2:	2200      	movs	r2, #0
 80045c4:	2300      	movs	r3, #0
 80045c6:	4620      	mov	r0, r4
 80045c8:	4629      	mov	r1, r5
 80045ca:	f7fc fa2b 	bl	8000a24 <__aeabi_dcmplt>
 80045ce:	b300      	cbz	r0, 8004612 <pow+0xa2>
 80045d0:	f7ff fed4 	bl	800437c <__errno>
 80045d4:	2322      	movs	r3, #34	; 0x22
 80045d6:	e01b      	b.n	8004610 <pow+0xa0>
 80045d8:	ec47 6b10 	vmov	d0, r6, r7
 80045dc:	f000 fe51 	bl	8005282 <finite>
 80045e0:	b9e0      	cbnz	r0, 800461c <pow+0xac>
 80045e2:	eeb0 0a48 	vmov.f32	s0, s16
 80045e6:	eef0 0a68 	vmov.f32	s1, s17
 80045ea:	f000 fe4a 	bl	8005282 <finite>
 80045ee:	b1a8      	cbz	r0, 800461c <pow+0xac>
 80045f0:	ec45 4b10 	vmov	d0, r4, r5
 80045f4:	f000 fe45 	bl	8005282 <finite>
 80045f8:	b180      	cbz	r0, 800461c <pow+0xac>
 80045fa:	4632      	mov	r2, r6
 80045fc:	463b      	mov	r3, r7
 80045fe:	4630      	mov	r0, r6
 8004600:	4639      	mov	r1, r7
 8004602:	f7fc fa37 	bl	8000a74 <__aeabi_dcmpun>
 8004606:	2800      	cmp	r0, #0
 8004608:	d0e2      	beq.n	80045d0 <pow+0x60>
 800460a:	f7ff feb7 	bl	800437c <__errno>
 800460e:	2321      	movs	r3, #33	; 0x21
 8004610:	6003      	str	r3, [r0, #0]
 8004612:	ecbd 8b02 	vpop	{d8}
 8004616:	ec47 6b10 	vmov	d0, r6, r7
 800461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fc f9f4 	bl	8000a10 <__aeabi_dcmpeq>
 8004628:	2800      	cmp	r0, #0
 800462a:	d0f2      	beq.n	8004612 <pow+0xa2>
 800462c:	eeb0 0a48 	vmov.f32	s0, s16
 8004630:	eef0 0a68 	vmov.f32	s1, s17
 8004634:	f000 fe25 	bl	8005282 <finite>
 8004638:	2800      	cmp	r0, #0
 800463a:	d0ea      	beq.n	8004612 <pow+0xa2>
 800463c:	ec45 4b10 	vmov	d0, r4, r5
 8004640:	f000 fe1f 	bl	8005282 <finite>
 8004644:	e7c3      	b.n	80045ce <pow+0x5e>
 8004646:	4f01      	ldr	r7, [pc, #4]	; (800464c <pow+0xdc>)
 8004648:	2600      	movs	r6, #0
 800464a:	e7e2      	b.n	8004612 <pow+0xa2>
 800464c:	3ff00000 	.word	0x3ff00000

08004650 <__ieee754_pow>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	ed2d 8b06 	vpush	{d8-d10}
 8004658:	b089      	sub	sp, #36	; 0x24
 800465a:	ed8d 1b00 	vstr	d1, [sp]
 800465e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004662:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004666:	ea58 0102 	orrs.w	r1, r8, r2
 800466a:	ec57 6b10 	vmov	r6, r7, d0
 800466e:	d115      	bne.n	800469c <__ieee754_pow+0x4c>
 8004670:	19b3      	adds	r3, r6, r6
 8004672:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004676:	4152      	adcs	r2, r2
 8004678:	4299      	cmp	r1, r3
 800467a:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <__ieee754_pow+0x250>)
 800467c:	4193      	sbcs	r3, r2
 800467e:	f080 84d2 	bcs.w	8005026 <__ieee754_pow+0x9d6>
 8004682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	f7fb fda3 	bl	80001d4 <__adddf3>
 800468e:	ec41 0b10 	vmov	d0, r0, r1
 8004692:	b009      	add	sp, #36	; 0x24
 8004694:	ecbd 8b06 	vpop	{d8-d10}
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <__ieee754_pow+0x254>)
 800469e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80046a2:	429c      	cmp	r4, r3
 80046a4:	ee10 aa10 	vmov	sl, s0
 80046a8:	463d      	mov	r5, r7
 80046aa:	dc06      	bgt.n	80046ba <__ieee754_pow+0x6a>
 80046ac:	d101      	bne.n	80046b2 <__ieee754_pow+0x62>
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	d1e7      	bne.n	8004682 <__ieee754_pow+0x32>
 80046b2:	4598      	cmp	r8, r3
 80046b4:	dc01      	bgt.n	80046ba <__ieee754_pow+0x6a>
 80046b6:	d10f      	bne.n	80046d8 <__ieee754_pow+0x88>
 80046b8:	b172      	cbz	r2, 80046d8 <__ieee754_pow+0x88>
 80046ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80046be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80046c2:	ea55 050a 	orrs.w	r5, r5, sl
 80046c6:	d1dc      	bne.n	8004682 <__ieee754_pow+0x32>
 80046c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80046cc:	18db      	adds	r3, r3, r3
 80046ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80046d2:	4152      	adcs	r2, r2
 80046d4:	429d      	cmp	r5, r3
 80046d6:	e7d0      	b.n	800467a <__ieee754_pow+0x2a>
 80046d8:	2d00      	cmp	r5, #0
 80046da:	da3b      	bge.n	8004754 <__ieee754_pow+0x104>
 80046dc:	4b72      	ldr	r3, [pc, #456]	; (80048a8 <__ieee754_pow+0x258>)
 80046de:	4598      	cmp	r8, r3
 80046e0:	dc51      	bgt.n	8004786 <__ieee754_pow+0x136>
 80046e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80046e6:	4598      	cmp	r8, r3
 80046e8:	f340 84ac 	ble.w	8005044 <__ieee754_pow+0x9f4>
 80046ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046f4:	2b14      	cmp	r3, #20
 80046f6:	dd0f      	ble.n	8004718 <__ieee754_pow+0xc8>
 80046f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80046fc:	fa22 f103 	lsr.w	r1, r2, r3
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	4293      	cmp	r3, r2
 8004706:	f040 849d 	bne.w	8005044 <__ieee754_pow+0x9f4>
 800470a:	f001 0101 	and.w	r1, r1, #1
 800470e:	f1c1 0302 	rsb	r3, r1, #2
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	b182      	cbz	r2, 8004738 <__ieee754_pow+0xe8>
 8004716:	e05f      	b.n	80047d8 <__ieee754_pow+0x188>
 8004718:	2a00      	cmp	r2, #0
 800471a:	d15b      	bne.n	80047d4 <__ieee754_pow+0x184>
 800471c:	f1c3 0314 	rsb	r3, r3, #20
 8004720:	fa48 f103 	asr.w	r1, r8, r3
 8004724:	fa01 f303 	lsl.w	r3, r1, r3
 8004728:	4543      	cmp	r3, r8
 800472a:	f040 8488 	bne.w	800503e <__ieee754_pow+0x9ee>
 800472e:	f001 0101 	and.w	r1, r1, #1
 8004732:	f1c1 0302 	rsb	r3, r1, #2
 8004736:	9304      	str	r3, [sp, #16]
 8004738:	4b5c      	ldr	r3, [pc, #368]	; (80048ac <__ieee754_pow+0x25c>)
 800473a:	4598      	cmp	r8, r3
 800473c:	d132      	bne.n	80047a4 <__ieee754_pow+0x154>
 800473e:	f1b9 0f00 	cmp.w	r9, #0
 8004742:	f280 8478 	bge.w	8005036 <__ieee754_pow+0x9e6>
 8004746:	4959      	ldr	r1, [pc, #356]	; (80048ac <__ieee754_pow+0x25c>)
 8004748:	4632      	mov	r2, r6
 800474a:	463b      	mov	r3, r7
 800474c:	2000      	movs	r0, #0
 800474e:	f7fc f821 	bl	8000794 <__aeabi_ddiv>
 8004752:	e79c      	b.n	800468e <__ieee754_pow+0x3e>
 8004754:	2300      	movs	r3, #0
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	2a00      	cmp	r2, #0
 800475a:	d13d      	bne.n	80047d8 <__ieee754_pow+0x188>
 800475c:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <__ieee754_pow+0x254>)
 800475e:	4598      	cmp	r8, r3
 8004760:	d1ea      	bne.n	8004738 <__ieee754_pow+0xe8>
 8004762:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800476a:	ea53 030a 	orrs.w	r3, r3, sl
 800476e:	f000 845a 	beq.w	8005026 <__ieee754_pow+0x9d6>
 8004772:	4b4f      	ldr	r3, [pc, #316]	; (80048b0 <__ieee754_pow+0x260>)
 8004774:	429c      	cmp	r4, r3
 8004776:	dd08      	ble.n	800478a <__ieee754_pow+0x13a>
 8004778:	f1b9 0f00 	cmp.w	r9, #0
 800477c:	f2c0 8457 	blt.w	800502e <__ieee754_pow+0x9de>
 8004780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004784:	e783      	b.n	800468e <__ieee754_pow+0x3e>
 8004786:	2302      	movs	r3, #2
 8004788:	e7e5      	b.n	8004756 <__ieee754_pow+0x106>
 800478a:	f1b9 0f00 	cmp.w	r9, #0
 800478e:	f04f 0000 	mov.w	r0, #0
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	f6bf af7a 	bge.w	800468e <__ieee754_pow+0x3e>
 800479a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800479e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047a2:	e774      	b.n	800468e <__ieee754_pow+0x3e>
 80047a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80047a8:	d106      	bne.n	80047b8 <__ieee754_pow+0x168>
 80047aa:	4632      	mov	r2, r6
 80047ac:	463b      	mov	r3, r7
 80047ae:	4630      	mov	r0, r6
 80047b0:	4639      	mov	r1, r7
 80047b2:	f7fb fec5 	bl	8000540 <__aeabi_dmul>
 80047b6:	e76a      	b.n	800468e <__ieee754_pow+0x3e>
 80047b8:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <__ieee754_pow+0x264>)
 80047ba:	4599      	cmp	r9, r3
 80047bc:	d10c      	bne.n	80047d8 <__ieee754_pow+0x188>
 80047be:	2d00      	cmp	r5, #0
 80047c0:	db0a      	blt.n	80047d8 <__ieee754_pow+0x188>
 80047c2:	ec47 6b10 	vmov	d0, r6, r7
 80047c6:	b009      	add	sp, #36	; 0x24
 80047c8:	ecbd 8b06 	vpop	{d8-d10}
 80047cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	f000 bc6c 	b.w	80050ac <__ieee754_sqrt>
 80047d4:	2300      	movs	r3, #0
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	ec47 6b10 	vmov	d0, r6, r7
 80047dc:	f000 fd48 	bl	8005270 <fabs>
 80047e0:	ec51 0b10 	vmov	r0, r1, d0
 80047e4:	f1ba 0f00 	cmp.w	sl, #0
 80047e8:	d129      	bne.n	800483e <__ieee754_pow+0x1ee>
 80047ea:	b124      	cbz	r4, 80047f6 <__ieee754_pow+0x1a6>
 80047ec:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <__ieee754_pow+0x25c>)
 80047ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d123      	bne.n	800483e <__ieee754_pow+0x1ee>
 80047f6:	f1b9 0f00 	cmp.w	r9, #0
 80047fa:	da05      	bge.n	8004808 <__ieee754_pow+0x1b8>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	2000      	movs	r0, #0
 8004802:	492a      	ldr	r1, [pc, #168]	; (80048ac <__ieee754_pow+0x25c>)
 8004804:	f7fb ffc6 	bl	8000794 <__aeabi_ddiv>
 8004808:	2d00      	cmp	r5, #0
 800480a:	f6bf af40 	bge.w	800468e <__ieee754_pow+0x3e>
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004818:	4323      	orrs	r3, r4
 800481a:	d108      	bne.n	800482e <__ieee754_pow+0x1de>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fb fcd4 	bl	80001d0 <__aeabi_dsub>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	e78f      	b.n	800474e <__ieee754_pow+0xfe>
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	2b01      	cmp	r3, #1
 8004832:	f47f af2c 	bne.w	800468e <__ieee754_pow+0x3e>
 8004836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800483a:	4619      	mov	r1, r3
 800483c:	e727      	b.n	800468e <__ieee754_pow+0x3e>
 800483e:	0feb      	lsrs	r3, r5, #31
 8004840:	3b01      	subs	r3, #1
 8004842:	9306      	str	r3, [sp, #24]
 8004844:	9a06      	ldr	r2, [sp, #24]
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	d102      	bne.n	8004852 <__ieee754_pow+0x202>
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	e7e6      	b.n	8004820 <__ieee754_pow+0x1d0>
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <__ieee754_pow+0x268>)
 8004854:	4598      	cmp	r8, r3
 8004856:	f340 80fb 	ble.w	8004a50 <__ieee754_pow+0x400>
 800485a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800485e:	4598      	cmp	r8, r3
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <__ieee754_pow+0x260>)
 8004862:	dd0c      	ble.n	800487e <__ieee754_pow+0x22e>
 8004864:	429c      	cmp	r4, r3
 8004866:	dc0f      	bgt.n	8004888 <__ieee754_pow+0x238>
 8004868:	f1b9 0f00 	cmp.w	r9, #0
 800486c:	da0f      	bge.n	800488e <__ieee754_pow+0x23e>
 800486e:	2000      	movs	r0, #0
 8004870:	b009      	add	sp, #36	; 0x24
 8004872:	ecbd 8b06 	vpop	{d8-d10}
 8004876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	f000 bcf0 	b.w	800525e <__math_oflow>
 800487e:	429c      	cmp	r4, r3
 8004880:	dbf2      	blt.n	8004868 <__ieee754_pow+0x218>
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <__ieee754_pow+0x25c>)
 8004884:	429c      	cmp	r4, r3
 8004886:	dd19      	ble.n	80048bc <__ieee754_pow+0x26c>
 8004888:	f1b9 0f00 	cmp.w	r9, #0
 800488c:	dcef      	bgt.n	800486e <__ieee754_pow+0x21e>
 800488e:	2000      	movs	r0, #0
 8004890:	b009      	add	sp, #36	; 0x24
 8004892:	ecbd 8b06 	vpop	{d8-d10}
 8004896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f000 bcd7 	b.w	800524c <__math_uflow>
 800489e:	bf00      	nop
 80048a0:	fff00000 	.word	0xfff00000
 80048a4:	7ff00000 	.word	0x7ff00000
 80048a8:	433fffff 	.word	0x433fffff
 80048ac:	3ff00000 	.word	0x3ff00000
 80048b0:	3fefffff 	.word	0x3fefffff
 80048b4:	3fe00000 	.word	0x3fe00000
 80048b8:	41e00000 	.word	0x41e00000
 80048bc:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <__ieee754_pow+0x3f0>)
 80048be:	2200      	movs	r2, #0
 80048c0:	f7fb fc86 	bl	80001d0 <__aeabi_dsub>
 80048c4:	a354      	add	r3, pc, #336	; (adr r3, 8004a18 <__ieee754_pow+0x3c8>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	4604      	mov	r4, r0
 80048cc:	460d      	mov	r5, r1
 80048ce:	f7fb fe37 	bl	8000540 <__aeabi_dmul>
 80048d2:	a353      	add	r3, pc, #332	; (adr r3, 8004a20 <__ieee754_pow+0x3d0>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	4606      	mov	r6, r0
 80048da:	460f      	mov	r7, r1
 80048dc:	4620      	mov	r0, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	f7fb fe2e 	bl	8000540 <__aeabi_dmul>
 80048e4:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <__ieee754_pow+0x3f4>)
 80048e6:	4682      	mov	sl, r0
 80048e8:	468b      	mov	fp, r1
 80048ea:	2200      	movs	r2, #0
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fb fe26 	bl	8000540 <__aeabi_dmul>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	a14b      	add	r1, pc, #300	; (adr r1, 8004a28 <__ieee754_pow+0x3d8>)
 80048fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048fe:	f7fb fc67 	bl	80001d0 <__aeabi_dsub>
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f7fb fe1b 	bl	8000540 <__aeabi_dmul>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	2000      	movs	r0, #0
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <__ieee754_pow+0x3f8>)
 8004912:	f7fb fc5d 	bl	80001d0 <__aeabi_dsub>
 8004916:	4622      	mov	r2, r4
 8004918:	4680      	mov	r8, r0
 800491a:	4689      	mov	r9, r1
 800491c:	462b      	mov	r3, r5
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fe0d 	bl	8000540 <__aeabi_dmul>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fb fe07 	bl	8000540 <__aeabi_dmul>
 8004932:	a33f      	add	r3, pc, #252	; (adr r3, 8004a30 <__ieee754_pow+0x3e0>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe02 	bl	8000540 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4650      	mov	r0, sl
 8004942:	4659      	mov	r1, fp
 8004944:	f7fb fc44 	bl	80001d0 <__aeabi_dsub>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4680      	mov	r8, r0
 800494e:	4689      	mov	r9, r1
 8004950:	4630      	mov	r0, r6
 8004952:	4639      	mov	r1, r7
 8004954:	f7fb fc3e 	bl	80001d4 <__adddf3>
 8004958:	2000      	movs	r0, #0
 800495a:	4632      	mov	r2, r6
 800495c:	463b      	mov	r3, r7
 800495e:	4604      	mov	r4, r0
 8004960:	460d      	mov	r5, r1
 8004962:	f7fb fc35 	bl	80001d0 <__aeabi_dsub>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fc2f 	bl	80001d0 <__aeabi_dsub>
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	9a06      	ldr	r2, [sp, #24]
 8004976:	3b01      	subs	r3, #1
 8004978:	4313      	orrs	r3, r2
 800497a:	4682      	mov	sl, r0
 800497c:	468b      	mov	fp, r1
 800497e:	f040 81e7 	bne.w	8004d50 <__ieee754_pow+0x700>
 8004982:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004a38 <__ieee754_pow+0x3e8>
 8004986:	eeb0 8a47 	vmov.f32	s16, s14
 800498a:	eef0 8a67 	vmov.f32	s17, s15
 800498e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004992:	2600      	movs	r6, #0
 8004994:	4632      	mov	r2, r6
 8004996:	463b      	mov	r3, r7
 8004998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800499c:	f7fb fc18 	bl	80001d0 <__aeabi_dsub>
 80049a0:	4622      	mov	r2, r4
 80049a2:	462b      	mov	r3, r5
 80049a4:	f7fb fdcc 	bl	8000540 <__aeabi_dmul>
 80049a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049ac:	4680      	mov	r8, r0
 80049ae:	4689      	mov	r9, r1
 80049b0:	4650      	mov	r0, sl
 80049b2:	4659      	mov	r1, fp
 80049b4:	f7fb fdc4 	bl	8000540 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4640      	mov	r0, r8
 80049be:	4649      	mov	r1, r9
 80049c0:	f7fb fc08 	bl	80001d4 <__adddf3>
 80049c4:	4632      	mov	r2, r6
 80049c6:	463b      	mov	r3, r7
 80049c8:	4680      	mov	r8, r0
 80049ca:	4689      	mov	r9, r1
 80049cc:	4620      	mov	r0, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	f7fb fdb6 	bl	8000540 <__aeabi_dmul>
 80049d4:	460b      	mov	r3, r1
 80049d6:	4604      	mov	r4, r0
 80049d8:	460d      	mov	r5, r1
 80049da:	4602      	mov	r2, r0
 80049dc:	4649      	mov	r1, r9
 80049de:	4640      	mov	r0, r8
 80049e0:	f7fb fbf8 	bl	80001d4 <__adddf3>
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <__ieee754_pow+0x3fc>)
 80049e6:	4299      	cmp	r1, r3
 80049e8:	ec45 4b19 	vmov	d9, r4, r5
 80049ec:	4606      	mov	r6, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	468b      	mov	fp, r1
 80049f2:	f340 82f1 	ble.w	8004fd8 <__ieee754_pow+0x988>
 80049f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80049fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80049fe:	4303      	orrs	r3, r0
 8004a00:	f000 81e4 	beq.w	8004dcc <__ieee754_pow+0x77c>
 8004a04:	ec51 0b18 	vmov	r0, r1, d8
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f7fc f80a 	bl	8000a24 <__aeabi_dcmplt>
 8004a10:	3800      	subs	r0, #0
 8004a12:	bf18      	it	ne
 8004a14:	2001      	movne	r0, #1
 8004a16:	e72b      	b.n	8004870 <__ieee754_pow+0x220>
 8004a18:	60000000 	.word	0x60000000
 8004a1c:	3ff71547 	.word	0x3ff71547
 8004a20:	f85ddf44 	.word	0xf85ddf44
 8004a24:	3e54ae0b 	.word	0x3e54ae0b
 8004a28:	55555555 	.word	0x55555555
 8004a2c:	3fd55555 	.word	0x3fd55555
 8004a30:	652b82fe 	.word	0x652b82fe
 8004a34:	3ff71547 	.word	0x3ff71547
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	bff00000 	.word	0xbff00000
 8004a40:	3ff00000 	.word	0x3ff00000
 8004a44:	3fd00000 	.word	0x3fd00000
 8004a48:	3fe00000 	.word	0x3fe00000
 8004a4c:	408fffff 	.word	0x408fffff
 8004a50:	4bd5      	ldr	r3, [pc, #852]	; (8004da8 <__ieee754_pow+0x758>)
 8004a52:	402b      	ands	r3, r5
 8004a54:	2200      	movs	r2, #0
 8004a56:	b92b      	cbnz	r3, 8004a64 <__ieee754_pow+0x414>
 8004a58:	4bd4      	ldr	r3, [pc, #848]	; (8004dac <__ieee754_pow+0x75c>)
 8004a5a:	f7fb fd71 	bl	8000540 <__aeabi_dmul>
 8004a5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004a62:	460c      	mov	r4, r1
 8004a64:	1523      	asrs	r3, r4, #20
 8004a66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a6a:	4413      	add	r3, r2
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	4bd0      	ldr	r3, [pc, #832]	; (8004db0 <__ieee754_pow+0x760>)
 8004a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004a74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004a7e:	dd08      	ble.n	8004a92 <__ieee754_pow+0x442>
 8004a80:	4bcc      	ldr	r3, [pc, #816]	; (8004db4 <__ieee754_pow+0x764>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	f340 8162 	ble.w	8004d4c <__ieee754_pow+0x6fc>
 8004a88:	9b05      	ldr	r3, [sp, #20]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004a92:	2400      	movs	r4, #0
 8004a94:	00e3      	lsls	r3, r4, #3
 8004a96:	9307      	str	r3, [sp, #28]
 8004a98:	4bc7      	ldr	r3, [pc, #796]	; (8004db8 <__ieee754_pow+0x768>)
 8004a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a9e:	ed93 7b00 	vldr	d7, [r3]
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	ec53 2b17 	vmov	r2, r3, d7
 8004aa8:	eeb0 9a47 	vmov.f32	s18, s14
 8004aac:	eef0 9a67 	vmov.f32	s19, s15
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	f7fb fb8d 	bl	80001d0 <__aeabi_dsub>
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4606      	mov	r6, r0
 8004aba:	460f      	mov	r7, r1
 8004abc:	462b      	mov	r3, r5
 8004abe:	ec51 0b19 	vmov	r0, r1, d9
 8004ac2:	f7fb fb87 	bl	80001d4 <__adddf3>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	2000      	movs	r0, #0
 8004acc:	49bb      	ldr	r1, [pc, #748]	; (8004dbc <__ieee754_pow+0x76c>)
 8004ace:	f7fb fe61 	bl	8000794 <__aeabi_ddiv>
 8004ad2:	ec41 0b1a 	vmov	d10, r0, r1
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fd2f 	bl	8000540 <__aeabi_dmul>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ae8:	9302      	str	r3, [sp, #8]
 8004aea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004aee:	46ab      	mov	fp, r5
 8004af0:	106d      	asrs	r5, r5, #1
 8004af2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004af6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004afa:	ec41 0b18 	vmov	d8, r0, r1
 8004afe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004b02:	2200      	movs	r2, #0
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	f7fb fd18 	bl	8000540 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	f7fb fb5a 	bl	80001d0 <__aeabi_dsub>
 8004b1c:	ec53 2b19 	vmov	r2, r3, d9
 8004b20:	4606      	mov	r6, r0
 8004b22:	460f      	mov	r7, r1
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fb52 	bl	80001d0 <__aeabi_dsub>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4650      	mov	r0, sl
 8004b32:	4659      	mov	r1, fp
 8004b34:	f7fb fb4c 	bl	80001d0 <__aeabi_dsub>
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	f7fb fd00 	bl	8000540 <__aeabi_dmul>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4630      	mov	r0, r6
 8004b46:	4639      	mov	r1, r7
 8004b48:	f7fb fb42 	bl	80001d0 <__aeabi_dsub>
 8004b4c:	ec53 2b1a 	vmov	r2, r3, d10
 8004b50:	f7fb fcf6 	bl	8000540 <__aeabi_dmul>
 8004b54:	ec53 2b18 	vmov	r2, r3, d8
 8004b58:	ec41 0b19 	vmov	d9, r0, r1
 8004b5c:	ec51 0b18 	vmov	r0, r1, d8
 8004b60:	f7fb fcee 	bl	8000540 <__aeabi_dmul>
 8004b64:	a37c      	add	r3, pc, #496	; (adr r3, 8004d58 <__ieee754_pow+0x708>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	f7fb fce7 	bl	8000540 <__aeabi_dmul>
 8004b72:	a37b      	add	r3, pc, #492	; (adr r3, 8004d60 <__ieee754_pow+0x710>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb2c 	bl	80001d4 <__adddf3>
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	f7fb fcde 	bl	8000540 <__aeabi_dmul>
 8004b84:	a378      	add	r3, pc, #480	; (adr r3, 8004d68 <__ieee754_pow+0x718>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb23 	bl	80001d4 <__adddf3>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	462b      	mov	r3, r5
 8004b92:	f7fb fcd5 	bl	8000540 <__aeabi_dmul>
 8004b96:	a376      	add	r3, pc, #472	; (adr r3, 8004d70 <__ieee754_pow+0x720>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fb1a 	bl	80001d4 <__adddf3>
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	f7fb fccc 	bl	8000540 <__aeabi_dmul>
 8004ba8:	a373      	add	r3, pc, #460	; (adr r3, 8004d78 <__ieee754_pow+0x728>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fb11 	bl	80001d4 <__adddf3>
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f7fb fcc3 	bl	8000540 <__aeabi_dmul>
 8004bba:	a371      	add	r3, pc, #452	; (adr r3, 8004d80 <__ieee754_pow+0x730>)
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f7fb fb08 	bl	80001d4 <__adddf3>
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	462b      	mov	r3, r5
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb fcb6 	bl	8000540 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f7fb fcb0 	bl	8000540 <__aeabi_dmul>
 8004be0:	4642      	mov	r2, r8
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	464b      	mov	r3, r9
 8004be8:	ec51 0b18 	vmov	r0, r1, d8
 8004bec:	f7fb faf2 	bl	80001d4 <__adddf3>
 8004bf0:	ec53 2b19 	vmov	r2, r3, d9
 8004bf4:	f7fb fca4 	bl	8000540 <__aeabi_dmul>
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	f7fb faea 	bl	80001d4 <__adddf3>
 8004c00:	4642      	mov	r2, r8
 8004c02:	4682      	mov	sl, r0
 8004c04:	468b      	mov	fp, r1
 8004c06:	464b      	mov	r3, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb fc98 	bl	8000540 <__aeabi_dmul>
 8004c10:	4b6b      	ldr	r3, [pc, #428]	; (8004dc0 <__ieee754_pow+0x770>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	f7fb fadc 	bl	80001d4 <__adddf3>
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	465b      	mov	r3, fp
 8004c20:	f7fb fad8 	bl	80001d4 <__adddf3>
 8004c24:	2000      	movs	r0, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	f7fb fc85 	bl	8000540 <__aeabi_dmul>
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <__ieee754_pow+0x770>)
 8004c38:	4680      	mov	r8, r0
 8004c3a:	4689      	mov	r9, r1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb fac5 	bl	80001d0 <__aeabi_dsub>
 8004c46:	4632      	mov	r2, r6
 8004c48:	463b      	mov	r3, r7
 8004c4a:	f7fb fac1 	bl	80001d0 <__aeabi_dsub>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4650      	mov	r0, sl
 8004c54:	4659      	mov	r1, fp
 8004c56:	f7fb fabb 	bl	80001d0 <__aeabi_dsub>
 8004c5a:	ec53 2b18 	vmov	r2, r3, d8
 8004c5e:	f7fb fc6f 	bl	8000540 <__aeabi_dmul>
 8004c62:	4622      	mov	r2, r4
 8004c64:	4606      	mov	r6, r0
 8004c66:	460f      	mov	r7, r1
 8004c68:	462b      	mov	r3, r5
 8004c6a:	ec51 0b19 	vmov	r0, r1, d9
 8004c6e:	f7fb fc67 	bl	8000540 <__aeabi_dmul>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4630      	mov	r0, r6
 8004c78:	4639      	mov	r1, r7
 8004c7a:	f7fb faab 	bl	80001d4 <__adddf3>
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460f      	mov	r7, r1
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4640      	mov	r0, r8
 8004c88:	4649      	mov	r1, r9
 8004c8a:	f7fb faa3 	bl	80001d4 <__adddf3>
 8004c8e:	a33e      	add	r3, pc, #248	; (adr r3, 8004d88 <__ieee754_pow+0x738>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	2000      	movs	r0, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	460d      	mov	r5, r1
 8004c9a:	f7fb fc51 	bl	8000540 <__aeabi_dmul>
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	ec41 0b18 	vmov	d8, r0, r1
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb fa91 	bl	80001d0 <__aeabi_dsub>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	f7fb fa8b 	bl	80001d0 <__aeabi_dsub>
 8004cba:	a335      	add	r3, pc, #212	; (adr r3, 8004d90 <__ieee754_pow+0x740>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f7fb fc3e 	bl	8000540 <__aeabi_dmul>
 8004cc4:	a334      	add	r3, pc, #208	; (adr r3, 8004d98 <__ieee754_pow+0x748>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fc35 	bl	8000540 <__aeabi_dmul>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4630      	mov	r0, r6
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fa79 	bl	80001d4 <__adddf3>
 8004ce2:	9a07      	ldr	r2, [sp, #28]
 8004ce4:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <__ieee754_pow+0x774>)
 8004ce6:	4413      	add	r3, r2
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb fa72 	bl	80001d4 <__adddf3>
 8004cf0:	4682      	mov	sl, r0
 8004cf2:	9805      	ldr	r0, [sp, #20]
 8004cf4:	468b      	mov	fp, r1
 8004cf6:	f7fb fbb9 	bl	800046c <__aeabi_i2d>
 8004cfa:	9a07      	ldr	r2, [sp, #28]
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <__ieee754_pow+0x778>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	4652      	mov	r2, sl
 8004d0a:	465b      	mov	r3, fp
 8004d0c:	ec51 0b18 	vmov	r0, r1, d8
 8004d10:	f7fb fa60 	bl	80001d4 <__adddf3>
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	f7fb fa5c 	bl	80001d4 <__adddf3>
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	463b      	mov	r3, r7
 8004d20:	f7fb fa58 	bl	80001d4 <__adddf3>
 8004d24:	2000      	movs	r0, #0
 8004d26:	4632      	mov	r2, r6
 8004d28:	463b      	mov	r3, r7
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	f7fb fa4f 	bl	80001d0 <__aeabi_dsub>
 8004d32:	4642      	mov	r2, r8
 8004d34:	464b      	mov	r3, r9
 8004d36:	f7fb fa4b 	bl	80001d0 <__aeabi_dsub>
 8004d3a:	ec53 2b18 	vmov	r2, r3, d8
 8004d3e:	f7fb fa47 	bl	80001d0 <__aeabi_dsub>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4650      	mov	r0, sl
 8004d48:	4659      	mov	r1, fp
 8004d4a:	e610      	b.n	800496e <__ieee754_pow+0x31e>
 8004d4c:	2401      	movs	r4, #1
 8004d4e:	e6a1      	b.n	8004a94 <__ieee754_pow+0x444>
 8004d50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004da0 <__ieee754_pow+0x750>
 8004d54:	e617      	b.n	8004986 <__ieee754_pow+0x336>
 8004d56:	bf00      	nop
 8004d58:	4a454eef 	.word	0x4a454eef
 8004d5c:	3fca7e28 	.word	0x3fca7e28
 8004d60:	93c9db65 	.word	0x93c9db65
 8004d64:	3fcd864a 	.word	0x3fcd864a
 8004d68:	a91d4101 	.word	0xa91d4101
 8004d6c:	3fd17460 	.word	0x3fd17460
 8004d70:	518f264d 	.word	0x518f264d
 8004d74:	3fd55555 	.word	0x3fd55555
 8004d78:	db6fabff 	.word	0xdb6fabff
 8004d7c:	3fdb6db6 	.word	0x3fdb6db6
 8004d80:	33333303 	.word	0x33333303
 8004d84:	3fe33333 	.word	0x3fe33333
 8004d88:	e0000000 	.word	0xe0000000
 8004d8c:	3feec709 	.word	0x3feec709
 8004d90:	dc3a03fd 	.word	0xdc3a03fd
 8004d94:	3feec709 	.word	0x3feec709
 8004d98:	145b01f5 	.word	0x145b01f5
 8004d9c:	be3e2fe0 	.word	0xbe3e2fe0
 8004da0:	00000000 	.word	0x00000000
 8004da4:	3ff00000 	.word	0x3ff00000
 8004da8:	7ff00000 	.word	0x7ff00000
 8004dac:	43400000 	.word	0x43400000
 8004db0:	0003988e 	.word	0x0003988e
 8004db4:	000bb679 	.word	0x000bb679
 8004db8:	080053f8 	.word	0x080053f8
 8004dbc:	3ff00000 	.word	0x3ff00000
 8004dc0:	40080000 	.word	0x40080000
 8004dc4:	08005418 	.word	0x08005418
 8004dc8:	08005408 	.word	0x08005408
 8004dcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80050a4 <__ieee754_pow+0xa54>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb f9fd 	bl	80001d4 <__adddf3>
 8004dda:	4622      	mov	r2, r4
 8004ddc:	ec41 0b1a 	vmov	d10, r0, r1
 8004de0:	462b      	mov	r3, r5
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb f9f3 	bl	80001d0 <__aeabi_dsub>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	ec51 0b1a 	vmov	r0, r1, d10
 8004df2:	f7fb fe35 	bl	8000a60 <__aeabi_dcmpgt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f47f ae04 	bne.w	8004a04 <__ieee754_pow+0x3b4>
 8004dfc:	4aa4      	ldr	r2, [pc, #656]	; (8005090 <__ieee754_pow+0xa40>)
 8004dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f340 8108 	ble.w	8005018 <__ieee754_pow+0x9c8>
 8004e08:	151b      	asrs	r3, r3, #20
 8004e0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004e0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e12:	fa4a f303 	asr.w	r3, sl, r3
 8004e16:	445b      	add	r3, fp
 8004e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004e1c:	4e9d      	ldr	r6, [pc, #628]	; (8005094 <__ieee754_pow+0xa44>)
 8004e1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004e22:	4116      	asrs	r6, r2
 8004e24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004e28:	2000      	movs	r0, #0
 8004e2a:	ea23 0106 	bic.w	r1, r3, r6
 8004e2e:	f1c2 0214 	rsb	r2, r2, #20
 8004e32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004e36:	fa4a fa02 	asr.w	sl, sl, r2
 8004e3a:	f1bb 0f00 	cmp.w	fp, #0
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	bfb8      	it	lt
 8004e48:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e4c:	f7fb f9c0 	bl	80001d0 <__aeabi_dsub>
 8004e50:	ec41 0b19 	vmov	d9, r0, r1
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	ec51 0b19 	vmov	r0, r1, d9
 8004e5c:	f7fb f9ba 	bl	80001d4 <__adddf3>
 8004e60:	a37b      	add	r3, pc, #492	; (adr r3, 8005050 <__ieee754_pow+0xa00>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	2000      	movs	r0, #0
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	f7fb fb68 	bl	8000540 <__aeabi_dmul>
 8004e70:	ec53 2b19 	vmov	r2, r3, d9
 8004e74:	4606      	mov	r6, r0
 8004e76:	460f      	mov	r7, r1
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb f9a8 	bl	80001d0 <__aeabi_dsub>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb f9a2 	bl	80001d0 <__aeabi_dsub>
 8004e8c:	a372      	add	r3, pc, #456	; (adr r3, 8005058 <__ieee754_pow+0xa08>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb fb55 	bl	8000540 <__aeabi_dmul>
 8004e96:	a372      	add	r3, pc, #456	; (adr r3, 8005060 <__ieee754_pow+0xa10>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	4689      	mov	r9, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fb4c 	bl	8000540 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb f990 	bl	80001d4 <__adddf3>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fb f988 	bl	80001d4 <__adddf3>
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	4680      	mov	r8, r0
 8004eca:	4689      	mov	r9, r1
 8004ecc:	f7fb f980 	bl	80001d0 <__aeabi_dsub>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb f97a 	bl	80001d0 <__aeabi_dsub>
 8004edc:	4642      	mov	r2, r8
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb fb2a 	bl	8000540 <__aeabi_dmul>
 8004eec:	a35e      	add	r3, pc, #376	; (adr r3, 8005068 <__ieee754_pow+0xa18>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	f7fb fb23 	bl	8000540 <__aeabi_dmul>
 8004efa:	a35d      	add	r3, pc, #372	; (adr r3, 8005070 <__ieee754_pow+0xa20>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4622      	mov	r2, r4
 8004f06:	462b      	mov	r3, r5
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	a35a      	add	r3, pc, #360	; (adr r3, 8005078 <__ieee754_pow+0xa28>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f95f 	bl	80001d4 <__adddf3>
 8004f16:	4622      	mov	r2, r4
 8004f18:	462b      	mov	r3, r5
 8004f1a:	f7fb fb11 	bl	8000540 <__aeabi_dmul>
 8004f1e:	a358      	add	r3, pc, #352	; (adr r3, 8005080 <__ieee754_pow+0xa30>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb f954 	bl	80001d0 <__aeabi_dsub>
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	f7fb fb08 	bl	8000540 <__aeabi_dmul>
 8004f30:	a355      	add	r3, pc, #340	; (adr r3, 8005088 <__ieee754_pow+0xa38>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb f94d 	bl	80001d4 <__adddf3>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f7fb faff 	bl	8000540 <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb f941 	bl	80001d0 <__aeabi_dsub>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb faf1 	bl	8000540 <__aeabi_dmul>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	ec41 0b19 	vmov	d9, r0, r1
 8004f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb f930 	bl	80001d0 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	ec51 0b19 	vmov	r0, r1, d9
 8004f78:	f7fb fc0c 	bl	8000794 <__aeabi_ddiv>
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	463b      	mov	r3, r7
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fada 	bl	8000540 <__aeabi_dmul>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	463b      	mov	r3, r7
 8004f90:	f7fb f920 	bl	80001d4 <__adddf3>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f918 	bl	80001d0 <__aeabi_dsub>
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	f7fb f914 	bl	80001d0 <__aeabi_dsub>
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4602      	mov	r2, r0
 8004fac:	493a      	ldr	r1, [pc, #232]	; (8005098 <__ieee754_pow+0xa48>)
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fb f90e 	bl	80001d0 <__aeabi_dsub>
 8004fb4:	ec41 0b10 	vmov	d0, r0, r1
 8004fb8:	ee10 3a90 	vmov	r3, s1
 8004fbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc4:	da2b      	bge.n	800501e <__ieee754_pow+0x9ce>
 8004fc6:	4650      	mov	r0, sl
 8004fc8:	f000 f966 	bl	8005298 <scalbn>
 8004fcc:	ec51 0b10 	vmov	r0, r1, d0
 8004fd0:	ec53 2b18 	vmov	r2, r3, d8
 8004fd4:	f7ff bbed 	b.w	80047b2 <__ieee754_pow+0x162>
 8004fd8:	4b30      	ldr	r3, [pc, #192]	; (800509c <__ieee754_pow+0xa4c>)
 8004fda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004fde:	429e      	cmp	r6, r3
 8004fe0:	f77f af0c 	ble.w	8004dfc <__ieee754_pow+0x7ac>
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <__ieee754_pow+0xa50>)
 8004fe6:	440b      	add	r3, r1
 8004fe8:	4303      	orrs	r3, r0
 8004fea:	d009      	beq.n	8005000 <__ieee754_pow+0x9b0>
 8004fec:	ec51 0b18 	vmov	r0, r1, d8
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f7fb fd16 	bl	8000a24 <__aeabi_dcmplt>
 8004ff8:	3800      	subs	r0, #0
 8004ffa:	bf18      	it	ne
 8004ffc:	2001      	movne	r0, #1
 8004ffe:	e447      	b.n	8004890 <__ieee754_pow+0x240>
 8005000:	4622      	mov	r2, r4
 8005002:	462b      	mov	r3, r5
 8005004:	f7fb f8e4 	bl	80001d0 <__aeabi_dsub>
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	f7fb fd1e 	bl	8000a4c <__aeabi_dcmpge>
 8005010:	2800      	cmp	r0, #0
 8005012:	f43f aef3 	beq.w	8004dfc <__ieee754_pow+0x7ac>
 8005016:	e7e9      	b.n	8004fec <__ieee754_pow+0x99c>
 8005018:	f04f 0a00 	mov.w	sl, #0
 800501c:	e71a      	b.n	8004e54 <__ieee754_pow+0x804>
 800501e:	ec51 0b10 	vmov	r0, r1, d0
 8005022:	4619      	mov	r1, r3
 8005024:	e7d4      	b.n	8004fd0 <__ieee754_pow+0x980>
 8005026:	491c      	ldr	r1, [pc, #112]	; (8005098 <__ieee754_pow+0xa48>)
 8005028:	2000      	movs	r0, #0
 800502a:	f7ff bb30 	b.w	800468e <__ieee754_pow+0x3e>
 800502e:	2000      	movs	r0, #0
 8005030:	2100      	movs	r1, #0
 8005032:	f7ff bb2c 	b.w	800468e <__ieee754_pow+0x3e>
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	f7ff bb28 	b.w	800468e <__ieee754_pow+0x3e>
 800503e:	9204      	str	r2, [sp, #16]
 8005040:	f7ff bb7a 	b.w	8004738 <__ieee754_pow+0xe8>
 8005044:	2300      	movs	r3, #0
 8005046:	f7ff bb64 	b.w	8004712 <__ieee754_pow+0xc2>
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w
 8005050:	00000000 	.word	0x00000000
 8005054:	3fe62e43 	.word	0x3fe62e43
 8005058:	fefa39ef 	.word	0xfefa39ef
 800505c:	3fe62e42 	.word	0x3fe62e42
 8005060:	0ca86c39 	.word	0x0ca86c39
 8005064:	be205c61 	.word	0xbe205c61
 8005068:	72bea4d0 	.word	0x72bea4d0
 800506c:	3e663769 	.word	0x3e663769
 8005070:	c5d26bf1 	.word	0xc5d26bf1
 8005074:	3ebbbd41 	.word	0x3ebbbd41
 8005078:	af25de2c 	.word	0xaf25de2c
 800507c:	3f11566a 	.word	0x3f11566a
 8005080:	16bebd93 	.word	0x16bebd93
 8005084:	3f66c16c 	.word	0x3f66c16c
 8005088:	5555553e 	.word	0x5555553e
 800508c:	3fc55555 	.word	0x3fc55555
 8005090:	3fe00000 	.word	0x3fe00000
 8005094:	000fffff 	.word	0x000fffff
 8005098:	3ff00000 	.word	0x3ff00000
 800509c:	4090cbff 	.word	0x4090cbff
 80050a0:	3f6f3400 	.word	0x3f6f3400
 80050a4:	652b82fe 	.word	0x652b82fe
 80050a8:	3c971547 	.word	0x3c971547

080050ac <__ieee754_sqrt>:
 80050ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	ec55 4b10 	vmov	r4, r5, d0
 80050b4:	4e55      	ldr	r6, [pc, #340]	; (800520c <__ieee754_sqrt+0x160>)
 80050b6:	43ae      	bics	r6, r5
 80050b8:	ee10 0a10 	vmov	r0, s0
 80050bc:	ee10 3a10 	vmov	r3, s0
 80050c0:	462a      	mov	r2, r5
 80050c2:	4629      	mov	r1, r5
 80050c4:	d110      	bne.n	80050e8 <__ieee754_sqrt+0x3c>
 80050c6:	ee10 2a10 	vmov	r2, s0
 80050ca:	462b      	mov	r3, r5
 80050cc:	f7fb fa38 	bl	8000540 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7fb f87c 	bl	80001d4 <__adddf3>
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	ec45 4b10 	vmov	d0, r4, r5
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	dc10      	bgt.n	800510e <__ieee754_sqrt+0x62>
 80050ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050f0:	4330      	orrs	r0, r6
 80050f2:	d0f5      	beq.n	80050e0 <__ieee754_sqrt+0x34>
 80050f4:	b15d      	cbz	r5, 800510e <__ieee754_sqrt+0x62>
 80050f6:	ee10 2a10 	vmov	r2, s0
 80050fa:	462b      	mov	r3, r5
 80050fc:	ee10 0a10 	vmov	r0, s0
 8005100:	f7fb f866 	bl	80001d0 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	f7fb fb44 	bl	8000794 <__aeabi_ddiv>
 800510c:	e7e6      	b.n	80050dc <__ieee754_sqrt+0x30>
 800510e:	1512      	asrs	r2, r2, #20
 8005110:	d074      	beq.n	80051fc <__ieee754_sqrt+0x150>
 8005112:	07d4      	lsls	r4, r2, #31
 8005114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005118:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800511c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005120:	bf5e      	ittt	pl
 8005122:	0fda      	lsrpl	r2, r3, #31
 8005124:	005b      	lslpl	r3, r3, #1
 8005126:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800512a:	2400      	movs	r4, #0
 800512c:	0fda      	lsrs	r2, r3, #31
 800512e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005132:	107f      	asrs	r7, r7, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2516      	movs	r5, #22
 8005138:	4620      	mov	r0, r4
 800513a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800513e:	1886      	adds	r6, r0, r2
 8005140:	428e      	cmp	r6, r1
 8005142:	bfde      	ittt	le
 8005144:	1b89      	suble	r1, r1, r6
 8005146:	18b0      	addle	r0, r6, r2
 8005148:	18a4      	addle	r4, r4, r2
 800514a:	0049      	lsls	r1, r1, #1
 800514c:	3d01      	subs	r5, #1
 800514e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005152:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800515a:	d1f0      	bne.n	800513e <__ieee754_sqrt+0x92>
 800515c:	462a      	mov	r2, r5
 800515e:	f04f 0e20 	mov.w	lr, #32
 8005162:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005166:	4281      	cmp	r1, r0
 8005168:	eb06 0c05 	add.w	ip, r6, r5
 800516c:	dc02      	bgt.n	8005174 <__ieee754_sqrt+0xc8>
 800516e:	d113      	bne.n	8005198 <__ieee754_sqrt+0xec>
 8005170:	459c      	cmp	ip, r3
 8005172:	d811      	bhi.n	8005198 <__ieee754_sqrt+0xec>
 8005174:	f1bc 0f00 	cmp.w	ip, #0
 8005178:	eb0c 0506 	add.w	r5, ip, r6
 800517c:	da43      	bge.n	8005206 <__ieee754_sqrt+0x15a>
 800517e:	2d00      	cmp	r5, #0
 8005180:	db41      	blt.n	8005206 <__ieee754_sqrt+0x15a>
 8005182:	f100 0801 	add.w	r8, r0, #1
 8005186:	1a09      	subs	r1, r1, r0
 8005188:	459c      	cmp	ip, r3
 800518a:	bf88      	it	hi
 800518c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005190:	eba3 030c 	sub.w	r3, r3, ip
 8005194:	4432      	add	r2, r6
 8005196:	4640      	mov	r0, r8
 8005198:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800519c:	f1be 0e01 	subs.w	lr, lr, #1
 80051a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80051a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051ac:	d1db      	bne.n	8005166 <__ieee754_sqrt+0xba>
 80051ae:	430b      	orrs	r3, r1
 80051b0:	d006      	beq.n	80051c0 <__ieee754_sqrt+0x114>
 80051b2:	1c50      	adds	r0, r2, #1
 80051b4:	bf13      	iteet	ne
 80051b6:	3201      	addne	r2, #1
 80051b8:	3401      	addeq	r4, #1
 80051ba:	4672      	moveq	r2, lr
 80051bc:	f022 0201 	bicne.w	r2, r2, #1
 80051c0:	1063      	asrs	r3, r4, #1
 80051c2:	0852      	lsrs	r2, r2, #1
 80051c4:	07e1      	lsls	r1, r4, #31
 80051c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051ce:	bf48      	it	mi
 80051d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80051d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80051d8:	4614      	mov	r4, r2
 80051da:	e781      	b.n	80050e0 <__ieee754_sqrt+0x34>
 80051dc:	0ad9      	lsrs	r1, r3, #11
 80051de:	3815      	subs	r0, #21
 80051e0:	055b      	lsls	r3, r3, #21
 80051e2:	2900      	cmp	r1, #0
 80051e4:	d0fa      	beq.n	80051dc <__ieee754_sqrt+0x130>
 80051e6:	02cd      	lsls	r5, r1, #11
 80051e8:	d50a      	bpl.n	8005200 <__ieee754_sqrt+0x154>
 80051ea:	f1c2 0420 	rsb	r4, r2, #32
 80051ee:	fa23 f404 	lsr.w	r4, r3, r4
 80051f2:	1e55      	subs	r5, r2, #1
 80051f4:	4093      	lsls	r3, r2
 80051f6:	4321      	orrs	r1, r4
 80051f8:	1b42      	subs	r2, r0, r5
 80051fa:	e78a      	b.n	8005112 <__ieee754_sqrt+0x66>
 80051fc:	4610      	mov	r0, r2
 80051fe:	e7f0      	b.n	80051e2 <__ieee754_sqrt+0x136>
 8005200:	0049      	lsls	r1, r1, #1
 8005202:	3201      	adds	r2, #1
 8005204:	e7ef      	b.n	80051e6 <__ieee754_sqrt+0x13a>
 8005206:	4680      	mov	r8, r0
 8005208:	e7bd      	b.n	8005186 <__ieee754_sqrt+0xda>
 800520a:	bf00      	nop
 800520c:	7ff00000 	.word	0x7ff00000

08005210 <with_errno>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4604      	mov	r4, r0
 8005214:	460d      	mov	r5, r1
 8005216:	4616      	mov	r6, r2
 8005218:	f7ff f8b0 	bl	800437c <__errno>
 800521c:	4629      	mov	r1, r5
 800521e:	6006      	str	r6, [r0, #0]
 8005220:	4620      	mov	r0, r4
 8005222:	bd70      	pop	{r4, r5, r6, pc}

08005224 <xflow>:
 8005224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005226:	4614      	mov	r4, r2
 8005228:	461d      	mov	r5, r3
 800522a:	b108      	cbz	r0, 8005230 <xflow+0xc>
 800522c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005230:	e9cd 2300 	strd	r2, r3, [sp]
 8005234:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f980 	bl	8000540 <__aeabi_dmul>
 8005240:	2222      	movs	r2, #34	; 0x22
 8005242:	b003      	add	sp, #12
 8005244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005248:	f7ff bfe2 	b.w	8005210 <with_errno>

0800524c <__math_uflow>:
 800524c:	b508      	push	{r3, lr}
 800524e:	2200      	movs	r2, #0
 8005250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005254:	f7ff ffe6 	bl	8005224 <xflow>
 8005258:	ec41 0b10 	vmov	d0, r0, r1
 800525c:	bd08      	pop	{r3, pc}

0800525e <__math_oflow>:
 800525e:	b508      	push	{r3, lr}
 8005260:	2200      	movs	r2, #0
 8005262:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005266:	f7ff ffdd 	bl	8005224 <xflow>
 800526a:	ec41 0b10 	vmov	d0, r0, r1
 800526e:	bd08      	pop	{r3, pc}

08005270 <fabs>:
 8005270:	ec51 0b10 	vmov	r0, r1, d0
 8005274:	ee10 2a10 	vmov	r2, s0
 8005278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800527c:	ec43 2b10 	vmov	d0, r2, r3
 8005280:	4770      	bx	lr

08005282 <finite>:
 8005282:	b082      	sub	sp, #8
 8005284:	ed8d 0b00 	vstr	d0, [sp]
 8005288:	9801      	ldr	r0, [sp, #4]
 800528a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800528e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005292:	0fc0      	lsrs	r0, r0, #31
 8005294:	b002      	add	sp, #8
 8005296:	4770      	bx	lr

08005298 <scalbn>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	ec55 4b10 	vmov	r4, r5, d0
 800529e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052a2:	4606      	mov	r6, r0
 80052a4:	462b      	mov	r3, r5
 80052a6:	b99a      	cbnz	r2, 80052d0 <scalbn+0x38>
 80052a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052ac:	4323      	orrs	r3, r4
 80052ae:	d036      	beq.n	800531e <scalbn+0x86>
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <scalbn+0x100>)
 80052b2:	4629      	mov	r1, r5
 80052b4:	ee10 0a10 	vmov	r0, s0
 80052b8:	2200      	movs	r2, #0
 80052ba:	f7fb f941 	bl	8000540 <__aeabi_dmul>
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <scalbn+0x104>)
 80052c0:	429e      	cmp	r6, r3
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	da10      	bge.n	80052ea <scalbn+0x52>
 80052c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005378 <scalbn+0xe0>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	e03a      	b.n	8005346 <scalbn+0xae>
 80052d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d10c      	bne.n	80052f2 <scalbn+0x5a>
 80052d8:	ee10 2a10 	vmov	r2, s0
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fa ff78 	bl	80001d4 <__adddf3>
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	e019      	b.n	800531e <scalbn+0x86>
 80052ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80052ee:	460b      	mov	r3, r1
 80052f0:	3a36      	subs	r2, #54	; 0x36
 80052f2:	4432      	add	r2, r6
 80052f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80052f8:	428a      	cmp	r2, r1
 80052fa:	dd08      	ble.n	800530e <scalbn+0x76>
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	a120      	add	r1, pc, #128	; (adr r1, 8005380 <scalbn+0xe8>)
 8005300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005304:	da1c      	bge.n	8005340 <scalbn+0xa8>
 8005306:	a120      	add	r1, pc, #128	; (adr r1, 8005388 <scalbn+0xf0>)
 8005308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530c:	e018      	b.n	8005340 <scalbn+0xa8>
 800530e:	2a00      	cmp	r2, #0
 8005310:	dd08      	ble.n	8005324 <scalbn+0x8c>
 8005312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800531a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800531e:	ec45 4b10 	vmov	d0, r4, r5
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005328:	da19      	bge.n	800535e <scalbn+0xc6>
 800532a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800532e:	429e      	cmp	r6, r3
 8005330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005334:	dd0a      	ble.n	800534c <scalbn+0xb4>
 8005336:	a112      	add	r1, pc, #72	; (adr r1, 8005380 <scalbn+0xe8>)
 8005338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e2      	bne.n	8005306 <scalbn+0x6e>
 8005340:	a30f      	add	r3, pc, #60	; (adr r3, 8005380 <scalbn+0xe8>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fb f8fb 	bl	8000540 <__aeabi_dmul>
 800534a:	e7cb      	b.n	80052e4 <scalbn+0x4c>
 800534c:	a10a      	add	r1, pc, #40	; (adr r1, 8005378 <scalbn+0xe0>)
 800534e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0b8      	beq.n	80052c8 <scalbn+0x30>
 8005356:	a10e      	add	r1, pc, #56	; (adr r1, 8005390 <scalbn+0xf8>)
 8005358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800535c:	e7b4      	b.n	80052c8 <scalbn+0x30>
 800535e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005362:	3236      	adds	r2, #54	; 0x36
 8005364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800536c:	4620      	mov	r0, r4
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <scalbn+0x108>)
 8005370:	2200      	movs	r2, #0
 8005372:	e7e8      	b.n	8005346 <scalbn+0xae>
 8005374:	f3af 8000 	nop.w
 8005378:	c2f8f359 	.word	0xc2f8f359
 800537c:	01a56e1f 	.word	0x01a56e1f
 8005380:	8800759c 	.word	0x8800759c
 8005384:	7e37e43c 	.word	0x7e37e43c
 8005388:	8800759c 	.word	0x8800759c
 800538c:	fe37e43c 	.word	0xfe37e43c
 8005390:	c2f8f359 	.word	0xc2f8f359
 8005394:	81a56e1f 	.word	0x81a56e1f
 8005398:	43500000 	.word	0x43500000
 800539c:	ffff3cb0 	.word	0xffff3cb0
 80053a0:	3c900000 	.word	0x3c900000

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
