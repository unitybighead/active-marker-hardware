
VEML6030_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005254  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080053e0  080053e0  000153e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005448  08005448  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005448  08005448  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000011c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c994  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3a  00000000  00000000  0002ca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aea3  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e27c  00000000  00000000  0004a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb3b  00000000  00000000  00058967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f44a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e50  00000000  00000000  000f44f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053c4 	.word	0x080053c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080053c4 	.word	0x080053c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <VEML6030_init+0x38>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00};
 8000b92:	2300      	movs	r3, #0
 8000b94:	81bb      	strh	r3, [r7, #12]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 2, 100);
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <VEML6030_init+0x38>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	f107 020c 	add.w	r2, r7, #12
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f000 ff94 	bl	8001ad4 <HAL_I2C_Master_Transmit>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	00000000 	.word	0x00000000

08000bc0 <VEML6030_getLux>:
/*
 * @brief get lux data
 * @param sensor address
 * @return lux
 */
float VEML6030_getLux(uint8_t addr) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  float gain = VEML6030_getGain(addr);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f857 	bl	8000c80 <VEML6030_getGain>
 8000bd2:	ed87 0a05 	vstr	s0, [r7, #20]
  uint16_t inttime = VEML6030_getIntTime(addr);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f891 	bl	8000d00 <VEML6030_getIntTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	827b      	strh	r3, [r7, #18]
  uint16_t als = VEML6030_getALS(addr);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f8ed 	bl	8000dc4 <VEML6030_getALS>
 8000bea:	4603      	mov	r3, r0
 8000bec:	823b      	strh	r3, [r7, #16]
  float resolution = (1.8432 / ((float) inttime / 25.0)) * (0.125 / gain);
 8000bee:	8a7b      	ldrh	r3, [r7, #18]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf8:	ee17 0a90 	vmov	r0, s15
 8000bfc:	f7ff fc48 	bl	8000490 <__aeabi_f2d>
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <VEML6030_getLux+0xb8>)
 8000c06:	f7ff fdc5 	bl	8000794 <__aeabi_ddiv>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	a118      	add	r1, pc, #96	; (adr r1, 8000c70 <VEML6030_getLux+0xb0>)
 8000c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c14:	f7ff fdbe 	bl	8000794 <__aeabi_ddiv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4614      	mov	r4, r2
 8000c1e:	461d      	mov	r5, r3
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff fc35 	bl	8000490 <__aeabi_f2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000c32:	f7ff fdaf 	bl	8000794 <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	f7ff fc7f 	bl	8000540 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff ff49 	bl	8000ae0 <__aeabi_d2f>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60fb      	str	r3, [r7, #12]
  return als * resolution;
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	487fcb92 	.word	0x487fcb92
 8000c74:	3ffd7dbf 	.word	0x3ffd7dbf
 8000c78:	40390000 	.word	0x40390000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <VEML6030_getGain>:
/*
 * @brief get gain data
 * @param addr sensor address
 * @return gain
 */
float VEML6030_getGain(uint8_t addr) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8aa 	bl	8000de8 <VEML6030_readWord>
 8000c94:	4603      	mov	r3, r0
 8000c96:	82fb      	strh	r3, [r7, #22]
  uint16_t x0 = VEML6030_readBit(config, 11);
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	210b      	movs	r1, #11
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f8cd 	bl	8000e3c <VEML6030_readBit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	82bb      	strh	r3, [r7, #20]
  uint16_t x1 = VEML6030_readBit(config, 12);
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	210c      	movs	r1, #12
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8c6 	bl	8000e3c <VEML6030_readBit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	827b      	strh	r3, [r7, #18]
  float gain = pow(2,(x0 - 3 * x1));
 8000cb4:	8aba      	ldrh	r2, [r7, #20]
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	1acb      	subs	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbd3 	bl	800046c <__aeabi_i2d>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	ec43 2b11 	vmov	d1, r2, r3
 8000cce:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000cf8 <VEML6030_getGain+0x78>
 8000cd2:	f003 fc5d 	bl	8004590 <pow>
 8000cd6:	ec53 2b10 	vmov	r2, r3, d0
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff feff 	bl	8000ae0 <__aeabi_d2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60fb      	str	r3, [r7, #12]
  return gain;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	ee07 3a90 	vmov	s15, r3
}
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40000000 	.word	0x40000000

08000d00 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f86a 	bl	8000de8 <VEML6030_readWord>
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
  uint8_t x2x1 = (config >> 6) & 0x03;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	099b      	lsrs	r3, r3, #6
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	737b      	strb	r3, [r7, #13]
  uint8_t x3 = VEML6030_readBit(config, 8);
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f886 	bl	8000e3c <VEML6030_readBit>
 8000d30:	4603      	mov	r3, r0
 8000d32:	733b      	strb	r3, [r7, #12]
  uint8_t x4 = VEML6030_readBit(config, 9);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	2109      	movs	r1, #9
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f87f 	bl	8000e3c <VEML6030_readBit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	72fb      	strb	r3, [r7, #11]
  uint16_t IntTime = 100 *pow(2,x2x1)/ pow(2,(x3 + x4));
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb81 	bl	800044c <__aeabi_ui2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	ec43 2b11 	vmov	d1, r2, r3
 8000d52:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000db8 <VEML6030_getIntTime+0xb8>
 8000d56:	f003 fc1b 	bl	8004590 <pow>
 8000d5a:	ec51 0b10 	vmov	r0, r1, d0
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <VEML6030_getIntTime+0xc0>)
 8000d64:	f7ff fbec 	bl	8000540 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	461d      	mov	r5, r3
 8000d70:	7b3a      	ldrb	r2, [r7, #12]
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4413      	add	r3, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb78 	bl	800046c <__aeabi_i2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	ec43 2b11 	vmov	d1, r2, r3
 8000d84:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000db8 <VEML6030_getIntTime+0xb8>
 8000d88:	f003 fc02 	bl	8004590 <pow>
 8000d8c:	ec53 2b10 	vmov	r2, r3, d0
 8000d90:	4620      	mov	r0, r4
 8000d92:	4629      	mov	r1, r5
 8000d94:	f7ff fcfe 	bl	8000794 <__aeabi_ddiv>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe7e 	bl	8000aa0 <__aeabi_d2uiz>
 8000da4:	4603      	mov	r3, r0
 8000da6:	813b      	strh	r3, [r7, #8]
  return IntTime;
 8000da8:	893b      	ldrh	r3, [r7, #8]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bdb0      	pop	{r4, r5, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40000000 	.word	0x40000000
 8000dc0:	40590000 	.word	0x40590000

08000dc4 <VEML6030_getALS>:
/*
 * @brief get row illuminance data
 * @param addr address
 * @return row data
 */
uint16_t VEML6030_getALS(uint8_t addr){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  uint16_t als = VEML6030_readWord(addr, ALS_CMD);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f808 	bl	8000de8 <VEML6030_readWord>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	81fb      	strh	r3, [r7, #14]
  return als;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = { };
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <VEML6030_readWord+0x50>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	b299      	uxth	r1, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	f000 ff74 	bl	8001d04 <HAL_I2C_Mem_Read>
  uint16_t data = (buf[1] << 8) + buf[0];
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	81fb      	strh	r3, [r7, #14]
  return data;
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000008c 	.word	0x2000008c

08000e3c <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000e4c:	88fa      	ldrh	r2, [r7, #6]
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	fa42 f303 	asr.w	r3, r2, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f000 fad7 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f853 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f000 f919 	bl	80010ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 f8e7 	bl	800104c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e7e:	f000 f8a5 	bl	8000fcc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (VEML6030_init(&hi2c1, SENS_ADDR_1) != HAL_OK) {
 8000e82:	2120      	movs	r1, #32
 8000e84:	4822      	ldr	r0, [pc, #136]	; (8000f10 <main+0xa8>)
 8000e86:	f7ff fe7b 	bl	8000b80 <VEML6030_init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <main+0x2c>
    Error_Handler();
 8000e90:	f000 f93c 	bl	800110c <Error_Handler>
  }
  float *cycle_basis = calloc(sizeof(float), CYCLE_LAST);
 8000e94:	2102      	movs	r1, #2
 8000e96:	2004      	movs	r0, #4
 8000e98:	f003 fa78 	bl	800438c <calloc>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	607b      	str	r3, [r7, #4]
  uint32_t *cycle_old = calloc(sizeof(float), CYCLE_LAST);
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f003 fa72 	bl	800438c <calloc>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	603b      	str	r3, [r7, #0]
  cycle_basis[CYCLE_MAIN] = 1000 / 60;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000eb2:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_SENSOR] = VEML6030_getIntTime(SENS_ADDR_1);
 8000eb4:	2020      	movs	r0, #32
 8000eb6:	f7ff ff23 	bl	8000d00 <VEML6030_getIntTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    i++;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <main+0xac>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <main+0xac>)
 8000ed4:	6013      	str	r3, [r2, #0]
    if (CycleController(CYCLE_SENSOR, cycle_basis, cycle_old)) {
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 fa3a 	bl	8001354 <CycleController>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <main+0x8e>
      g_lux = VEML6030_getLux(SENS_ADDR_1);
 8000ee6:	2020      	movs	r0, #32
 8000ee8:	f7ff fe6a 	bl	8000bc0 <VEML6030_getLux>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <main+0xb0>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
    }
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000ef6:	bf00      	nop
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 fa29 	bl	8001354 <CycleController>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f4      	bne.n	8000ef8 <main+0x90>
    i++;
 8000f0e:	e7dd      	b.n	8000ecc <main+0x64>
 8000f10:	20000090 	.word	0x20000090
 8000f14:	20000170 	.word	0x20000170
 8000f18:	2000016c 	.word	0x2000016c

08000f1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	; 0x58
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f26:	2228      	movs	r2, #40	; 0x28
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fa60 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000f64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fae8 	bl	8002544 <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x62>
    Error_Handler();
 8000f7a:	f000 f8c7 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2302      	movs	r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fb10 	bl	80035c0 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x8e>
    Error_Handler();
 8000fa6:	f000 f8b1 	bl	800110c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000faa:	2320      	movs	r3, #32
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fd23 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xa8>
    Error_Handler();
 8000fc0:	f000 f8a4 	bl	800110c <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3758      	adds	r7, #88	; 0x58
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <MX_I2C1_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <MX_I2C1_Init+0x7c>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_I2C1_Init+0x74>)
 8001008:	f000 fcc8 	bl	800199c <HAL_I2C_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8001012:	f000 f87b 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001016:	2100      	movs	r1, #0
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <MX_I2C1_Init+0x74>)
 800101a:	f001 f9fb 	bl	8002414 <HAL_I2CEx_ConfigAnalogFilter>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8001024:	f000 f872 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001028:	2100      	movs	r1, #0
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_I2C1_Init+0x74>)
 800102c:	f001 fa3d 	bl	80024aa <HAL_I2CEx_ConfigDigitalFilter>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C1_Init+0x6e>
    Error_Handler();
 8001036:	f000 f869 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000090 	.word	0x20000090
 8001044:	40005400 	.word	0x40005400
 8001048:	2000090e 	.word	0x2000090e

0800104c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f002 fddc 	bl	8003c4c <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
    Error_Handler();
 800109a:	f000 f837 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000e4 	.word	0x200000e4
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x44>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x44>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x44>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x44>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x44>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x44>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x7c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d127      	bne.n	80011d2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011aa:	2304      	movs	r3, #4
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_I2C_MspInit+0x84>)
 80011b6:	f000 fa7f 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_I2C_MspInit+0x80>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d129      	bne.n	800125e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x84>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_UART_MspInit+0x84>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0x84>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_UART_MspInit+0x84>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_UART_MspInit+0x84>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_UART_MspInit+0x84>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800123a:	f248 0304 	movw	r3, #32772	; 0x8004
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124c:	2307      	movs	r3, #7
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fa2d 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8f6 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f003 f852 	bl	800439c <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20003000 	.word	0x20003000
 8001324:	00000400 	.word	0x00000400
 8001328:	20000174 	.word	0x20000174
 800132c:	20000190 	.word	0x20000190

08001330 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d107      	bne.n	800137e <CycleController+0x2a>
    old[data] = HAL_GetTick();
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	18d4      	adds	r4, r2, r3
 8001376:	f000 f8ad 	bl	80014d4 <HAL_GetTick>
 800137a:	4603      	mov	r3, r0
 800137c:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 800137e:	f000 f8a9 	bl	80014d4 <HAL_GetTick>
 8001382:	6178      	str	r0, [r7, #20]
  if (current - old[data] > basis[data]) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd07      	ble.n	80013c0 <CycleController+0x6c>
    old[data] = current;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
    return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <CycleController+0x6e>
  } else {
    return 0;
 80013c0:	2300      	movs	r3, #0
  }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
	...

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffae 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f002 ffd5 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fd33 	bl	8000e68 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001410:	08005450 	.word	0x08005450
  ldr r2, =_sbss
 8001414:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001418:	2000018c 	.word	0x2000018c

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f90d 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe6c 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f917 	bl	800169e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f8ed 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000178 	.word	0x20000178

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000178 	.word	0x20000178

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff47 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff5c 	bl	8001534 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff8e 	bl	80015a4 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffb0 	bl	800160c <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	e14e      	b.n	8001966 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8140 	beq.w	8001960 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x40>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d130      	bne.n	800175a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172e:	2201      	movs	r2, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 0201 	and.w	r2, r3, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b03      	cmp	r3, #3
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d123      	bne.n	80017ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0203 	and.w	r2, r3, #3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 809a 	beq.w	8001960 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b52      	ldr	r3, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d013      	beq.n	8001898 <HAL_GPIO_Init+0x1e0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00d      	beq.n	8001894 <HAL_GPIO_Init+0x1dc>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a45      	ldr	r2, [pc, #276]	; (8001990 <HAL_GPIO_Init+0x2d8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x1d8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a44      	ldr	r2, [pc, #272]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_GPIO_Init+0x1d4>
 8001888:	2303      	movs	r3, #3
 800188a:	e006      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 800188c:	2305      	movs	r3, #5
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001890:	2302      	movs	r3, #2
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001898:	2300      	movs	r3, #0
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018aa:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018dc:	4a2e      	ldr	r2, [pc, #184]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f aea9 	bne.w	80016c8 <HAL_GPIO_Init+0x10>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e08d      	b.n	8001aca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fbcc 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e006      	b.n	8001a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d108      	bne.n	8001a3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	e007      	b.n	8001a4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69d9      	ldr	r1, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	f040 80fd 	bne.w	8001cf0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x30>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0f6      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fce2 	bl	80014d4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2319      	movs	r3, #25
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa82 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e1      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	893a      	ldrh	r2, [r7, #8]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d906      	bls.n	8001b6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e007      	b.n	8001b7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d024      	beq.n	8001bd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_I2C_Master_Transmit+0x228>)
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fbf1 	bl	80023b0 <I2C_TransferConfig>
 8001bce:	e066      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	8979      	ldrh	r1, [r7, #10]
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_I2C_Master_Transmit+0x228>)
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fbe6 	bl	80023b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001be4:	e05b      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa75 	bl	80020da <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07b      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d034      	beq.n	8001c9e <HAL_I2C_Master_Transmit+0x1ca>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d130      	bne.n	8001c9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	2200      	movs	r2, #0
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f9ee 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e04d      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d90e      	bls.n	8001c7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fb9a 	bl	80023b0 <I2C_TransferConfig>
 8001c7c:	e00f      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	8979      	ldrh	r1, [r7, #10]
 8001c90:	2300      	movs	r3, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fb89 	bl	80023b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d19e      	bne.n	8001be6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fa5b 	bl	8002168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01a      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_I2C_Master_Transmit+0x22c>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e000      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	80002000 	.word	0x80002000
 8001d00:	fe00e800 	.word	0xfe00e800

08001d04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	817b      	strh	r3, [r7, #10]
 8001d16:	460b      	mov	r3, r1
 8001d18:	813b      	strh	r3, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	f040 80fd 	bne.w	8001f26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_I2C_Mem_Read+0x34>
 8001d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0f1      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Mem_Read+0x4e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0ea      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d5a:	f7ff fbbb 	bl	80014d4 <HAL_GetTick>
 8001d5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2319      	movs	r3, #25
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f95b 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0d5      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2222      	movs	r2, #34	; 0x22
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a3a      	ldr	r2, [r7, #32]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da4:	88f8      	ldrh	r0, [r7, #6]
 8001da6:	893a      	ldrh	r2, [r7, #8]
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4603      	mov	r3, r0
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f8bf 	bl	8001f38 <I2C_RequestMemoryRead>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0ad      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d90e      	bls.n	8001df4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	8979      	ldrh	r1, [r7, #10]
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <HAL_I2C_Mem_Read+0x22c>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fadf 	bl	80023b0 <I2C_TransferConfig>
 8001df2:	e00f      	b.n	8001e14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	8979      	ldrh	r1, [r7, #10]
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_I2C_Mem_Read+0x22c>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 face 	bl	80023b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f902 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07c      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d034      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x1d0>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d130      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f8d3 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e04d      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2bff      	cmp	r3, #255	; 0xff
 8001e94:	d90e      	bls.n	8001eb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fa7f 	bl	80023b0 <I2C_TransferConfig>
 8001eb2:	e00f      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fa6e 	bl	80023b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d19a      	bne.n	8001e14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f940 	bl	8002168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01a      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_I2C_Mem_Read+0x230>)
 8001f06:	400b      	ands	r3, r1
 8001f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
  }
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	80002400 	.word	0x80002400
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	817b      	strh	r3, [r7, #10]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	813b      	strh	r3, [r7, #8]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <I2C_RequestMemoryRead+0xa4>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fa26 	bl	80023b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f8b6 	bl	80020da <I2C_WaitOnTXISFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e02c      	b.n	8001fd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
 8001f88:	e015      	b.n	8001fb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f8a:	893b      	ldrh	r3, [r7, #8]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f89c 	bl	80020da <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e012      	b.n	8001fd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fac:	893b      	ldrh	r3, [r7, #8]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2140      	movs	r1, #64	; 0x40
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f831 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	80002000 	.word	0x80002000

08001fe0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d103      	bne.n	8001ffe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d007      	beq.n	800201c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	619a      	str	r2, [r3, #24]
  }
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002038:	e03b      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f8d6 	bl	80021f0 <I2C_IsErrorOccurred>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e041      	b.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d02d      	beq.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7ff fa3d 	bl	80014d4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d122      	bne.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4013      	ands	r3, r2
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	429a      	cmp	r2, r3
 8002088:	d113      	bne.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4013      	ands	r3, r2
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d0b4      	beq.n	800203a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e6:	e033      	b.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f87f 	bl	80021f0 <I2C_IsErrorOccurred>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e031      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d025      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002104:	f7ff f9e6 	bl	80014d4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d302      	bcc.n	800211a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11a      	bne.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d013      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d1c4      	bne.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	e02f      	b.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f838 	bl	80021f0 <I2C_IsErrorOccurred>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e02d      	b.n	80021e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f9a3 	bl	80014d4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11a      	bne.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d013      	beq.n	80021d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d1c8      	bne.n	8002176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d068      	beq.n	80022ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2210      	movs	r2, #16
 8002222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002224:	e049      	b.n	80022ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d045      	beq.n	80022ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff f951 	bl	80014d4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_IsErrorOccurred+0x54>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d13a      	bne.n	80022ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002266:	d121      	bne.n	80022ac <I2C_IsErrorOccurred+0xbc>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226e:	d01d      	beq.n	80022ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b20      	cmp	r3, #32
 8002274:	d01a      	beq.n	80022ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002286:	f7ff f925 	bl	80014d4 <HAL_GetTick>
 800228a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	e00e      	b.n	80022ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800228e:	f7ff f921 	bl	80014d4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b19      	cmp	r3, #25
 800229a:	d907      	bls.n	80022ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f043 0320 	orr.w	r3, r3, #32
 80022a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80022aa:	e006      	b.n	80022ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d1e9      	bne.n	800228e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d003      	beq.n	80022d0 <I2C_IsErrorOccurred+0xe0>
 80022c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0aa      	beq.n	8002226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2220      	movs	r2, #32
 80022de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01c      	beq.n	800239e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff fe3b 	bl	8001fe0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <I2C_IsErrorOccurred+0x1bc>)
 8002376:	400b      	ands	r3, r1
 8002378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3728      	adds	r7, #40	; 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	fe00e800 	.word	0xfe00e800

080023b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	817b      	strh	r3, [r7, #10]
 80023be:	4613      	mov	r3, r2
 80023c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	4313      	orrs	r3, r2
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	0d5b      	lsrs	r3, r3, #21
 80023ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <I2C_TransferConfig+0x60>)
 80023f0:	430b      	orrs	r3, r1
 80023f2:	43db      	mvns	r3, r3
 80023f4:	ea02 0103 	and.w	r1, r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	03ff63ff 	.word	0x03ff63ff

08002414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d138      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e032      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d139      	bne.n	8002534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e033      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2224      	movs	r2, #36	; 0x24
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800254a:	af00      	add	r7, sp, #0
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002554:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f001 b823 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 817d 	beq.w	800287a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002580:	4bbc      	ldr	r3, [pc, #752]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258c:	4bb9      	ldr	r3, [pc, #740]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d15c      	bne.n	8002652 <HAL_RCC_OscConfig+0x10e>
 8002598:	4bb6      	ldr	r3, [pc, #728]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d155      	bne.n	8002652 <HAL_RCC_OscConfig+0x10e>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0x94>
 80025d2:	4ba8      	ldr	r3, [pc, #672]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e015      	b.n	8002604 <HAL_RCC_OscConfig+0xc0>
 80025d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002600:	4b9c      	ldr	r3, [pc, #624]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002608:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800260c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002618:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 811f 	beq.w	8002878 <HAL_RCC_OscConfig+0x334>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8116 	bne.w	8002878 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f000 bfaf 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x12e>
 8002664:	4b83      	ldr	r3, [pc, #524]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a82      	ldr	r2, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e036      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x158>
 8002682:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7b      	ldr	r2, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a78      	ldr	r2, [pc, #480]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e021      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x184>
 80026ae:	4b71      	ldr	r3, [pc, #452]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a70      	ldr	r2, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6d      	ldr	r2, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x19c>
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a69      	ldr	r2, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a66      	ldr	r2, [pc, #408]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e0:	4b64      	ldr	r3, [pc, #400]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f023 020f 	bic.w	r2, r3, #15
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	495f      	ldr	r1, [pc, #380]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d059      	beq.n	80027be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fee3 	bl	80014d4 <HAL_GetTick>
 800270e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fede 	bl	80014d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b64      	cmp	r3, #100	; 0x64
 8002722:	d902      	bls.n	800272a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	f000 bf43 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 800272a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800273e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0x218>
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e015      	b.n	8002788 <HAL_RCC_OscConfig+0x244>
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002774:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002778:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002790:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002794:	fa92 f2a2 	rbit	r2, r2
 8002798:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800279c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027a0:	fab2 f282 	clz	r2, r2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	f042 0220 	orr.w	r2, r2, #32
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f002 021f 	and.w	r2, r2, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ab      	beq.n	8002714 <HAL_RCC_OscConfig+0x1d0>
 80027bc:	e05d      	b.n	800287a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fe89 	bl	80014d4 <HAL_GetTick>
 80027c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fe84 	bl	80014d4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d902      	bls.n	80027de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f000 bee9 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 80027de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0x2cc>
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e015      	b.n	800283c <HAL_RCC_OscConfig+0x2f8>
 8002810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002814:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002828:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800282c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_RCC_OscConfig+0x330>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002840:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002844:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002848:	fa92 f2a2 	rbit	r2, r2
 800284c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002850:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ab      	bne.n	80027c8 <HAL_RCC_OscConfig+0x284>
 8002870:	e003      	b.n	800287a <HAL_RCC_OscConfig+0x336>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 817d 	beq.w	8002b8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002890:	4ba6      	ldr	r3, [pc, #664]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800289c:	4ba3      	ldr	r3, [pc, #652]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d172      	bne.n	800298e <HAL_RCC_OscConfig+0x44a>
 80028a8:	4ba0      	ldr	r3, [pc, #640]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d16c      	bne.n	800298e <HAL_RCC_OscConfig+0x44a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0x3a0>
 80028de:	4b93      	ldr	r3, [pc, #588]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0x3c8>
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002908:	4b88      	ldr	r3, [pc, #544]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2202      	movs	r2, #2
 800290e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002912:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002916:	fa92 f2a2 	rbit	r2, r2
 800291a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800291e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f002 021f 	and.w	r2, r2, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCC_OscConfig+0x410>
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f000 be2e 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	21f8      	movs	r1, #248	; 0xf8
 800296a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002972:	fa91 f1a1 	rbit	r1, r1
 8002976:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800297a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800297e:	fab1 f181 	clz	r1, r1
 8002982:	b2c9      	uxtb	r1, r1
 8002984:	408b      	lsls	r3, r1
 8002986:	4969      	ldr	r1, [pc, #420]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298c:	e0fd      	b.n	8002b8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8088 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x56c>
 80029a0:	2301      	movs	r3, #1
 80029a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	461a      	mov	r2, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fd82 	bl	80014d4 <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fd7d 	bl	80014d4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f000 bde2 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d8>
 8002a16:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e013      	b.n	8002a44 <HAL_RCC_OscConfig+0x500>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0af      	beq.n	80029d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	21f8      	movs	r1, #248	; 0xf8
 8002a8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a94:	fa91 f1a1 	rbit	r1, r1
 8002a98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002aa0:	fab1 f181 	clz	r1, r1
 8002aa4:	b2c9      	uxtb	r1, r1
 8002aa6:	408b      	lsls	r3, r1
 8002aa8:	4920      	ldr	r1, [pc, #128]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
 8002aae:	e06c      	b.n	8002b8a <HAL_RCC_OscConfig+0x646>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fcfa 	bl	80014d4 <HAL_GetTick>
 8002ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fcf5 	bl	80014d4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d902      	bls.n	8002afc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	f000 bd5a 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d104      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5ec>
 8002b26:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <HAL_RCC_OscConfig+0x5e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e015      	b.n	8002b58 <HAL_RCC_OscConfig+0x614>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	2302      	movs	r3, #2
 8002b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b54:	4bc8      	ldr	r3, [pc, #800]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b62:	fa92 f2a2 	rbit	r2, r2
 8002b66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ad      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8110 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d079      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x760>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4bab      	ldr	r3, [pc, #684]	; (8002e7c <HAL_RCC_OscConfig+0x938>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fc7b 	bl	80014d4 <HAL_GetTick>
 8002bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe fc76 	bl	80014d4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d902      	bls.n	8002bfa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f000 bcdb 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c38:	2202      	movs	r2, #2
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f2a3 	rbit	r2, r3
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c60:	2102      	movs	r1, #2
 8002c62:	6019      	str	r1, [r3, #0]
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f1a3 	rbit	r1, r3
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c7a:	6019      	str	r1, [r3, #0]
  return result;
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0a0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x6a0>
 8002ca2:	e08d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x87c>
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cc6:	601a      	str	r2, [r3, #0]
  return result;
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_OscConfig+0x938>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fbf5 	bl	80014d4 <HAL_GetTick>
 8002cea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fbf0 	bl	80014d4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d902      	bls.n	8002d06 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	f000 bc55 	b.w	80035b0 <HAL_RCC_OscConfig+0x106c>
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d32:	2202      	movs	r2, #2
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d7e:	2102      	movs	r1, #2
 8002d80:	6019      	str	r1, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f1a3 	rbit	r1, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d98:	6019      	str	r1, [r3, #0]
  return result;
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d197      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 81a1 	beq.w	8003118 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_RCC_OscConfig+0x93c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11a      	bne.n	8002e58 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCC_OscConfig+0x93c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <HAL_RCC_OscConfig+0x93c>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fb51 	bl	80014d4 <HAL_GetTick>
 8002e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	e009      	b.n	8002e4c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe fb4c 	bl	80014d4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e3b1      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x93c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_OscConfig+0x940>
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a02      	ldr	r2, [pc, #8]	; (8002e78 <HAL_RCC_OscConfig+0x934>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e03c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x9ac>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	10908120 	.word	0x10908120
 8002e80:	40007000 	.word	0x40007000
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x96a>
 8002e94:	4bc1      	ldr	r3, [pc, #772]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4ac0      	ldr	r2, [pc, #768]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	4bbe      	ldr	r3, [pc, #760]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4abd      	ldr	r2, [pc, #756]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e020      	b.n	8002ef0 <HAL_RCC_OscConfig+0x9ac>
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x994>
 8002ebe:	4bb7      	ldr	r3, [pc, #732]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4ab6      	ldr	r2, [pc, #728]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	4bb4      	ldr	r3, [pc, #720]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4ab3      	ldr	r2, [pc, #716]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x9ac>
 8002ed8:	4bb0      	ldr	r3, [pc, #704]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4aaf      	ldr	r2, [pc, #700]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4bad      	ldr	r3, [pc, #692]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4aac      	ldr	r2, [pc, #688]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8081 	beq.w	8003004 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fae7 	bl	80014d4 <HAL_GetTick>
 8002f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fae2 	bl	80014d4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e345      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f50:	2202      	movs	r2, #2
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0xa4c>
 8002f8a:	4b84      	ldr	r3, [pc, #528]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCC_OscConfig+0xa74>
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fbc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6011      	str	r1, [r2, #0]
 8002fc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	fa92 f1a2 	rbit	r1, r2
 8002fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fda:	6011      	str	r1, [r2, #0]
  return result;
 8002fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	fab2 f282 	clz	r2, r2
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f002 021f 	and.w	r2, r2, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d084      	beq.n	8002f0c <HAL_RCC_OscConfig+0x9c8>
 8003002:	e07f      	b.n	8003104 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe fa66 	bl	80014d4 <HAL_GetTick>
 8003008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fa61 	bl	80014d4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e2c4      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003052:	2202      	movs	r2, #2
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800306c:	601a      	str	r2, [r3, #0]
  return result;
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003076:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d102      	bne.n	8003092 <HAL_RCC_OscConfig+0xb4e>
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	e013      	b.n	80030ba <HAL_RCC_OscConfig+0xb76>
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800309a:	2202      	movs	r2, #2
 800309c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fa93 f2a3 	rbit	r2, r3
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030c2:	2102      	movs	r1, #2
 80030c4:	6011      	str	r1, [r2, #0]
 80030c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	fa92 f1a2 	rbit	r1, r2
 80030d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030dc:	6011      	str	r1, [r2, #0]
  return result;
 80030de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f002 021f 	and.w	r2, r2, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d184      	bne.n	800300e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003104:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003116:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8242 	beq.w	80035ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_RCC_OscConfig+0xc58>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	f000 8213 	beq.w	800355e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b02      	cmp	r3, #2
 8003146:	f040 8162 	bne.w	800340e <HAL_RCC_OscConfig+0xeca>
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003152:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800316e:	601a      	str	r2, [r3, #0]
  return result;
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003178:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003184:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	461a      	mov	r2, r3
 800318c:	2300      	movs	r3, #0
 800318e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe f9a0 	bl	80014d4 <HAL_GetTick>
 8003194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003198:	e00c      	b.n	80031b4 <HAL_RCC_OscConfig+0xc70>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe f998 	bl	80014d4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1fd      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031d8:	601a      	str	r2, [r3, #0]
  return result;
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_OscConfig+0xcba>
 80031f8:	4bb0      	ldr	r3, [pc, #704]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	e027      	b.n	800324e <HAL_RCC_OscConfig+0xd0a>
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800322c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4b9c      	ldr	r3, [pc, #624]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003252:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003256:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800325a:	6011      	str	r1, [r2, #0]
 800325c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003260:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	fa92 f1a2 	rbit	r1, r2
 800326a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003272:	6011      	str	r1, [r2, #0]
  return result;
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fab2 f282 	clz	r2, r2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f002 021f 	and.w	r2, r2, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d182      	bne.n	80031a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329a:	4b88      	ldr	r3, [pc, #544]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	430b      	orrs	r3, r1
 80032bc:	497f      	ldr	r1, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032e6:	601a      	str	r2, [r3, #0]
  return result;
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe f8e4 	bl	80014d4 <HAL_GetTick>
 800330c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e009      	b.n	8003326 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe f8df 	bl	80014d4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e144      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800332e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800334a:	601a      	str	r2, [r3, #0]
  return result;
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003354:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_RCC_OscConfig+0xe2c>
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e027      	b.n	80033c0 <HAL_RCC_OscConfig+0xe7c>
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800339e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033cc:	6011      	str	r1, [r2, #0]
 80033ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fa92 f1a2 	rbit	r1, r2
 80033dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033e4:	6011      	str	r1, [r2, #0]
  return result;
 80033e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fab2 f282 	clz	r2, r2
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f042 0220 	orr.w	r2, r2, #32
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	f002 021f 	and.w	r2, r2, #31
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f202 	lsl.w	r2, r1, r2
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d082      	beq.n	8003312 <HAL_RCC_OscConfig+0xdce>
 800340c:	e0cf      	b.n	80035ae <HAL_RCC_OscConfig+0x106a>
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003416:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003432:	601a      	str	r2, [r3, #0]
  return result;
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800343c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003448:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	461a      	mov	r2, r3
 8003450:	2300      	movs	r3, #0
 8003452:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe f83e 	bl	80014d4 <HAL_GetTick>
 8003458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	e009      	b.n	8003472 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe f839 	bl	80014d4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e09e      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800347a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003496:	601a      	str	r2, [r3, #0]
  return result;
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d104      	bne.n	80034c0 <HAL_RCC_OscConfig+0xf7c>
 80034b6:	4b01      	ldr	r3, [pc, #4]	; (80034bc <HAL_RCC_OscConfig+0xf78>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e029      	b.n	8003510 <HAL_RCC_OscConfig+0xfcc>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x1078>)
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003514:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003518:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800351c:	6011      	str	r1, [r2, #0]
 800351e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003522:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	fa92 f1a2 	rbit	r1, r2
 800352c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003530:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003534:	6011      	str	r1, [r2, #0]
  return result;
 8003536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f042 0220 	orr.w	r2, r2, #32
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d180      	bne.n	800345e <HAL_RCC_OscConfig+0xf1a>
 800355c:	e027      	b.n	80035ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01e      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_RCC_OscConfig+0x1078>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800357a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800357e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	429a      	cmp	r2, r3
 8003590:	d10b      	bne.n	80035aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003592:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b09e      	sub	sp, #120	; 0x78
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e162      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b90      	ldr	r3, [pc, #576]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	498b      	ldr	r1, [pc, #556]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e14a      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b82      	ldr	r3, [pc, #520]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	497f      	ldr	r1, [pc, #508]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80dc 	beq.w	80037ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d13c      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xf6>
 800363c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003640:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d102      	bne.n	8003666 <HAL_RCC_ClockConfig+0xa6>
 8003660:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	e00f      	b.n	8003686 <HAL_RCC_ClockConfig+0xc6>
 8003666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800366a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	667b      	str	r3, [r7, #100]	; 0x64
 8003674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003682:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800368a:	65ba      	str	r2, [r7, #88]	; 0x58
 800368c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800368e:	fa92 f2a2 	rbit	r2, r2
 8003692:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003696:	fab2 f282 	clz	r2, r2
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f042 0220 	orr.w	r2, r2, #32
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f002 021f 	and.w	r2, r2, #31
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d17b      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0f3      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d13c      	bne.n	8003738 <HAL_RCC_ClockConfig+0x178>
 80036be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x128>
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	e00f      	b.n	8003708 <HAL_RCC_ClockConfig+0x148>
 80036e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
 80036f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370c:	63ba      	str	r2, [r7, #56]	; 0x38
 800370e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003710:	fa92 f2a2 	rbit	r2, r2
 8003714:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d13a      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0b2      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
 8003738:	2302      	movs	r3, #2
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1a0>
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	e00d      	b.n	800377c <HAL_RCC_ClockConfig+0x1bc>
 8003760:	2302      	movs	r3, #2
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	2302      	movs	r3, #2
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2202      	movs	r2, #2
 800377e:	61ba      	str	r2, [r7, #24]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	fa92 f2a2 	rbit	r2, r2
 8003786:	617a      	str	r2, [r7, #20]
  return result;
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	fab2 f282 	clz	r2, r2
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f042 0220 	orr.w	r2, r2, #32
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f002 021f 	and.w	r2, r2, #31
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f202 	lsl.w	r2, r1, r2
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e079      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	491a      	ldr	r1, [pc, #104]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fd fe8a 	bl	80014d4 <HAL_GetTick>
 80037c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd fe86 	bl	80014d4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e061      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d214      	bcs.n	8003824 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e040      	b.n	800389e <HAL_RCC_ClockConfig+0x2de>
 800381c:	40022000 	.word	0x40022000
 8003820:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	491a      	ldr	r1, [pc, #104]	; (80038a8 <HAL_RCC_ClockConfig+0x2e8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4912      	ldr	r1, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x2e8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003862:	f000 f829 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003866:	4601      	mov	r1, r0
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_RCC_ClockConfig+0x2e8>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003870:	22f0      	movs	r2, #240	; 0xf0
 8003872:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	fa92 f2a2 	rbit	r2, r2
 800387a:	60fa      	str	r2, [r7, #12]
  return result;
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	40d3      	lsrs	r3, r2
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x2ec>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	fa21 f303 	lsr.w	r3, r1, r3
 800388e:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <HAL_RCC_ClockConfig+0x2f0>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x2f4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fdd8 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3778      	adds	r7, #120	; 0x78
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	080053e0 	.word	0x080053e0
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_GetSysClockFreq+0x94>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x30>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x36>
 80038e6:	e026      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ea:	613b      	str	r3, [r7, #16]
      break;
 80038ec:	e026      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCC_GetSysClockFreq+0x94>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	fbb2 f2f3 	udiv	r2, r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e004      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a0c      	ldr	r2, [pc, #48]	; (800395c <HAL_RCC_GetSysClockFreq+0xa4>)
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	613b      	str	r3, [r7, #16]
      break;
 8003934:	e002      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 8003938:	613b      	str	r3, [r7, #16]
      break;
 800393a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393c:	693b      	ldr	r3, [r7, #16]
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	007a1200 	.word	0x007a1200
 8003954:	080053f8 	.word	0x080053f8
 8003958:	08005408 	.word	0x08005408
 800395c:	003d0900 	.word	0x003d0900

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800397e:	f7ff ffef 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003982:	4601      	mov	r1, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800398c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003990:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	fa92 f2a2 	rbit	r2, r2
 8003998:	603a      	str	r2, [r7, #0]
  return result;
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	40d3      	lsrs	r3, r2
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	080053f0 	.word	0x080053f0

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039c2:	f7ff ffcd 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	603a      	str	r2, [r7, #0]
  return result;
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	40d3      	lsrs	r3, r2
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	080053f0 	.word	0x080053f0

08003a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b092      	sub	sp, #72	; 0x48
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80cd 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a24:	4b86      	ldr	r3, [pc, #536]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10e      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	4b83      	ldr	r3, [pc, #524]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4a82      	ldr	r2, [pc, #520]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	61d3      	str	r3, [r2, #28]
 8003a3c:	4b80      	ldr	r3, [pc, #512]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a79      	ldr	r2, [pc, #484]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fd fd35 	bl	80014d4 <HAL_GetTick>
 8003a6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e008      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fd fd31 	bl	80014d4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b64      	cmp	r3, #100	; 0x64
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0db      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07d      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d076      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aaa:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003afc:	4a50      	ldr	r2, [pc, #320]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b00:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d045      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fce2 	bl	80014d4 <HAL_GetTick>
 8003b10:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd fcde 	bl	80014d4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e086      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	2302      	movs	r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	61fb      	str	r3, [r7, #28]
  return result;
 8003b42:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f043 0302 	orr.w	r3, r3, #2
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d102      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b58:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	e007      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2202      	movs	r2, #2
 8003b70:	613a      	str	r2, [r7, #16]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	fa92 f2a2 	rbit	r2, r2
 8003b78:	60fa      	str	r2, [r7, #12]
  return result;
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	fab2 f282 	clz	r2, r2
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	f002 021f 	and.w	r2, r2, #31
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0bd      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4926      	ldr	r1, [pc, #152]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003baa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	491a      	ldr	r1, [pc, #104]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	f023 0210 	bic.w	r2, r3, #16
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4912      	ldr	r1, [pc, #72]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	490b      	ldr	r1, [pc, #44]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3748      	adds	r7, #72	; 0x48
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
 8003c48:	10908100 	.word	0x10908100

08003c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e040      	b.n	8003ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd faba 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f95e 	bl	8003f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f825 	bl	8003ce8 <UART_SetConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01b      	b.n	8003ce0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f9dd 	bl	8004098 <UART_CheckIdleState>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b8a      	ldr	r3, [pc, #552]	; (8003f3c <UART_SetConfig+0x254>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a78      	ldr	r2, [pc, #480]	; (8003f40 <UART_SetConfig+0x258>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d120      	bne.n	8003da6 <UART_SetConfig+0xbe>
 8003d64:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <UART_SetConfig+0x25c>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d817      	bhi.n	8003da0 <UART_SetConfig+0xb8>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <UART_SetConfig+0x90>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d95 	.word	0x08003d95
 8003d80:	08003d9b 	.word	0x08003d9b
 8003d84:	08003d8f 	.word	0x08003d8f
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e01d      	b.n	8003dca <UART_SetConfig+0xe2>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e01a      	b.n	8003dca <UART_SetConfig+0xe2>
 8003d94:	2304      	movs	r3, #4
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e017      	b.n	8003dca <UART_SetConfig+0xe2>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e014      	b.n	8003dca <UART_SetConfig+0xe2>
 8003da0:	2310      	movs	r3, #16
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e011      	b.n	8003dca <UART_SetConfig+0xe2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a67      	ldr	r2, [pc, #412]	; (8003f48 <UART_SetConfig+0x260>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d102      	bne.n	8003db6 <UART_SetConfig+0xce>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e009      	b.n	8003dca <UART_SetConfig+0xe2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a64      	ldr	r2, [pc, #400]	; (8003f4c <UART_SetConfig+0x264>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d102      	bne.n	8003dc6 <UART_SetConfig+0xde>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e001      	b.n	8003dca <UART_SetConfig+0xe2>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d15a      	bne.n	8003e8a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003dd4:	7ffb      	ldrb	r3, [r7, #31]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d827      	bhi.n	8003e2a <UART_SetConfig+0x142>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0xf8>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7ff fdb8 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61b8      	str	r0, [r7, #24]
        break;
 8003e0a:	e013      	b.n	8003e34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7ff fdd6 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4e      	ldr	r3, [pc, #312]	; (8003f50 <UART_SetConfig+0x268>)
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e00c      	b.n	8003e34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7ff fd4d 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003e1e:	61b8      	str	r0, [r7, #24]
        break;
 8003e20:	e008      	b.n	8003e34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	77bb      	strb	r3, [r7, #30]
        break;
 8003e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d074      	beq.n	8003f24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	005a      	lsls	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d916      	bls.n	8003e84 <UART_SetConfig+0x19c>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d212      	bcs.n	8003e84 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	89fa      	ldrh	r2, [r7, #14]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e04f      	b.n	8003f24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77bb      	strb	r3, [r7, #30]
 8003e88:	e04c      	b.n	8003f24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x1fa>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x1b0>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff fd5c 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61b8      	str	r0, [r7, #24]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7ff fd7a 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <UART_SetConfig+0x268>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7ff fcf1 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085a      	lsrs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d909      	bls.n	8003f20 <UART_SetConfig+0x238>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d205      	bcs.n	8003f20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e001      	b.n	8003f24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	efff69f3 	.word	0xefff69f3
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40004400 	.word	0x40004400
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01a      	beq.n	800406a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004052:	d10a      	bne.n	800406a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b098      	sub	sp, #96	; 0x60
 800409c:	af02      	add	r7, sp, #8
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a8:	f7fd fa14 	bl	80014d4 <HAL_GetTick>
 80040ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d12e      	bne.n	800411a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f88c 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d021      	beq.n	800411a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
 80040f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e6      	bne.n	80040d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e062      	b.n	80041e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b04      	cmp	r3, #4
 8004126:	d149      	bne.n	80041bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004130:	2200      	movs	r2, #0
 8004132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f856 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d03c      	beq.n	80041bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	623b      	str	r3, [r7, #32]
   return(result);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
 8004162:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e6      	bne.n	8004142 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e011      	b.n	80041e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3758      	adds	r7, #88	; 0x58
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	e04f      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d04b      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fd f967 	bl	80014d4 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <UART_WaitOnFlagUntilTimeout+0x30>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e04e      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d037      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b80      	cmp	r3, #128	; 0x80
 800422e:	d034      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d031      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d110      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2208      	movs	r2, #8
 800424a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f838 	bl	80042c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2208      	movs	r2, #8
 8004256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e029      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d111      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f81e 	bl	80042c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0a0      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b095      	sub	sp, #84	; 0x54
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	61fb      	str	r3, [r7, #28]
   return(result);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004334:	2b01      	cmp	r3, #1
 8004336:	d118      	bne.n	800436a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	60bb      	str	r3, [r7, #8]
   return(result);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0310 	bic.w	r3, r3, #16
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	613b      	str	r3, [r7, #16]
   return(result);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e6      	bne.n	8004338 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800437e:	bf00      	nop
 8004380:	3754      	adds	r7, #84	; 0x54
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <calloc>:
 800438c:	4b02      	ldr	r3, [pc, #8]	; (8004398 <calloc+0xc>)
 800438e:	460a      	mov	r2, r1
 8004390:	4601      	mov	r1, r0
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f000 b834 	b.w	8004400 <_calloc_r>
 8004398:	2000000c 	.word	0x2000000c

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	; (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	; (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	; (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	; (80043ec <__libc_init_array+0x44>)
 80043bc:	f001 f802 	bl	80053c4 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	08005448 	.word	0x08005448
 80043e4:	08005448 	.word	0x08005448
 80043e8:	08005448 	.word	0x08005448
 80043ec:	0800544c 	.word	0x0800544c

080043f0 <memset>:
 80043f0:	4402      	add	r2, r0
 80043f2:	4603      	mov	r3, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <_calloc_r>:
 8004400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004402:	fba1 2402 	umull	r2, r4, r1, r2
 8004406:	b94c      	cbnz	r4, 800441c <_calloc_r+0x1c>
 8004408:	4611      	mov	r1, r2
 800440a:	9201      	str	r2, [sp, #4]
 800440c:	f000 f82e 	bl	800446c <_malloc_r>
 8004410:	9a01      	ldr	r2, [sp, #4]
 8004412:	4605      	mov	r5, r0
 8004414:	b930      	cbnz	r0, 8004424 <_calloc_r+0x24>
 8004416:	4628      	mov	r0, r5
 8004418:	b003      	add	sp, #12
 800441a:	bd30      	pop	{r4, r5, pc}
 800441c:	220c      	movs	r2, #12
 800441e:	6002      	str	r2, [r0, #0]
 8004420:	2500      	movs	r5, #0
 8004422:	e7f8      	b.n	8004416 <_calloc_r+0x16>
 8004424:	4621      	mov	r1, r4
 8004426:	f7ff ffe3 	bl	80043f0 <memset>
 800442a:	e7f4      	b.n	8004416 <_calloc_r+0x16>

0800442c <sbrk_aligned>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	4e0e      	ldr	r6, [pc, #56]	; (8004468 <sbrk_aligned+0x3c>)
 8004430:	460c      	mov	r4, r1
 8004432:	6831      	ldr	r1, [r6, #0]
 8004434:	4605      	mov	r5, r0
 8004436:	b911      	cbnz	r1, 800443e <sbrk_aligned+0x12>
 8004438:	f000 f88c 	bl	8004554 <_sbrk_r>
 800443c:	6030      	str	r0, [r6, #0]
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f887 	bl	8004554 <_sbrk_r>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	d00a      	beq.n	8004460 <sbrk_aligned+0x34>
 800444a:	1cc4      	adds	r4, r0, #3
 800444c:	f024 0403 	bic.w	r4, r4, #3
 8004450:	42a0      	cmp	r0, r4
 8004452:	d007      	beq.n	8004464 <sbrk_aligned+0x38>
 8004454:	1a21      	subs	r1, r4, r0
 8004456:	4628      	mov	r0, r5
 8004458:	f000 f87c 	bl	8004554 <_sbrk_r>
 800445c:	3001      	adds	r0, #1
 800445e:	d101      	bne.n	8004464 <sbrk_aligned+0x38>
 8004460:	f04f 34ff 	mov.w	r4, #4294967295
 8004464:	4620      	mov	r0, r4
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	20000180 	.word	0x20000180

0800446c <_malloc_r>:
 800446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004470:	1ccd      	adds	r5, r1, #3
 8004472:	f025 0503 	bic.w	r5, r5, #3
 8004476:	3508      	adds	r5, #8
 8004478:	2d0c      	cmp	r5, #12
 800447a:	bf38      	it	cc
 800447c:	250c      	movcc	r5, #12
 800447e:	2d00      	cmp	r5, #0
 8004480:	4607      	mov	r7, r0
 8004482:	db01      	blt.n	8004488 <_malloc_r+0x1c>
 8004484:	42a9      	cmp	r1, r5
 8004486:	d905      	bls.n	8004494 <_malloc_r+0x28>
 8004488:	230c      	movs	r3, #12
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	2600      	movs	r6, #0
 800448e:	4630      	mov	r0, r6
 8004490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004494:	4e2e      	ldr	r6, [pc, #184]	; (8004550 <_malloc_r+0xe4>)
 8004496:	f000 f86d 	bl	8004574 <__malloc_lock>
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	461c      	mov	r4, r3
 800449e:	bb34      	cbnz	r4, 80044ee <_malloc_r+0x82>
 80044a0:	4629      	mov	r1, r5
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7ff ffc2 	bl	800442c <sbrk_aligned>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	4604      	mov	r4, r0
 80044ac:	d14d      	bne.n	800454a <_malloc_r+0xde>
 80044ae:	6834      	ldr	r4, [r6, #0]
 80044b0:	4626      	mov	r6, r4
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	d140      	bne.n	8004538 <_malloc_r+0xcc>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	4631      	mov	r1, r6
 80044ba:	4638      	mov	r0, r7
 80044bc:	eb04 0803 	add.w	r8, r4, r3
 80044c0:	f000 f848 	bl	8004554 <_sbrk_r>
 80044c4:	4580      	cmp	r8, r0
 80044c6:	d13a      	bne.n	800453e <_malloc_r+0xd2>
 80044c8:	6821      	ldr	r1, [r4, #0]
 80044ca:	3503      	adds	r5, #3
 80044cc:	1a6d      	subs	r5, r5, r1
 80044ce:	f025 0503 	bic.w	r5, r5, #3
 80044d2:	3508      	adds	r5, #8
 80044d4:	2d0c      	cmp	r5, #12
 80044d6:	bf38      	it	cc
 80044d8:	250c      	movcc	r5, #12
 80044da:	4629      	mov	r1, r5
 80044dc:	4638      	mov	r0, r7
 80044de:	f7ff ffa5 	bl	800442c <sbrk_aligned>
 80044e2:	3001      	adds	r0, #1
 80044e4:	d02b      	beq.n	800453e <_malloc_r+0xd2>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	442b      	add	r3, r5
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	e00e      	b.n	800450c <_malloc_r+0xa0>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	1b52      	subs	r2, r2, r5
 80044f2:	d41e      	bmi.n	8004532 <_malloc_r+0xc6>
 80044f4:	2a0b      	cmp	r2, #11
 80044f6:	d916      	bls.n	8004526 <_malloc_r+0xba>
 80044f8:	1961      	adds	r1, r4, r5
 80044fa:	42a3      	cmp	r3, r4
 80044fc:	6025      	str	r5, [r4, #0]
 80044fe:	bf18      	it	ne
 8004500:	6059      	strne	r1, [r3, #4]
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	bf08      	it	eq
 8004506:	6031      	streq	r1, [r6, #0]
 8004508:	5162      	str	r2, [r4, r5]
 800450a:	604b      	str	r3, [r1, #4]
 800450c:	4638      	mov	r0, r7
 800450e:	f104 060b 	add.w	r6, r4, #11
 8004512:	f000 f835 	bl	8004580 <__malloc_unlock>
 8004516:	f026 0607 	bic.w	r6, r6, #7
 800451a:	1d23      	adds	r3, r4, #4
 800451c:	1af2      	subs	r2, r6, r3
 800451e:	d0b6      	beq.n	800448e <_malloc_r+0x22>
 8004520:	1b9b      	subs	r3, r3, r6
 8004522:	50a3      	str	r3, [r4, r2]
 8004524:	e7b3      	b.n	800448e <_malloc_r+0x22>
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	42a3      	cmp	r3, r4
 800452a:	bf0c      	ite	eq
 800452c:	6032      	streq	r2, [r6, #0]
 800452e:	605a      	strne	r2, [r3, #4]
 8004530:	e7ec      	b.n	800450c <_malloc_r+0xa0>
 8004532:	4623      	mov	r3, r4
 8004534:	6864      	ldr	r4, [r4, #4]
 8004536:	e7b2      	b.n	800449e <_malloc_r+0x32>
 8004538:	4634      	mov	r4, r6
 800453a:	6876      	ldr	r6, [r6, #4]
 800453c:	e7b9      	b.n	80044b2 <_malloc_r+0x46>
 800453e:	230c      	movs	r3, #12
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4638      	mov	r0, r7
 8004544:	f000 f81c 	bl	8004580 <__malloc_unlock>
 8004548:	e7a1      	b.n	800448e <_malloc_r+0x22>
 800454a:	6025      	str	r5, [r4, #0]
 800454c:	e7de      	b.n	800450c <_malloc_r+0xa0>
 800454e:	bf00      	nop
 8004550:	2000017c 	.word	0x2000017c

08004554 <_sbrk_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d06      	ldr	r5, [pc, #24]	; (8004570 <_sbrk_r+0x1c>)
 8004558:	2300      	movs	r3, #0
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fc feb0 	bl	80012c4 <_sbrk>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_sbrk_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_sbrk_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000184 	.word	0x20000184

08004574 <__malloc_lock>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__malloc_lock+0x8>)
 8004576:	f000 b809 	b.w	800458c <__retarget_lock_acquire_recursive>
 800457a:	bf00      	nop
 800457c:	20000188 	.word	0x20000188

08004580 <__malloc_unlock>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__malloc_unlock+0x8>)
 8004582:	f000 b804 	b.w	800458e <__retarget_lock_release_recursive>
 8004586:	bf00      	nop
 8004588:	20000188 	.word	0x20000188

0800458c <__retarget_lock_acquire_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_release_recursive>:
 800458e:	4770      	bx	lr

08004590 <pow>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	ed2d 8b02 	vpush	{d8}
 8004596:	eeb0 8a40 	vmov.f32	s16, s0
 800459a:	eef0 8a60 	vmov.f32	s17, s1
 800459e:	ec55 4b11 	vmov	r4, r5, d1
 80045a2:	f000 f865 	bl	8004670 <__ieee754_pow>
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	ec57 6b10 	vmov	r6, r7, d0
 80045b2:	f7fc fa5f 	bl	8000a74 <__aeabi_dcmpun>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d13b      	bne.n	8004632 <pow+0xa2>
 80045ba:	ec51 0b18 	vmov	r0, r1, d8
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	f7fc fa25 	bl	8000a10 <__aeabi_dcmpeq>
 80045c6:	b1b8      	cbz	r0, 80045f8 <pow+0x68>
 80045c8:	2200      	movs	r2, #0
 80045ca:	2300      	movs	r3, #0
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fc fa1e 	bl	8000a10 <__aeabi_dcmpeq>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d146      	bne.n	8004666 <pow+0xd6>
 80045d8:	ec45 4b10 	vmov	d0, r4, r5
 80045dc:	f000 fe61 	bl	80052a2 <finite>
 80045e0:	b338      	cbz	r0, 8004632 <pow+0xa2>
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fc fa1b 	bl	8000a24 <__aeabi_dcmplt>
 80045ee:	b300      	cbz	r0, 8004632 <pow+0xa2>
 80045f0:	f7ff fed4 	bl	800439c <__errno>
 80045f4:	2322      	movs	r3, #34	; 0x22
 80045f6:	e01b      	b.n	8004630 <pow+0xa0>
 80045f8:	ec47 6b10 	vmov	d0, r6, r7
 80045fc:	f000 fe51 	bl	80052a2 <finite>
 8004600:	b9e0      	cbnz	r0, 800463c <pow+0xac>
 8004602:	eeb0 0a48 	vmov.f32	s0, s16
 8004606:	eef0 0a68 	vmov.f32	s1, s17
 800460a:	f000 fe4a 	bl	80052a2 <finite>
 800460e:	b1a8      	cbz	r0, 800463c <pow+0xac>
 8004610:	ec45 4b10 	vmov	d0, r4, r5
 8004614:	f000 fe45 	bl	80052a2 <finite>
 8004618:	b180      	cbz	r0, 800463c <pow+0xac>
 800461a:	4632      	mov	r2, r6
 800461c:	463b      	mov	r3, r7
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fc fa27 	bl	8000a74 <__aeabi_dcmpun>
 8004626:	2800      	cmp	r0, #0
 8004628:	d0e2      	beq.n	80045f0 <pow+0x60>
 800462a:	f7ff feb7 	bl	800439c <__errno>
 800462e:	2321      	movs	r3, #33	; 0x21
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	ecbd 8b02 	vpop	{d8}
 8004636:	ec47 6b10 	vmov	d0, r6, r7
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4630      	mov	r0, r6
 8004642:	4639      	mov	r1, r7
 8004644:	f7fc f9e4 	bl	8000a10 <__aeabi_dcmpeq>
 8004648:	2800      	cmp	r0, #0
 800464a:	d0f2      	beq.n	8004632 <pow+0xa2>
 800464c:	eeb0 0a48 	vmov.f32	s0, s16
 8004650:	eef0 0a68 	vmov.f32	s1, s17
 8004654:	f000 fe25 	bl	80052a2 <finite>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0ea      	beq.n	8004632 <pow+0xa2>
 800465c:	ec45 4b10 	vmov	d0, r4, r5
 8004660:	f000 fe1f 	bl	80052a2 <finite>
 8004664:	e7c3      	b.n	80045ee <pow+0x5e>
 8004666:	4f01      	ldr	r7, [pc, #4]	; (800466c <pow+0xdc>)
 8004668:	2600      	movs	r6, #0
 800466a:	e7e2      	b.n	8004632 <pow+0xa2>
 800466c:	3ff00000 	.word	0x3ff00000

08004670 <__ieee754_pow>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	ed2d 8b06 	vpush	{d8-d10}
 8004678:	b089      	sub	sp, #36	; 0x24
 800467a:	ed8d 1b00 	vstr	d1, [sp]
 800467e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004682:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004686:	ea58 0102 	orrs.w	r1, r8, r2
 800468a:	ec57 6b10 	vmov	r6, r7, d0
 800468e:	d115      	bne.n	80046bc <__ieee754_pow+0x4c>
 8004690:	19b3      	adds	r3, r6, r6
 8004692:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004696:	4152      	adcs	r2, r2
 8004698:	4299      	cmp	r1, r3
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <__ieee754_pow+0x250>)
 800469c:	4193      	sbcs	r3, r2
 800469e:	f080 84d2 	bcs.w	8005046 <__ieee754_pow+0x9d6>
 80046a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046a6:	4630      	mov	r0, r6
 80046a8:	4639      	mov	r1, r7
 80046aa:	f7fb fd93 	bl	80001d4 <__adddf3>
 80046ae:	ec41 0b10 	vmov	d0, r0, r1
 80046b2:	b009      	add	sp, #36	; 0x24
 80046b4:	ecbd 8b06 	vpop	{d8-d10}
 80046b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046bc:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <__ieee754_pow+0x254>)
 80046be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80046c2:	429c      	cmp	r4, r3
 80046c4:	ee10 aa10 	vmov	sl, s0
 80046c8:	463d      	mov	r5, r7
 80046ca:	dc06      	bgt.n	80046da <__ieee754_pow+0x6a>
 80046cc:	d101      	bne.n	80046d2 <__ieee754_pow+0x62>
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d1e7      	bne.n	80046a2 <__ieee754_pow+0x32>
 80046d2:	4598      	cmp	r8, r3
 80046d4:	dc01      	bgt.n	80046da <__ieee754_pow+0x6a>
 80046d6:	d10f      	bne.n	80046f8 <__ieee754_pow+0x88>
 80046d8:	b172      	cbz	r2, 80046f8 <__ieee754_pow+0x88>
 80046da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80046de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80046e2:	ea55 050a 	orrs.w	r5, r5, sl
 80046e6:	d1dc      	bne.n	80046a2 <__ieee754_pow+0x32>
 80046e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80046ec:	18db      	adds	r3, r3, r3
 80046ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80046f2:	4152      	adcs	r2, r2
 80046f4:	429d      	cmp	r5, r3
 80046f6:	e7d0      	b.n	800469a <__ieee754_pow+0x2a>
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	da3b      	bge.n	8004774 <__ieee754_pow+0x104>
 80046fc:	4b72      	ldr	r3, [pc, #456]	; (80048c8 <__ieee754_pow+0x258>)
 80046fe:	4598      	cmp	r8, r3
 8004700:	dc51      	bgt.n	80047a6 <__ieee754_pow+0x136>
 8004702:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004706:	4598      	cmp	r8, r3
 8004708:	f340 84ac 	ble.w	8005064 <__ieee754_pow+0x9f4>
 800470c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004710:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004714:	2b14      	cmp	r3, #20
 8004716:	dd0f      	ble.n	8004738 <__ieee754_pow+0xc8>
 8004718:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800471c:	fa22 f103 	lsr.w	r1, r2, r3
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	4293      	cmp	r3, r2
 8004726:	f040 849d 	bne.w	8005064 <__ieee754_pow+0x9f4>
 800472a:	f001 0101 	and.w	r1, r1, #1
 800472e:	f1c1 0302 	rsb	r3, r1, #2
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	b182      	cbz	r2, 8004758 <__ieee754_pow+0xe8>
 8004736:	e05f      	b.n	80047f8 <__ieee754_pow+0x188>
 8004738:	2a00      	cmp	r2, #0
 800473a:	d15b      	bne.n	80047f4 <__ieee754_pow+0x184>
 800473c:	f1c3 0314 	rsb	r3, r3, #20
 8004740:	fa48 f103 	asr.w	r1, r8, r3
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	4543      	cmp	r3, r8
 800474a:	f040 8488 	bne.w	800505e <__ieee754_pow+0x9ee>
 800474e:	f001 0101 	and.w	r1, r1, #1
 8004752:	f1c1 0302 	rsb	r3, r1, #2
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <__ieee754_pow+0x25c>)
 800475a:	4598      	cmp	r8, r3
 800475c:	d132      	bne.n	80047c4 <__ieee754_pow+0x154>
 800475e:	f1b9 0f00 	cmp.w	r9, #0
 8004762:	f280 8478 	bge.w	8005056 <__ieee754_pow+0x9e6>
 8004766:	4959      	ldr	r1, [pc, #356]	; (80048cc <__ieee754_pow+0x25c>)
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	2000      	movs	r0, #0
 800476e:	f7fc f811 	bl	8000794 <__aeabi_ddiv>
 8004772:	e79c      	b.n	80046ae <__ieee754_pow+0x3e>
 8004774:	2300      	movs	r3, #0
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	2a00      	cmp	r2, #0
 800477a:	d13d      	bne.n	80047f8 <__ieee754_pow+0x188>
 800477c:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <__ieee754_pow+0x254>)
 800477e:	4598      	cmp	r8, r3
 8004780:	d1ea      	bne.n	8004758 <__ieee754_pow+0xe8>
 8004782:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004786:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800478a:	ea53 030a 	orrs.w	r3, r3, sl
 800478e:	f000 845a 	beq.w	8005046 <__ieee754_pow+0x9d6>
 8004792:	4b4f      	ldr	r3, [pc, #316]	; (80048d0 <__ieee754_pow+0x260>)
 8004794:	429c      	cmp	r4, r3
 8004796:	dd08      	ble.n	80047aa <__ieee754_pow+0x13a>
 8004798:	f1b9 0f00 	cmp.w	r9, #0
 800479c:	f2c0 8457 	blt.w	800504e <__ieee754_pow+0x9de>
 80047a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047a4:	e783      	b.n	80046ae <__ieee754_pow+0x3e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e7e5      	b.n	8004776 <__ieee754_pow+0x106>
 80047aa:	f1b9 0f00 	cmp.w	r9, #0
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	f6bf af7a 	bge.w	80046ae <__ieee754_pow+0x3e>
 80047ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80047be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80047c2:	e774      	b.n	80046ae <__ieee754_pow+0x3e>
 80047c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80047c8:	d106      	bne.n	80047d8 <__ieee754_pow+0x168>
 80047ca:	4632      	mov	r2, r6
 80047cc:	463b      	mov	r3, r7
 80047ce:	4630      	mov	r0, r6
 80047d0:	4639      	mov	r1, r7
 80047d2:	f7fb feb5 	bl	8000540 <__aeabi_dmul>
 80047d6:	e76a      	b.n	80046ae <__ieee754_pow+0x3e>
 80047d8:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <__ieee754_pow+0x264>)
 80047da:	4599      	cmp	r9, r3
 80047dc:	d10c      	bne.n	80047f8 <__ieee754_pow+0x188>
 80047de:	2d00      	cmp	r5, #0
 80047e0:	db0a      	blt.n	80047f8 <__ieee754_pow+0x188>
 80047e2:	ec47 6b10 	vmov	d0, r6, r7
 80047e6:	b009      	add	sp, #36	; 0x24
 80047e8:	ecbd 8b06 	vpop	{d8-d10}
 80047ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	f000 bc6c 	b.w	80050cc <__ieee754_sqrt>
 80047f4:	2300      	movs	r3, #0
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	ec47 6b10 	vmov	d0, r6, r7
 80047fc:	f000 fd48 	bl	8005290 <fabs>
 8004800:	ec51 0b10 	vmov	r0, r1, d0
 8004804:	f1ba 0f00 	cmp.w	sl, #0
 8004808:	d129      	bne.n	800485e <__ieee754_pow+0x1ee>
 800480a:	b124      	cbz	r4, 8004816 <__ieee754_pow+0x1a6>
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <__ieee754_pow+0x25c>)
 800480e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004812:	429a      	cmp	r2, r3
 8004814:	d123      	bne.n	800485e <__ieee754_pow+0x1ee>
 8004816:	f1b9 0f00 	cmp.w	r9, #0
 800481a:	da05      	bge.n	8004828 <__ieee754_pow+0x1b8>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	2000      	movs	r0, #0
 8004822:	492a      	ldr	r1, [pc, #168]	; (80048cc <__ieee754_pow+0x25c>)
 8004824:	f7fb ffb6 	bl	8000794 <__aeabi_ddiv>
 8004828:	2d00      	cmp	r5, #0
 800482a:	f6bf af40 	bge.w	80046ae <__ieee754_pow+0x3e>
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004834:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004838:	4323      	orrs	r3, r4
 800483a:	d108      	bne.n	800484e <__ieee754_pow+0x1de>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f7fb fcc4 	bl	80001d0 <__aeabi_dsub>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e78f      	b.n	800476e <__ieee754_pow+0xfe>
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	2b01      	cmp	r3, #1
 8004852:	f47f af2c 	bne.w	80046ae <__ieee754_pow+0x3e>
 8004856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800485a:	4619      	mov	r1, r3
 800485c:	e727      	b.n	80046ae <__ieee754_pow+0x3e>
 800485e:	0feb      	lsrs	r3, r5, #31
 8004860:	3b01      	subs	r3, #1
 8004862:	9306      	str	r3, [sp, #24]
 8004864:	9a06      	ldr	r2, [sp, #24]
 8004866:	9b04      	ldr	r3, [sp, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	d102      	bne.n	8004872 <__ieee754_pow+0x202>
 800486c:	4632      	mov	r2, r6
 800486e:	463b      	mov	r3, r7
 8004870:	e7e6      	b.n	8004840 <__ieee754_pow+0x1d0>
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <__ieee754_pow+0x268>)
 8004874:	4598      	cmp	r8, r3
 8004876:	f340 80fb 	ble.w	8004a70 <__ieee754_pow+0x400>
 800487a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800487e:	4598      	cmp	r8, r3
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <__ieee754_pow+0x260>)
 8004882:	dd0c      	ble.n	800489e <__ieee754_pow+0x22e>
 8004884:	429c      	cmp	r4, r3
 8004886:	dc0f      	bgt.n	80048a8 <__ieee754_pow+0x238>
 8004888:	f1b9 0f00 	cmp.w	r9, #0
 800488c:	da0f      	bge.n	80048ae <__ieee754_pow+0x23e>
 800488e:	2000      	movs	r0, #0
 8004890:	b009      	add	sp, #36	; 0x24
 8004892:	ecbd 8b06 	vpop	{d8-d10}
 8004896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f000 bcf0 	b.w	800527e <__math_oflow>
 800489e:	429c      	cmp	r4, r3
 80048a0:	dbf2      	blt.n	8004888 <__ieee754_pow+0x218>
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <__ieee754_pow+0x25c>)
 80048a4:	429c      	cmp	r4, r3
 80048a6:	dd19      	ble.n	80048dc <__ieee754_pow+0x26c>
 80048a8:	f1b9 0f00 	cmp.w	r9, #0
 80048ac:	dcef      	bgt.n	800488e <__ieee754_pow+0x21e>
 80048ae:	2000      	movs	r0, #0
 80048b0:	b009      	add	sp, #36	; 0x24
 80048b2:	ecbd 8b06 	vpop	{d8-d10}
 80048b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	f000 bcd7 	b.w	800526c <__math_uflow>
 80048be:	bf00      	nop
 80048c0:	fff00000 	.word	0xfff00000
 80048c4:	7ff00000 	.word	0x7ff00000
 80048c8:	433fffff 	.word	0x433fffff
 80048cc:	3ff00000 	.word	0x3ff00000
 80048d0:	3fefffff 	.word	0x3fefffff
 80048d4:	3fe00000 	.word	0x3fe00000
 80048d8:	41e00000 	.word	0x41e00000
 80048dc:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <__ieee754_pow+0x3f0>)
 80048de:	2200      	movs	r2, #0
 80048e0:	f7fb fc76 	bl	80001d0 <__aeabi_dsub>
 80048e4:	a354      	add	r3, pc, #336	; (adr r3, 8004a38 <__ieee754_pow+0x3c8>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	4604      	mov	r4, r0
 80048ec:	460d      	mov	r5, r1
 80048ee:	f7fb fe27 	bl	8000540 <__aeabi_dmul>
 80048f2:	a353      	add	r3, pc, #332	; (adr r3, 8004a40 <__ieee754_pow+0x3d0>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	4606      	mov	r6, r0
 80048fa:	460f      	mov	r7, r1
 80048fc:	4620      	mov	r0, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	f7fb fe1e 	bl	8000540 <__aeabi_dmul>
 8004904:	4b57      	ldr	r3, [pc, #348]	; (8004a64 <__ieee754_pow+0x3f4>)
 8004906:	4682      	mov	sl, r0
 8004908:	468b      	mov	fp, r1
 800490a:	2200      	movs	r2, #0
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fe16 	bl	8000540 <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	a14b      	add	r1, pc, #300	; (adr r1, 8004a48 <__ieee754_pow+0x3d8>)
 800491a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800491e:	f7fb fc57 	bl	80001d0 <__aeabi_dsub>
 8004922:	4622      	mov	r2, r4
 8004924:	462b      	mov	r3, r5
 8004926:	f7fb fe0b 	bl	8000540 <__aeabi_dmul>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	2000      	movs	r0, #0
 8004930:	494d      	ldr	r1, [pc, #308]	; (8004a68 <__ieee754_pow+0x3f8>)
 8004932:	f7fb fc4d 	bl	80001d0 <__aeabi_dsub>
 8004936:	4622      	mov	r2, r4
 8004938:	4680      	mov	r8, r0
 800493a:	4689      	mov	r9, r1
 800493c:	462b      	mov	r3, r5
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	f7fb fdfd 	bl	8000540 <__aeabi_dmul>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fb fdf7 	bl	8000540 <__aeabi_dmul>
 8004952:	a33f      	add	r3, pc, #252	; (adr r3, 8004a50 <__ieee754_pow+0x3e0>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fdf2 	bl	8000540 <__aeabi_dmul>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4650      	mov	r0, sl
 8004962:	4659      	mov	r1, fp
 8004964:	f7fb fc34 	bl	80001d0 <__aeabi_dsub>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4680      	mov	r8, r0
 800496e:	4689      	mov	r9, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fc2e 	bl	80001d4 <__adddf3>
 8004978:	2000      	movs	r0, #0
 800497a:	4632      	mov	r2, r6
 800497c:	463b      	mov	r3, r7
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	f7fb fc25 	bl	80001d0 <__aeabi_dsub>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fb fc1f 	bl	80001d0 <__aeabi_dsub>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	9a06      	ldr	r2, [sp, #24]
 8004996:	3b01      	subs	r3, #1
 8004998:	4313      	orrs	r3, r2
 800499a:	4682      	mov	sl, r0
 800499c:	468b      	mov	fp, r1
 800499e:	f040 81e7 	bne.w	8004d70 <__ieee754_pow+0x700>
 80049a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004a58 <__ieee754_pow+0x3e8>
 80049a6:	eeb0 8a47 	vmov.f32	s16, s14
 80049aa:	eef0 8a67 	vmov.f32	s17, s15
 80049ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80049b2:	2600      	movs	r6, #0
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049bc:	f7fb fc08 	bl	80001d0 <__aeabi_dsub>
 80049c0:	4622      	mov	r2, r4
 80049c2:	462b      	mov	r3, r5
 80049c4:	f7fb fdbc 	bl	8000540 <__aeabi_dmul>
 80049c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049cc:	4680      	mov	r8, r0
 80049ce:	4689      	mov	r9, r1
 80049d0:	4650      	mov	r0, sl
 80049d2:	4659      	mov	r1, fp
 80049d4:	f7fb fdb4 	bl	8000540 <__aeabi_dmul>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4640      	mov	r0, r8
 80049de:	4649      	mov	r1, r9
 80049e0:	f7fb fbf8 	bl	80001d4 <__adddf3>
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	4680      	mov	r8, r0
 80049ea:	4689      	mov	r9, r1
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fda6 	bl	8000540 <__aeabi_dmul>
 80049f4:	460b      	mov	r3, r1
 80049f6:	4604      	mov	r4, r0
 80049f8:	460d      	mov	r5, r1
 80049fa:	4602      	mov	r2, r0
 80049fc:	4649      	mov	r1, r9
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7fb fbe8 	bl	80001d4 <__adddf3>
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <__ieee754_pow+0x3fc>)
 8004a06:	4299      	cmp	r1, r3
 8004a08:	ec45 4b19 	vmov	d9, r4, r5
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	468b      	mov	fp, r1
 8004a12:	f340 82f1 	ble.w	8004ff8 <__ieee754_pow+0x988>
 8004a16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004a1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004a1e:	4303      	orrs	r3, r0
 8004a20:	f000 81e4 	beq.w	8004dec <__ieee754_pow+0x77c>
 8004a24:	ec51 0b18 	vmov	r0, r1, d8
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f7fb fffa 	bl	8000a24 <__aeabi_dcmplt>
 8004a30:	3800      	subs	r0, #0
 8004a32:	bf18      	it	ne
 8004a34:	2001      	movne	r0, #1
 8004a36:	e72b      	b.n	8004890 <__ieee754_pow+0x220>
 8004a38:	60000000 	.word	0x60000000
 8004a3c:	3ff71547 	.word	0x3ff71547
 8004a40:	f85ddf44 	.word	0xf85ddf44
 8004a44:	3e54ae0b 	.word	0x3e54ae0b
 8004a48:	55555555 	.word	0x55555555
 8004a4c:	3fd55555 	.word	0x3fd55555
 8004a50:	652b82fe 	.word	0x652b82fe
 8004a54:	3ff71547 	.word	0x3ff71547
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	bff00000 	.word	0xbff00000
 8004a60:	3ff00000 	.word	0x3ff00000
 8004a64:	3fd00000 	.word	0x3fd00000
 8004a68:	3fe00000 	.word	0x3fe00000
 8004a6c:	408fffff 	.word	0x408fffff
 8004a70:	4bd5      	ldr	r3, [pc, #852]	; (8004dc8 <__ieee754_pow+0x758>)
 8004a72:	402b      	ands	r3, r5
 8004a74:	2200      	movs	r2, #0
 8004a76:	b92b      	cbnz	r3, 8004a84 <__ieee754_pow+0x414>
 8004a78:	4bd4      	ldr	r3, [pc, #848]	; (8004dcc <__ieee754_pow+0x75c>)
 8004a7a:	f7fb fd61 	bl	8000540 <__aeabi_dmul>
 8004a7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004a82:	460c      	mov	r4, r1
 8004a84:	1523      	asrs	r3, r4, #20
 8004a86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a8a:	4413      	add	r3, r2
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	4bd0      	ldr	r3, [pc, #832]	; (8004dd0 <__ieee754_pow+0x760>)
 8004a90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004a94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004a9e:	dd08      	ble.n	8004ab2 <__ieee754_pow+0x442>
 8004aa0:	4bcc      	ldr	r3, [pc, #816]	; (8004dd4 <__ieee754_pow+0x764>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	f340 8162 	ble.w	8004d6c <__ieee754_pow+0x6fc>
 8004aa8:	9b05      	ldr	r3, [sp, #20]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	9305      	str	r3, [sp, #20]
 8004aae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004ab2:	2400      	movs	r4, #0
 8004ab4:	00e3      	lsls	r3, r4, #3
 8004ab6:	9307      	str	r3, [sp, #28]
 8004ab8:	4bc7      	ldr	r3, [pc, #796]	; (8004dd8 <__ieee754_pow+0x768>)
 8004aba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004abe:	ed93 7b00 	vldr	d7, [r3]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	ec53 2b17 	vmov	r2, r3, d7
 8004ac8:	eeb0 9a47 	vmov.f32	s18, s14
 8004acc:	eef0 9a67 	vmov.f32	s19, s15
 8004ad0:	4682      	mov	sl, r0
 8004ad2:	f7fb fb7d 	bl	80001d0 <__aeabi_dsub>
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460f      	mov	r7, r1
 8004adc:	462b      	mov	r3, r5
 8004ade:	ec51 0b19 	vmov	r0, r1, d9
 8004ae2:	f7fb fb77 	bl	80001d4 <__adddf3>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	2000      	movs	r0, #0
 8004aec:	49bb      	ldr	r1, [pc, #748]	; (8004ddc <__ieee754_pow+0x76c>)
 8004aee:	f7fb fe51 	bl	8000794 <__aeabi_ddiv>
 8004af2:	ec41 0b1a 	vmov	d10, r0, r1
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb fd1f 	bl	8000540 <__aeabi_dmul>
 8004b02:	2300      	movs	r3, #0
 8004b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b0e:	46ab      	mov	fp, r5
 8004b10:	106d      	asrs	r5, r5, #1
 8004b12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004b16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004b1a:	ec41 0b18 	vmov	d8, r0, r1
 8004b1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004b22:	2200      	movs	r2, #0
 8004b24:	4640      	mov	r0, r8
 8004b26:	4649      	mov	r1, r9
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	f7fb fd08 	bl	8000540 <__aeabi_dmul>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4630      	mov	r0, r6
 8004b36:	4639      	mov	r1, r7
 8004b38:	f7fb fb4a 	bl	80001d0 <__aeabi_dsub>
 8004b3c:	ec53 2b19 	vmov	r2, r3, d9
 8004b40:	4606      	mov	r6, r0
 8004b42:	460f      	mov	r7, r1
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f7fb fb42 	bl	80001d0 <__aeabi_dsub>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4650      	mov	r0, sl
 8004b52:	4659      	mov	r1, fp
 8004b54:	f7fb fb3c 	bl	80001d0 <__aeabi_dsub>
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f7fb fcf0 	bl	8000540 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb fb32 	bl	80001d0 <__aeabi_dsub>
 8004b6c:	ec53 2b1a 	vmov	r2, r3, d10
 8004b70:	f7fb fce6 	bl	8000540 <__aeabi_dmul>
 8004b74:	ec53 2b18 	vmov	r2, r3, d8
 8004b78:	ec41 0b19 	vmov	d9, r0, r1
 8004b7c:	ec51 0b18 	vmov	r0, r1, d8
 8004b80:	f7fb fcde 	bl	8000540 <__aeabi_dmul>
 8004b84:	a37c      	add	r3, pc, #496	; (adr r3, 8004d78 <__ieee754_pow+0x708>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	460d      	mov	r5, r1
 8004b8e:	f7fb fcd7 	bl	8000540 <__aeabi_dmul>
 8004b92:	a37b      	add	r3, pc, #492	; (adr r3, 8004d80 <__ieee754_pow+0x710>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fb1c 	bl	80001d4 <__adddf3>
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	f7fb fcce 	bl	8000540 <__aeabi_dmul>
 8004ba4:	a378      	add	r3, pc, #480	; (adr r3, 8004d88 <__ieee754_pow+0x718>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fb13 	bl	80001d4 <__adddf3>
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f7fb fcc5 	bl	8000540 <__aeabi_dmul>
 8004bb6:	a376      	add	r3, pc, #472	; (adr r3, 8004d90 <__ieee754_pow+0x720>)
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f7fb fb0a 	bl	80001d4 <__adddf3>
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	462b      	mov	r3, r5
 8004bc4:	f7fb fcbc 	bl	8000540 <__aeabi_dmul>
 8004bc8:	a373      	add	r3, pc, #460	; (adr r3, 8004d98 <__ieee754_pow+0x728>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fb01 	bl	80001d4 <__adddf3>
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	f7fb fcb3 	bl	8000540 <__aeabi_dmul>
 8004bda:	a371      	add	r3, pc, #452	; (adr r3, 8004da0 <__ieee754_pow+0x730>)
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f7fb faf8 	bl	80001d4 <__adddf3>
 8004be4:	4622      	mov	r2, r4
 8004be6:	4606      	mov	r6, r0
 8004be8:	460f      	mov	r7, r1
 8004bea:	462b      	mov	r3, r5
 8004bec:	4620      	mov	r0, r4
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f7fb fca6 	bl	8000540 <__aeabi_dmul>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f7fb fca0 	bl	8000540 <__aeabi_dmul>
 8004c00:	4642      	mov	r2, r8
 8004c02:	4604      	mov	r4, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	464b      	mov	r3, r9
 8004c08:	ec51 0b18 	vmov	r0, r1, d8
 8004c0c:	f7fb fae2 	bl	80001d4 <__adddf3>
 8004c10:	ec53 2b19 	vmov	r2, r3, d9
 8004c14:	f7fb fc94 	bl	8000540 <__aeabi_dmul>
 8004c18:	4622      	mov	r2, r4
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	f7fb fada 	bl	80001d4 <__adddf3>
 8004c20:	4642      	mov	r2, r8
 8004c22:	4682      	mov	sl, r0
 8004c24:	468b      	mov	fp, r1
 8004c26:	464b      	mov	r3, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	f7fb fc88 	bl	8000540 <__aeabi_dmul>
 8004c30:	4b6b      	ldr	r3, [pc, #428]	; (8004de0 <__ieee754_pow+0x770>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	4606      	mov	r6, r0
 8004c36:	460f      	mov	r7, r1
 8004c38:	f7fb facc 	bl	80001d4 <__adddf3>
 8004c3c:	4652      	mov	r2, sl
 8004c3e:	465b      	mov	r3, fp
 8004c40:	f7fb fac8 	bl	80001d4 <__adddf3>
 8004c44:	2000      	movs	r0, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	460d      	mov	r5, r1
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f7fb fc75 	bl	8000540 <__aeabi_dmul>
 8004c56:	4b62      	ldr	r3, [pc, #392]	; (8004de0 <__ieee754_pow+0x770>)
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7fb fab5 	bl	80001d0 <__aeabi_dsub>
 8004c66:	4632      	mov	r2, r6
 8004c68:	463b      	mov	r3, r7
 8004c6a:	f7fb fab1 	bl	80001d0 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4650      	mov	r0, sl
 8004c74:	4659      	mov	r1, fp
 8004c76:	f7fb faab 	bl	80001d0 <__aeabi_dsub>
 8004c7a:	ec53 2b18 	vmov	r2, r3, d8
 8004c7e:	f7fb fc5f 	bl	8000540 <__aeabi_dmul>
 8004c82:	4622      	mov	r2, r4
 8004c84:	4606      	mov	r6, r0
 8004c86:	460f      	mov	r7, r1
 8004c88:	462b      	mov	r3, r5
 8004c8a:	ec51 0b19 	vmov	r0, r1, d9
 8004c8e:	f7fb fc57 	bl	8000540 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4630      	mov	r0, r6
 8004c98:	4639      	mov	r1, r7
 8004c9a:	f7fb fa9b 	bl	80001d4 <__adddf3>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	460f      	mov	r7, r1
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	4649      	mov	r1, r9
 8004caa:	f7fb fa93 	bl	80001d4 <__adddf3>
 8004cae:	a33e      	add	r3, pc, #248	; (adr r3, 8004da8 <__ieee754_pow+0x738>)
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	f7fb fc41 	bl	8000540 <__aeabi_dmul>
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	ec41 0b18 	vmov	d8, r0, r1
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fa81 	bl	80001d0 <__aeabi_dsub>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f7fb fa7b 	bl	80001d0 <__aeabi_dsub>
 8004cda:	a335      	add	r3, pc, #212	; (adr r3, 8004db0 <__ieee754_pow+0x740>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fc2e 	bl	8000540 <__aeabi_dmul>
 8004ce4:	a334      	add	r3, pc, #208	; (adr r3, 8004db8 <__ieee754_pow+0x748>)
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	4606      	mov	r6, r0
 8004cec:	460f      	mov	r7, r1
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fc25 	bl	8000540 <__aeabi_dmul>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb fa69 	bl	80001d4 <__adddf3>
 8004d02:	9a07      	ldr	r2, [sp, #28]
 8004d04:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <__ieee754_pow+0x774>)
 8004d06:	4413      	add	r3, r2
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fa62 	bl	80001d4 <__adddf3>
 8004d10:	4682      	mov	sl, r0
 8004d12:	9805      	ldr	r0, [sp, #20]
 8004d14:	468b      	mov	fp, r1
 8004d16:	f7fb fba9 	bl	800046c <__aeabi_i2d>
 8004d1a:	9a07      	ldr	r2, [sp, #28]
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <__ieee754_pow+0x778>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d24:	4606      	mov	r6, r0
 8004d26:	460f      	mov	r7, r1
 8004d28:	4652      	mov	r2, sl
 8004d2a:	465b      	mov	r3, fp
 8004d2c:	ec51 0b18 	vmov	r0, r1, d8
 8004d30:	f7fb fa50 	bl	80001d4 <__adddf3>
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	f7fb fa4c 	bl	80001d4 <__adddf3>
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	463b      	mov	r3, r7
 8004d40:	f7fb fa48 	bl	80001d4 <__adddf3>
 8004d44:	2000      	movs	r0, #0
 8004d46:	4632      	mov	r2, r6
 8004d48:	463b      	mov	r3, r7
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	460d      	mov	r5, r1
 8004d4e:	f7fb fa3f 	bl	80001d0 <__aeabi_dsub>
 8004d52:	4642      	mov	r2, r8
 8004d54:	464b      	mov	r3, r9
 8004d56:	f7fb fa3b 	bl	80001d0 <__aeabi_dsub>
 8004d5a:	ec53 2b18 	vmov	r2, r3, d8
 8004d5e:	f7fb fa37 	bl	80001d0 <__aeabi_dsub>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4650      	mov	r0, sl
 8004d68:	4659      	mov	r1, fp
 8004d6a:	e610      	b.n	800498e <__ieee754_pow+0x31e>
 8004d6c:	2401      	movs	r4, #1
 8004d6e:	e6a1      	b.n	8004ab4 <__ieee754_pow+0x444>
 8004d70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004dc0 <__ieee754_pow+0x750>
 8004d74:	e617      	b.n	80049a6 <__ieee754_pow+0x336>
 8004d76:	bf00      	nop
 8004d78:	4a454eef 	.word	0x4a454eef
 8004d7c:	3fca7e28 	.word	0x3fca7e28
 8004d80:	93c9db65 	.word	0x93c9db65
 8004d84:	3fcd864a 	.word	0x3fcd864a
 8004d88:	a91d4101 	.word	0xa91d4101
 8004d8c:	3fd17460 	.word	0x3fd17460
 8004d90:	518f264d 	.word	0x518f264d
 8004d94:	3fd55555 	.word	0x3fd55555
 8004d98:	db6fabff 	.word	0xdb6fabff
 8004d9c:	3fdb6db6 	.word	0x3fdb6db6
 8004da0:	33333303 	.word	0x33333303
 8004da4:	3fe33333 	.word	0x3fe33333
 8004da8:	e0000000 	.word	0xe0000000
 8004dac:	3feec709 	.word	0x3feec709
 8004db0:	dc3a03fd 	.word	0xdc3a03fd
 8004db4:	3feec709 	.word	0x3feec709
 8004db8:	145b01f5 	.word	0x145b01f5
 8004dbc:	be3e2fe0 	.word	0xbe3e2fe0
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	3ff00000 	.word	0x3ff00000
 8004dc8:	7ff00000 	.word	0x7ff00000
 8004dcc:	43400000 	.word	0x43400000
 8004dd0:	0003988e 	.word	0x0003988e
 8004dd4:	000bb679 	.word	0x000bb679
 8004dd8:	08005418 	.word	0x08005418
 8004ddc:	3ff00000 	.word	0x3ff00000
 8004de0:	40080000 	.word	0x40080000
 8004de4:	08005438 	.word	0x08005438
 8004de8:	08005428 	.word	0x08005428
 8004dec:	a3b5      	add	r3, pc, #724	; (adr r3, 80050c4 <__ieee754_pow+0xa54>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb f9ed 	bl	80001d4 <__adddf3>
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	ec41 0b1a 	vmov	d10, r0, r1
 8004e00:	462b      	mov	r3, r5
 8004e02:	4630      	mov	r0, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb f9e3 	bl	80001d0 <__aeabi_dsub>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	ec51 0b1a 	vmov	r0, r1, d10
 8004e12:	f7fb fe25 	bl	8000a60 <__aeabi_dcmpgt>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f47f ae04 	bne.w	8004a24 <__ieee754_pow+0x3b4>
 8004e1c:	4aa4      	ldr	r2, [pc, #656]	; (80050b0 <__ieee754_pow+0xa40>)
 8004e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f340 8108 	ble.w	8005038 <__ieee754_pow+0x9c8>
 8004e28:	151b      	asrs	r3, r3, #20
 8004e2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004e2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e32:	fa4a f303 	asr.w	r3, sl, r3
 8004e36:	445b      	add	r3, fp
 8004e38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004e3c:	4e9d      	ldr	r6, [pc, #628]	; (80050b4 <__ieee754_pow+0xa44>)
 8004e3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004e42:	4116      	asrs	r6, r2
 8004e44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004e48:	2000      	movs	r0, #0
 8004e4a:	ea23 0106 	bic.w	r1, r3, r6
 8004e4e:	f1c2 0214 	rsb	r2, r2, #20
 8004e52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004e56:	fa4a fa02 	asr.w	sl, sl, r2
 8004e5a:	f1bb 0f00 	cmp.w	fp, #0
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4620      	mov	r0, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	bfb8      	it	lt
 8004e68:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e6c:	f7fb f9b0 	bl	80001d0 <__aeabi_dsub>
 8004e70:	ec41 0b19 	vmov	d9, r0, r1
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	ec51 0b19 	vmov	r0, r1, d9
 8004e7c:	f7fb f9aa 	bl	80001d4 <__adddf3>
 8004e80:	a37b      	add	r3, pc, #492	; (adr r3, 8005070 <__ieee754_pow+0xa00>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	2000      	movs	r0, #0
 8004e88:	4604      	mov	r4, r0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	f7fb fb58 	bl	8000540 <__aeabi_dmul>
 8004e90:	ec53 2b19 	vmov	r2, r3, d9
 8004e94:	4606      	mov	r6, r0
 8004e96:	460f      	mov	r7, r1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb f998 	bl	80001d0 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	f7fb f992 	bl	80001d0 <__aeabi_dsub>
 8004eac:	a372      	add	r3, pc, #456	; (adr r3, 8005078 <__ieee754_pow+0xa08>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f7fb fb45 	bl	8000540 <__aeabi_dmul>
 8004eb6:	a372      	add	r3, pc, #456	; (adr r3, 8005080 <__ieee754_pow+0xa10>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4689      	mov	r9, r1
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb fb3c 	bl	8000540 <__aeabi_dmul>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb f980 	bl	80001d4 <__adddf3>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f7fb f978 	bl	80001d4 <__adddf3>
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
 8004eec:	f7fb f970 	bl	80001d0 <__aeabi_dsub>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f7fb f96a 	bl	80001d0 <__aeabi_dsub>
 8004efc:	4642      	mov	r2, r8
 8004efe:	4606      	mov	r6, r0
 8004f00:	460f      	mov	r7, r1
 8004f02:	464b      	mov	r3, r9
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	a35e      	add	r3, pc, #376	; (adr r3, 8005088 <__ieee754_pow+0xa18>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	f7fb fb13 	bl	8000540 <__aeabi_dmul>
 8004f1a:	a35d      	add	r3, pc, #372	; (adr r3, 8005090 <__ieee754_pow+0xa20>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb f956 	bl	80001d0 <__aeabi_dsub>
 8004f24:	4622      	mov	r2, r4
 8004f26:	462b      	mov	r3, r5
 8004f28:	f7fb fb0a 	bl	8000540 <__aeabi_dmul>
 8004f2c:	a35a      	add	r3, pc, #360	; (adr r3, 8005098 <__ieee754_pow+0xa28>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f7fb f94f 	bl	80001d4 <__adddf3>
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f7fb fb01 	bl	8000540 <__aeabi_dmul>
 8004f3e:	a358      	add	r3, pc, #352	; (adr r3, 80050a0 <__ieee754_pow+0xa30>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb f944 	bl	80001d0 <__aeabi_dsub>
 8004f48:	4622      	mov	r2, r4
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f7fb faf8 	bl	8000540 <__aeabi_dmul>
 8004f50:	a355      	add	r3, pc, #340	; (adr r3, 80050a8 <__ieee754_pow+0xa38>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f7fb f93d 	bl	80001d4 <__adddf3>
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f931 	bl	80001d0 <__aeabi_dsub>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	460d      	mov	r5, r1
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb fae1 	bl	8000540 <__aeabi_dmul>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	ec41 0b19 	vmov	d9, r0, r1
 8004f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	ec51 0b19 	vmov	r0, r1, d9
 8004f98:	f7fb fbfc 	bl	8000794 <__aeabi_ddiv>
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	f7fb faca 	bl	8000540 <__aeabi_dmul>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb f910 	bl	80001d4 <__adddf3>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb f908 	bl	80001d0 <__aeabi_dsub>
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	f7fb f904 	bl	80001d0 <__aeabi_dsub>
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4602      	mov	r2, r0
 8004fcc:	493a      	ldr	r1, [pc, #232]	; (80050b8 <__ieee754_pow+0xa48>)
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_dsub>
 8004fd4:	ec41 0b10 	vmov	d0, r0, r1
 8004fd8:	ee10 3a90 	vmov	r3, s1
 8004fdc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe4:	da2b      	bge.n	800503e <__ieee754_pow+0x9ce>
 8004fe6:	4650      	mov	r0, sl
 8004fe8:	f000 f966 	bl	80052b8 <scalbn>
 8004fec:	ec51 0b10 	vmov	r0, r1, d0
 8004ff0:	ec53 2b18 	vmov	r2, r3, d8
 8004ff4:	f7ff bbed 	b.w	80047d2 <__ieee754_pow+0x162>
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <__ieee754_pow+0xa4c>)
 8004ffa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004ffe:	429e      	cmp	r6, r3
 8005000:	f77f af0c 	ble.w	8004e1c <__ieee754_pow+0x7ac>
 8005004:	4b2e      	ldr	r3, [pc, #184]	; (80050c0 <__ieee754_pow+0xa50>)
 8005006:	440b      	add	r3, r1
 8005008:	4303      	orrs	r3, r0
 800500a:	d009      	beq.n	8005020 <__ieee754_pow+0x9b0>
 800500c:	ec51 0b18 	vmov	r0, r1, d8
 8005010:	2200      	movs	r2, #0
 8005012:	2300      	movs	r3, #0
 8005014:	f7fb fd06 	bl	8000a24 <__aeabi_dcmplt>
 8005018:	3800      	subs	r0, #0
 800501a:	bf18      	it	ne
 800501c:	2001      	movne	r0, #1
 800501e:	e447      	b.n	80048b0 <__ieee754_pow+0x240>
 8005020:	4622      	mov	r2, r4
 8005022:	462b      	mov	r3, r5
 8005024:	f7fb f8d4 	bl	80001d0 <__aeabi_dsub>
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	f7fb fd0e 	bl	8000a4c <__aeabi_dcmpge>
 8005030:	2800      	cmp	r0, #0
 8005032:	f43f aef3 	beq.w	8004e1c <__ieee754_pow+0x7ac>
 8005036:	e7e9      	b.n	800500c <__ieee754_pow+0x99c>
 8005038:	f04f 0a00 	mov.w	sl, #0
 800503c:	e71a      	b.n	8004e74 <__ieee754_pow+0x804>
 800503e:	ec51 0b10 	vmov	r0, r1, d0
 8005042:	4619      	mov	r1, r3
 8005044:	e7d4      	b.n	8004ff0 <__ieee754_pow+0x980>
 8005046:	491c      	ldr	r1, [pc, #112]	; (80050b8 <__ieee754_pow+0xa48>)
 8005048:	2000      	movs	r0, #0
 800504a:	f7ff bb30 	b.w	80046ae <__ieee754_pow+0x3e>
 800504e:	2000      	movs	r0, #0
 8005050:	2100      	movs	r1, #0
 8005052:	f7ff bb2c 	b.w	80046ae <__ieee754_pow+0x3e>
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7ff bb28 	b.w	80046ae <__ieee754_pow+0x3e>
 800505e:	9204      	str	r2, [sp, #16]
 8005060:	f7ff bb7a 	b.w	8004758 <__ieee754_pow+0xe8>
 8005064:	2300      	movs	r3, #0
 8005066:	f7ff bb64 	b.w	8004732 <__ieee754_pow+0xc2>
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
 8005070:	00000000 	.word	0x00000000
 8005074:	3fe62e43 	.word	0x3fe62e43
 8005078:	fefa39ef 	.word	0xfefa39ef
 800507c:	3fe62e42 	.word	0x3fe62e42
 8005080:	0ca86c39 	.word	0x0ca86c39
 8005084:	be205c61 	.word	0xbe205c61
 8005088:	72bea4d0 	.word	0x72bea4d0
 800508c:	3e663769 	.word	0x3e663769
 8005090:	c5d26bf1 	.word	0xc5d26bf1
 8005094:	3ebbbd41 	.word	0x3ebbbd41
 8005098:	af25de2c 	.word	0xaf25de2c
 800509c:	3f11566a 	.word	0x3f11566a
 80050a0:	16bebd93 	.word	0x16bebd93
 80050a4:	3f66c16c 	.word	0x3f66c16c
 80050a8:	5555553e 	.word	0x5555553e
 80050ac:	3fc55555 	.word	0x3fc55555
 80050b0:	3fe00000 	.word	0x3fe00000
 80050b4:	000fffff 	.word	0x000fffff
 80050b8:	3ff00000 	.word	0x3ff00000
 80050bc:	4090cbff 	.word	0x4090cbff
 80050c0:	3f6f3400 	.word	0x3f6f3400
 80050c4:	652b82fe 	.word	0x652b82fe
 80050c8:	3c971547 	.word	0x3c971547

080050cc <__ieee754_sqrt>:
 80050cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d0:	ec55 4b10 	vmov	r4, r5, d0
 80050d4:	4e55      	ldr	r6, [pc, #340]	; (800522c <__ieee754_sqrt+0x160>)
 80050d6:	43ae      	bics	r6, r5
 80050d8:	ee10 0a10 	vmov	r0, s0
 80050dc:	ee10 3a10 	vmov	r3, s0
 80050e0:	462a      	mov	r2, r5
 80050e2:	4629      	mov	r1, r5
 80050e4:	d110      	bne.n	8005108 <__ieee754_sqrt+0x3c>
 80050e6:	ee10 2a10 	vmov	r2, s0
 80050ea:	462b      	mov	r3, r5
 80050ec:	f7fb fa28 	bl	8000540 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb f86c 	bl	80001d4 <__adddf3>
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	ec45 4b10 	vmov	d0, r4, r5
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005108:	2d00      	cmp	r5, #0
 800510a:	dc10      	bgt.n	800512e <__ieee754_sqrt+0x62>
 800510c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005110:	4330      	orrs	r0, r6
 8005112:	d0f5      	beq.n	8005100 <__ieee754_sqrt+0x34>
 8005114:	b15d      	cbz	r5, 800512e <__ieee754_sqrt+0x62>
 8005116:	ee10 2a10 	vmov	r2, s0
 800511a:	462b      	mov	r3, r5
 800511c:	ee10 0a10 	vmov	r0, s0
 8005120:	f7fb f856 	bl	80001d0 <__aeabi_dsub>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	f7fb fb34 	bl	8000794 <__aeabi_ddiv>
 800512c:	e7e6      	b.n	80050fc <__ieee754_sqrt+0x30>
 800512e:	1512      	asrs	r2, r2, #20
 8005130:	d074      	beq.n	800521c <__ieee754_sqrt+0x150>
 8005132:	07d4      	lsls	r4, r2, #31
 8005134:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005138:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800513c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005140:	bf5e      	ittt	pl
 8005142:	0fda      	lsrpl	r2, r3, #31
 8005144:	005b      	lslpl	r3, r3, #1
 8005146:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800514a:	2400      	movs	r4, #0
 800514c:	0fda      	lsrs	r2, r3, #31
 800514e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005152:	107f      	asrs	r7, r7, #1
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2516      	movs	r5, #22
 8005158:	4620      	mov	r0, r4
 800515a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800515e:	1886      	adds	r6, r0, r2
 8005160:	428e      	cmp	r6, r1
 8005162:	bfde      	ittt	le
 8005164:	1b89      	suble	r1, r1, r6
 8005166:	18b0      	addle	r0, r6, r2
 8005168:	18a4      	addle	r4, r4, r2
 800516a:	0049      	lsls	r1, r1, #1
 800516c:	3d01      	subs	r5, #1
 800516e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005172:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005176:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800517a:	d1f0      	bne.n	800515e <__ieee754_sqrt+0x92>
 800517c:	462a      	mov	r2, r5
 800517e:	f04f 0e20 	mov.w	lr, #32
 8005182:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005186:	4281      	cmp	r1, r0
 8005188:	eb06 0c05 	add.w	ip, r6, r5
 800518c:	dc02      	bgt.n	8005194 <__ieee754_sqrt+0xc8>
 800518e:	d113      	bne.n	80051b8 <__ieee754_sqrt+0xec>
 8005190:	459c      	cmp	ip, r3
 8005192:	d811      	bhi.n	80051b8 <__ieee754_sqrt+0xec>
 8005194:	f1bc 0f00 	cmp.w	ip, #0
 8005198:	eb0c 0506 	add.w	r5, ip, r6
 800519c:	da43      	bge.n	8005226 <__ieee754_sqrt+0x15a>
 800519e:	2d00      	cmp	r5, #0
 80051a0:	db41      	blt.n	8005226 <__ieee754_sqrt+0x15a>
 80051a2:	f100 0801 	add.w	r8, r0, #1
 80051a6:	1a09      	subs	r1, r1, r0
 80051a8:	459c      	cmp	ip, r3
 80051aa:	bf88      	it	hi
 80051ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80051b0:	eba3 030c 	sub.w	r3, r3, ip
 80051b4:	4432      	add	r2, r6
 80051b6:	4640      	mov	r0, r8
 80051b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80051bc:	f1be 0e01 	subs.w	lr, lr, #1
 80051c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80051c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051cc:	d1db      	bne.n	8005186 <__ieee754_sqrt+0xba>
 80051ce:	430b      	orrs	r3, r1
 80051d0:	d006      	beq.n	80051e0 <__ieee754_sqrt+0x114>
 80051d2:	1c50      	adds	r0, r2, #1
 80051d4:	bf13      	iteet	ne
 80051d6:	3201      	addne	r2, #1
 80051d8:	3401      	addeq	r4, #1
 80051da:	4672      	moveq	r2, lr
 80051dc:	f022 0201 	bicne.w	r2, r2, #1
 80051e0:	1063      	asrs	r3, r4, #1
 80051e2:	0852      	lsrs	r2, r2, #1
 80051e4:	07e1      	lsls	r1, r4, #31
 80051e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051ee:	bf48      	it	mi
 80051f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80051f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80051f8:	4614      	mov	r4, r2
 80051fa:	e781      	b.n	8005100 <__ieee754_sqrt+0x34>
 80051fc:	0ad9      	lsrs	r1, r3, #11
 80051fe:	3815      	subs	r0, #21
 8005200:	055b      	lsls	r3, r3, #21
 8005202:	2900      	cmp	r1, #0
 8005204:	d0fa      	beq.n	80051fc <__ieee754_sqrt+0x130>
 8005206:	02cd      	lsls	r5, r1, #11
 8005208:	d50a      	bpl.n	8005220 <__ieee754_sqrt+0x154>
 800520a:	f1c2 0420 	rsb	r4, r2, #32
 800520e:	fa23 f404 	lsr.w	r4, r3, r4
 8005212:	1e55      	subs	r5, r2, #1
 8005214:	4093      	lsls	r3, r2
 8005216:	4321      	orrs	r1, r4
 8005218:	1b42      	subs	r2, r0, r5
 800521a:	e78a      	b.n	8005132 <__ieee754_sqrt+0x66>
 800521c:	4610      	mov	r0, r2
 800521e:	e7f0      	b.n	8005202 <__ieee754_sqrt+0x136>
 8005220:	0049      	lsls	r1, r1, #1
 8005222:	3201      	adds	r2, #1
 8005224:	e7ef      	b.n	8005206 <__ieee754_sqrt+0x13a>
 8005226:	4680      	mov	r8, r0
 8005228:	e7bd      	b.n	80051a6 <__ieee754_sqrt+0xda>
 800522a:	bf00      	nop
 800522c:	7ff00000 	.word	0x7ff00000

08005230 <with_errno>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	4616      	mov	r6, r2
 8005238:	f7ff f8b0 	bl	800439c <__errno>
 800523c:	4629      	mov	r1, r5
 800523e:	6006      	str	r6, [r0, #0]
 8005240:	4620      	mov	r0, r4
 8005242:	bd70      	pop	{r4, r5, r6, pc}

08005244 <xflow>:
 8005244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005246:	4614      	mov	r4, r2
 8005248:	461d      	mov	r5, r3
 800524a:	b108      	cbz	r0, 8005250 <xflow+0xc>
 800524c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005250:	e9cd 2300 	strd	r2, r3, [sp]
 8005254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005258:	4620      	mov	r0, r4
 800525a:	4629      	mov	r1, r5
 800525c:	f7fb f970 	bl	8000540 <__aeabi_dmul>
 8005260:	2222      	movs	r2, #34	; 0x22
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005268:	f7ff bfe2 	b.w	8005230 <with_errno>

0800526c <__math_uflow>:
 800526c:	b508      	push	{r3, lr}
 800526e:	2200      	movs	r2, #0
 8005270:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005274:	f7ff ffe6 	bl	8005244 <xflow>
 8005278:	ec41 0b10 	vmov	d0, r0, r1
 800527c:	bd08      	pop	{r3, pc}

0800527e <__math_oflow>:
 800527e:	b508      	push	{r3, lr}
 8005280:	2200      	movs	r2, #0
 8005282:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005286:	f7ff ffdd 	bl	8005244 <xflow>
 800528a:	ec41 0b10 	vmov	d0, r0, r1
 800528e:	bd08      	pop	{r3, pc}

08005290 <fabs>:
 8005290:	ec51 0b10 	vmov	r0, r1, d0
 8005294:	ee10 2a10 	vmov	r2, s0
 8005298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800529c:	ec43 2b10 	vmov	d0, r2, r3
 80052a0:	4770      	bx	lr

080052a2 <finite>:
 80052a2:	b082      	sub	sp, #8
 80052a4:	ed8d 0b00 	vstr	d0, [sp]
 80052a8:	9801      	ldr	r0, [sp, #4]
 80052aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80052ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80052b2:	0fc0      	lsrs	r0, r0, #31
 80052b4:	b002      	add	sp, #8
 80052b6:	4770      	bx	lr

080052b8 <scalbn>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	ec55 4b10 	vmov	r4, r5, d0
 80052be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052c2:	4606      	mov	r6, r0
 80052c4:	462b      	mov	r3, r5
 80052c6:	b99a      	cbnz	r2, 80052f0 <scalbn+0x38>
 80052c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052cc:	4323      	orrs	r3, r4
 80052ce:	d036      	beq.n	800533e <scalbn+0x86>
 80052d0:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <scalbn+0x100>)
 80052d2:	4629      	mov	r1, r5
 80052d4:	ee10 0a10 	vmov	r0, s0
 80052d8:	2200      	movs	r2, #0
 80052da:	f7fb f931 	bl	8000540 <__aeabi_dmul>
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <scalbn+0x104>)
 80052e0:	429e      	cmp	r6, r3
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	da10      	bge.n	800530a <scalbn+0x52>
 80052e8:	a32b      	add	r3, pc, #172	; (adr r3, 8005398 <scalbn+0xe0>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	e03a      	b.n	8005366 <scalbn+0xae>
 80052f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052f4:	428a      	cmp	r2, r1
 80052f6:	d10c      	bne.n	8005312 <scalbn+0x5a>
 80052f8:	ee10 2a10 	vmov	r2, s0
 80052fc:	4620      	mov	r0, r4
 80052fe:	4629      	mov	r1, r5
 8005300:	f7fa ff68 	bl	80001d4 <__adddf3>
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	e019      	b.n	800533e <scalbn+0x86>
 800530a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800530e:	460b      	mov	r3, r1
 8005310:	3a36      	subs	r2, #54	; 0x36
 8005312:	4432      	add	r2, r6
 8005314:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005318:	428a      	cmp	r2, r1
 800531a:	dd08      	ble.n	800532e <scalbn+0x76>
 800531c:	2d00      	cmp	r5, #0
 800531e:	a120      	add	r1, pc, #128	; (adr r1, 80053a0 <scalbn+0xe8>)
 8005320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005324:	da1c      	bge.n	8005360 <scalbn+0xa8>
 8005326:	a120      	add	r1, pc, #128	; (adr r1, 80053a8 <scalbn+0xf0>)
 8005328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800532c:	e018      	b.n	8005360 <scalbn+0xa8>
 800532e:	2a00      	cmp	r2, #0
 8005330:	dd08      	ble.n	8005344 <scalbn+0x8c>
 8005332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800533a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800533e:	ec45 4b10 	vmov	d0, r4, r5
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005348:	da19      	bge.n	800537e <scalbn+0xc6>
 800534a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800534e:	429e      	cmp	r6, r3
 8005350:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005354:	dd0a      	ble.n	800536c <scalbn+0xb4>
 8005356:	a112      	add	r1, pc, #72	; (adr r1, 80053a0 <scalbn+0xe8>)
 8005358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e2      	bne.n	8005326 <scalbn+0x6e>
 8005360:	a30f      	add	r3, pc, #60	; (adr r3, 80053a0 <scalbn+0xe8>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fb f8eb 	bl	8000540 <__aeabi_dmul>
 800536a:	e7cb      	b.n	8005304 <scalbn+0x4c>
 800536c:	a10a      	add	r1, pc, #40	; (adr r1, 8005398 <scalbn+0xe0>)
 800536e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0b8      	beq.n	80052e8 <scalbn+0x30>
 8005376:	a10e      	add	r1, pc, #56	; (adr r1, 80053b0 <scalbn+0xf8>)
 8005378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800537c:	e7b4      	b.n	80052e8 <scalbn+0x30>
 800537e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005382:	3236      	adds	r2, #54	; 0x36
 8005384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800538c:	4620      	mov	r0, r4
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <scalbn+0x108>)
 8005390:	2200      	movs	r2, #0
 8005392:	e7e8      	b.n	8005366 <scalbn+0xae>
 8005394:	f3af 8000 	nop.w
 8005398:	c2f8f359 	.word	0xc2f8f359
 800539c:	01a56e1f 	.word	0x01a56e1f
 80053a0:	8800759c 	.word	0x8800759c
 80053a4:	7e37e43c 	.word	0x7e37e43c
 80053a8:	8800759c 	.word	0x8800759c
 80053ac:	fe37e43c 	.word	0xfe37e43c
 80053b0:	c2f8f359 	.word	0xc2f8f359
 80053b4:	81a56e1f 	.word	0x81a56e1f
 80053b8:	43500000 	.word	0x43500000
 80053bc:	ffff3cb0 	.word	0xffff3cb0
 80053c0:	3c900000 	.word	0x3c900000

080053c4 <_init>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr

080053d0 <_fini>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr
