
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ac  080057ac  000070b0  2**0
                  CONTENTS
  4 .ARM          00000000  080057ac  080057ac  000070b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ac  080057ac  000070b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080057b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070b0  2**0
                  CONTENTS
 10 .bss          0000033c  200000b0  200000b0  000070b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  000070b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120cc  00000000  00000000  000070e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bfb  00000000  00000000  000191ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0001bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  0001cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003069  00000000  00000000  0001d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152c6  00000000  00000000  00020845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a19fe  00000000  00000000  00035b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7509  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fdc  00000000  00000000  000d754c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000db528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800565c 	.word	0x0800565c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	0800565c 	.word	0x0800565c

080001c8 <HAL_GPIO_EXTI_Callback>:
static const int msg_size = 8;
static uint8_t ID = 8;
static bool color = TEAM_COLOR_BLUE;
static uint16_t illuminance = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  if (getMode() == MODE_MEMORY) {
 80001d2:	f000 f87b 	bl	80002cc <getMode>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d16f      	bne.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
    switch (GPIO_Pin) {
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	2b20      	cmp	r3, #32
 80001e0:	dc42      	bgt.n	8000268 <HAL_GPIO_EXTI_Callback+0xa0>
 80001e2:	2b04      	cmp	r3, #4
 80001e4:	db67      	blt.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
 80001e6:	3b04      	subs	r3, #4
 80001e8:	2b1c      	cmp	r3, #28
 80001ea:	d864      	bhi.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
 80001ec:	a201      	add	r2, pc, #4	@ (adr r2, 80001f4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	08000275 	.word	0x08000275
 80001f8:	080002b7 	.word	0x080002b7
 80001fc:	080002b7 	.word	0x080002b7
 8000200:	080002b7 	.word	0x080002b7
 8000204:	0800026f 	.word	0x0800026f
 8000208:	080002b7 	.word	0x080002b7
 800020c:	080002b7 	.word	0x080002b7
 8000210:	080002b7 	.word	0x080002b7
 8000214:	080002b7 	.word	0x080002b7
 8000218:	080002b7 	.word	0x080002b7
 800021c:	080002b7 	.word	0x080002b7
 8000220:	080002b7 	.word	0x080002b7
 8000224:	0800027b 	.word	0x0800027b
 8000228:	080002b7 	.word	0x080002b7
 800022c:	080002b7 	.word	0x080002b7
 8000230:	080002b7 	.word	0x080002b7
 8000234:	080002b7 	.word	0x080002b7
 8000238:	080002b7 	.word	0x080002b7
 800023c:	080002b7 	.word	0x080002b7
 8000240:	080002b7 	.word	0x080002b7
 8000244:	080002b7 	.word	0x080002b7
 8000248:	080002b7 	.word	0x080002b7
 800024c:	080002b7 	.word	0x080002b7
 8000250:	080002b7 	.word	0x080002b7
 8000254:	080002b7 	.word	0x080002b7
 8000258:	080002b7 	.word	0x080002b7
 800025c:	080002b7 	.word	0x080002b7
 8000260:	080002b7 	.word	0x080002b7
 8000264:	0800026f 	.word	0x0800026f
 8000268:	2b40      	cmp	r3, #64	@ 0x40
 800026a:	d014      	beq.n	8000296 <HAL_GPIO_EXTI_Callback+0xce>
    case USER_BTN2_Pin:
      color = !color;
      break;

    default:
      break;
 800026c:	e023      	b.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
      setIDSwitch();
 800026e:	f000 f84f 	bl	8000310 <setIDSwitch>
      break;
 8000272:	e023      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      setColorSwitch();
 8000274:	f000 f8a6 	bl	80003c4 <setColorSwitch>
      break;
 8000278:	e020      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      ID++;
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000284:	701a      	strb	r2, [r3, #0]
      if (ID > 15) {
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b0f      	cmp	r3, #15
 800028c:	d915      	bls.n	80002ba <HAL_GPIO_EXTI_Callback+0xf2>
        ID = 0;
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
      break;
 8000294:	e011      	b.n	80002ba <HAL_GPIO_EXTI_Callback+0xf2>
      color = !color;
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	bf14      	ite	ne
 800029e:	2301      	movne	r3, #1
 80002a0:	2300      	moveq	r3, #0
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	f083 0301 	eor.w	r3, r3, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <HAL_GPIO_EXTI_Callback+0x100>)
 80002b2:	701a      	strb	r2, [r3, #0]
      break;
 80002b4:	e002      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 80002ba:	bf00      	nop
    }
  }
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000050 	.word	0x20000050
 80002c8:	20000051 	.word	0x20000051

080002cc <getMode>:

int getMode(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80002d0:	2102      	movs	r1, #2
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d6:	f001 fdc3 	bl	8001e60 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	bd80      	pop	{r7, pc}

080002e0 <getID>:

uint8_t getID(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return ID;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <getID+0x14>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000050 	.word	0x20000050

080002f8 <getColor>:

bool getColor(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return color;
 80002fc:	4b03      	ldr	r3, [pc, #12]	@ (800030c <getColor+0x14>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000051 	.word	0x20000051

08000310 <setIDSwitch>:

void setIDSwitch(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  // Because of my bad circuit specs......
  ID = 0;
 8000314:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <setIDSwitch+0xac>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin)) << 0;
 800031a:	2108      	movs	r1, #8
 800031c:	4828      	ldr	r0, [pc, #160]	@ (80003c0 <setIDSwitch+0xb0>)
 800031e:	f001 fd9f 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	bf0c      	ite	eq
 8000328:	2301      	moveq	r3, #1
 800032a:	2300      	movne	r3, #0
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b25a      	sxtb	r2, r3
 8000330:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <setIDSwitch+0xac>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b25b      	sxtb	r3, r3
 8000336:	4313      	orrs	r3, r2
 8000338:	b25b      	sxtb	r3, r3
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <setIDSwitch+0xac>)
 800033e:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin)) << 1;
 8000340:	2120      	movs	r1, #32
 8000342:	481f      	ldr	r0, [pc, #124]	@ (80003c0 <setIDSwitch+0xb0>)
 8000344:	f001 fd8c 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d101      	bne.n	8000352 <setIDSwitch+0x42>
 800034e:	2302      	movs	r3, #2
 8000350:	e000      	b.n	8000354 <setIDSwitch+0x44>
 8000352:	2300      	movs	r3, #0
 8000354:	b25a      	sxtb	r2, r3
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <setIDSwitch+0xac>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	b25b      	sxtb	r3, r3
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <setIDSwitch+0xac>)
 8000364:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID4_GPIO_Port, ID4_Pin)) << 2;
 8000366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800036a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036e:	f001 fd77 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d101      	bne.n	800037c <setIDSwitch+0x6c>
 8000378:	2304      	movs	r3, #4
 800037a:	e000      	b.n	800037e <setIDSwitch+0x6e>
 800037c:	2300      	movs	r3, #0
 800037e:	b25a      	sxtb	r2, r3
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <setIDSwitch+0xac>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b25b      	sxtb	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b25b      	sxtb	r3, r3
 800038a:	b2da      	uxtb	r2, r3
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <setIDSwitch+0xac>)
 800038e:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID8_GPIO_Port, ID8_Pin)) << 3;
 8000390:	2110      	movs	r1, #16
 8000392:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <setIDSwitch+0xb0>)
 8000394:	f001 fd64 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d101      	bne.n	80003a2 <setIDSwitch+0x92>
 800039e:	2308      	movs	r3, #8
 80003a0:	e000      	b.n	80003a4 <setIDSwitch+0x94>
 80003a2:	2300      	movs	r3, #0
 80003a4:	b25a      	sxtb	r2, r3
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <setIDSwitch+0xac>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b02      	ldr	r3, [pc, #8]	@ (80003bc <setIDSwitch+0xac>)
 80003b4:	701a      	strb	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000050 	.word	0x20000050
 80003c0:	48000400 	.word	0x48000400

080003c4 <setColorSwitch>:

void setColorSwitch(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  color = HAL_GPIO_ReadPin(COLOR_GPIO_Port, COLOR_Pin);
 80003c8:	2104      	movs	r1, #4
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ce:	f001 fd47 	bl	8001e60 <HAL_GPIO_ReadPin>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bf14      	ite	ne
 80003d8:	2301      	movne	r3, #1
 80003da:	2300      	moveq	r3, #0
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b02      	ldr	r3, [pc, #8]	@ (80003e8 <setColorSwitch+0x24>)
 80003e0:	701a      	strb	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000051 	.word	0x20000051

080003ec <setPattern>:

/* 0     4
 *    2
 *  1   3
 */
void setPattern(uint8_t ID, uint8_t color) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
  RGB pattern[5];
  pattern[0] = *(PATTERN_ADDR[ID]->dot0);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <setPattern+0xb0>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	8811      	ldrh	r1, [r2, #0]
 800040c:	7892      	ldrb	r2, [r2, #2]
 800040e:	8019      	strh	r1, [r3, #0]
 8000410:	709a      	strb	r2, [r3, #2]
  pattern[1] = *(PATTERN_ADDR[ID]->dot1);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a21      	ldr	r2, [pc, #132]	@ (800049c <setPattern+0xb0>)
 8000416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	f107 030b 	add.w	r3, r7, #11
 8000420:	8811      	ldrh	r1, [r2, #0]
 8000422:	7892      	ldrb	r2, [r2, #2]
 8000424:	8019      	strh	r1, [r3, #0]
 8000426:	709a      	strb	r2, [r3, #2]
  pattern[3] = *(PATTERN_ADDR[ID]->dot2);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <setPattern+0xb0>)
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f107 0311 	add.w	r3, r7, #17
 8000436:	8811      	ldrh	r1, [r2, #0]
 8000438:	7892      	ldrb	r2, [r2, #2]
 800043a:	8019      	strh	r1, [r3, #0]
 800043c:	709a      	strb	r2, [r3, #2]
  pattern[4] = *(PATTERN_ADDR[ID]->dot3);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4a16      	ldr	r2, [pc, #88]	@ (800049c <setPattern+0xb0>)
 8000442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	8811      	ldrh	r1, [r2, #0]
 800044e:	7892      	ldrb	r2, [r2, #2]
 8000450:	8019      	strh	r1, [r3, #0]
 8000452:	709a      	strb	r2, [r3, #2]
  if (color == TEAM_COLOR_BLUE) {
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d107      	bne.n	800046a <setPattern+0x7e>
    pattern[2] = color_blue;
 800045a:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <setPattern+0xb4>)
 800045c:	f107 030e 	add.w	r3, r7, #14
 8000460:	8811      	ldrh	r1, [r2, #0]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	8019      	strh	r1, [r3, #0]
 8000466:	709a      	strb	r2, [r3, #2]
 8000468:	e006      	b.n	8000478 <setPattern+0x8c>
  } else {
    pattern[2] = color_yellow;
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <setPattern+0xb8>)
 800046c:	f107 030e 	add.w	r3, r7, #14
 8000470:	8811      	ldrh	r1, [r2, #0]
 8000472:	7892      	ldrb	r2, [r2, #2]
 8000474:	8019      	strh	r1, [r3, #0]
 8000476:	709a      	strb	r2, [r3, #2]
  }
  /*
   * Since data transfer to the first LED may fail,
   * the same output process is repeated.
   */
  NeoPixel_Send(pattern);
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fb7b 	bl	8000b78 <NeoPixel_Send>
  HAL_Delay(10);
 8000482:	200a      	movs	r0, #10
 8000484:	f000 ff3a 	bl	80012fc <HAL_Delay>
  NeoPixel_Send(pattern);
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fb73 	bl	8000b78 <NeoPixel_Send>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000010 	.word	0x20000010
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000004 	.word	0x20000004

080004a8 <Uart_Init>:

//--------------------------------------------
// UART

void Uart_Init(UART_HandleTypeDef *huart_arg) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  huart = huart_arg;
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <Uart_Init+0x28>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <Uart_Init+0x28>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2208      	movs	r2, #8
 80004bc:	b292      	uxth	r2, r2
 80004be:	4905      	ldr	r1, [pc, #20]	@ (80004d4 <Uart_Init+0x2c>)
 80004c0:	4618      	mov	r0, r3
 80004c2:	f003 fe1d 	bl	8004100 <HAL_UART_Receive_IT>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000cc 	.word	0x200000cc
 80004d4:	200000d0 	.word	0x200000d0

080004d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart_arg) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if (huart_arg == huart && getMode() == MODE_UART) {
 80004e0:	4b3f      	ldr	r3, [pc, #252]	@ (80005e0 <HAL_UART_RxCpltCallback+0x108>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d16d      	bne.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
 80004ea:	f7ff feef 	bl	80002cc <getMode>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d168      	bne.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    switch (rx_buf[0]) {
 80004f4:	4b3b      	ldr	r3, [pc, #236]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b05      	cmp	r3, #5
 80004fa:	d863      	bhi.n	80005c4 <HAL_UART_RxCpltCallback+0xec>
 80004fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <HAL_UART_RxCpltCallback+0x2c>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	0800051d 	.word	0x0800051d
 8000508:	08000537 	.word	0x08000537
 800050c:	08000551 	.word	0x08000551
 8000510:	0800056b 	.word	0x0800056b
 8000514:	08000585 	.word	0x08000585
 8000518:	080005a9 	.word	0x080005a9
    case COMMAND_BLUE:
      color_blue.r = rx_buf[1];
 800051c:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <HAL_UART_RxCpltCallback+0x110>)
 8000522:	701a      	strb	r2, [r3, #0]
      color_blue.g = rx_buf[2];
 8000524:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000526:	789a      	ldrb	r2, [r3, #2]
 8000528:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <HAL_UART_RxCpltCallback+0x110>)
 800052a:	705a      	strb	r2, [r3, #1]
      color_blue.b = rx_buf[3];
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800052e:	78da      	ldrb	r2, [r3, #3]
 8000530:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <HAL_UART_RxCpltCallback+0x110>)
 8000532:	709a      	strb	r2, [r3, #2]
      break;
 8000534:	e047      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    case COMMAND_YELLOW:
      color_yellow.r = rx_buf[1];
 8000536:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000538:	785a      	ldrb	r2, [r3, #1]
 800053a:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <HAL_UART_RxCpltCallback+0x114>)
 800053c:	701a      	strb	r2, [r3, #0]
      color_yellow.g = rx_buf[2];
 800053e:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000540:	789a      	ldrb	r2, [r3, #2]
 8000542:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <HAL_UART_RxCpltCallback+0x114>)
 8000544:	705a      	strb	r2, [r3, #1]
      color_yellow.b = rx_buf[3];
 8000546:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000548:	78da      	ldrb	r2, [r3, #3]
 800054a:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <HAL_UART_RxCpltCallback+0x114>)
 800054c:	709a      	strb	r2, [r3, #2]
      break;
 800054e:	e03a      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    case COMMAND_PINK:
      color_pink.r = rx_buf[1];
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000552:	785a      	ldrb	r2, [r3, #1]
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <HAL_UART_RxCpltCallback+0x118>)
 8000556:	701a      	strb	r2, [r3, #0]
      color_pink.g = rx_buf[2];
 8000558:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800055a:	789a      	ldrb	r2, [r3, #2]
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <HAL_UART_RxCpltCallback+0x118>)
 800055e:	705a      	strb	r2, [r3, #1]
      color_pink.b = rx_buf[3];
 8000560:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000562:	78da      	ldrb	r2, [r3, #3]
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <HAL_UART_RxCpltCallback+0x118>)
 8000566:	709a      	strb	r2, [r3, #2]
      break;
 8000568:	e02d      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    case COMMAND_GREEN:
      color_green.r = rx_buf[1];
 800056a:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800056c:	785a      	ldrb	r2, [r3, #1]
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <HAL_UART_RxCpltCallback+0x11c>)
 8000570:	701a      	strb	r2, [r3, #0]
      color_green.g = rx_buf[2];
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000574:	789a      	ldrb	r2, [r3, #2]
 8000576:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <HAL_UART_RxCpltCallback+0x11c>)
 8000578:	705a      	strb	r2, [r3, #1]
      color_green.b = rx_buf[3];
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800057c:	78da      	ldrb	r2, [r3, #3]
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <HAL_UART_RxCpltCallback+0x11c>)
 8000580:	709a      	strb	r2, [r3, #2]
      break;
 8000582:	e020      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    case COMMAND_ILLUMINANCE:
      illuminance = 0;
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <HAL_UART_RxCpltCallback+0x120>)
 8000586:	2200      	movs	r2, #0
 8000588:	801a      	strh	r2, [r3, #0]
      illuminance += (rx_buf[1] << 8) + rx_buf[2];
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 8000594:	7892      	ldrb	r2, [r2, #2]
 8000596:	4413      	add	r3, r2
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <HAL_UART_RxCpltCallback+0x120>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <HAL_UART_RxCpltCallback+0x120>)
 80005a4:	801a      	strh	r2, [r3, #0]
      break;
 80005a6:	e00e      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    case COMMAND_ID:
      ID = rx_buf[1];
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 80005aa:	785a      	ldrb	r2, [r3, #1]
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <HAL_UART_RxCpltCallback+0x124>)
 80005ae:	701a      	strb	r2, [r3, #0]
      color = rx_buf[2];
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <HAL_UART_RxCpltCallback+0x128>)
 80005c0:	701a      	strb	r2, [r3, #0]
      break;
 80005c2:	e000      	b.n	80005c6 <HAL_UART_RxCpltCallback+0xee>
    default:
      break;
 80005c4:	bf00      	nop
    }
  }
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_UART_RxCpltCallback+0x108>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2208      	movs	r2, #8
 80005cc:	b292      	uxth	r2, r2
 80005ce:	4905      	ldr	r1, [pc, #20]	@ (80005e4 <HAL_UART_RxCpltCallback+0x10c>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fd95 	bl	8004100 <HAL_UART_Receive_IT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000008 	.word	0x20000008
 80005f4:	2000000c 	.word	0x2000000c
 80005f8:	200000d8 	.word	0x200000d8
 80005fc:	20000050 	.word	0x20000050
 8000600:	20000051 	.word	0x20000051

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ID = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
  bool color = TEAM_COLOR_YELLOW;
 800060e:	2300      	movs	r3, #0
 8000610:	73bb      	strb	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fe0d 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f85f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9dd 	bl	80009d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f000 f9bd 	bl	800099c <MX_DMA_Init>
  MX_SPI1_Init();
 8000622:	f000 f94d 	bl	80008c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000626:	f000 f989 	bl	800093c <MX_USART1_UART_Init>
  MX_CAN_Init();
 800062a:	f000 f8b7 	bl	800079c <MX_CAN_Init>
  MX_I2C1_Init();
 800062e:	f000 f8e9 	bl	8000804 <MX_I2C1_Init>
  MX_IWDG_Init();
 8000632:	f000 f927 	bl	8000884 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  VEML6030_init(&hi2c1, SENS_ADDR_0);
//  VEML6030_init(&hi2c1, SENS_ADDR_1);
  NeoPixel_Init(&hspi1);
 8000636:	4823      	ldr	r0, [pc, #140]	@ (80006c4 <main+0xc0>)
 8000638:	f000 fa8e 	bl	8000b58 <NeoPixel_Init>
  Uart_Init(&huart1);
 800063c:	4822      	ldr	r0, [pc, #136]	@ (80006c8 <main+0xc4>)
 800063e:	f7ff ff33 	bl	80004a8 <Uart_Init>
  setColorSwitch();
 8000642:	f7ff febf 	bl	80003c4 <setColorSwitch>
  setIDSwitch();
 8000646:	f7ff fe63 	bl	8000310 <setIDSwitch>
//setup cycle
  float *cycle_basis = calloc(CYCLE_LAST, sizeof(float));
 800064a:	2104      	movs	r1, #4
 800064c:	2003      	movs	r0, #3
 800064e:	f004 fea5 	bl	800539c <calloc>
 8000652:	4603      	mov	r3, r0
 8000654:	60bb      	str	r3, [r7, #8]
  uint32_t *cycle_old = calloc(CYCLE_LAST, sizeof(uint32_t));
 8000656:	2104      	movs	r1, #4
 8000658:	2003      	movs	r0, #3
 800065a:	f004 fe9f 	bl	800539c <calloc>
 800065e:	4603      	mov	r3, r0
 8000660:	607b      	str	r3, [r7, #4]
  cycle_basis[CYCLE_MAIN] = 50;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <main+0xc8>)
 8000666:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_PATTERN] = 200;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3308      	adds	r3, #8
 800066c:	4a18      	ldr	r2, [pc, #96]	@ (80006d0 <main+0xcc>)
 800066e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    ID = getID();
 8000670:	f7ff fe36 	bl	80002e0 <getID>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
    color = getColor();
 8000678:	f7ff fe3e 	bl	80002f8 <getColor>
 800067c:	4603      	mov	r3, r0
 800067e:	73bb      	strb	r3, [r7, #14]
    if (CycleController(CYCLE_PATTERN, cycle_basis, cycle_old)) {
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	2002      	movs	r0, #2
 8000686:	f000 fd69 	bl	800115c <CycleController>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <main+0xa0>
      setPattern(ID, color);
 8000690:	7bba      	ldrb	r2, [r7, #14]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fea8 	bl	80003ec <setPattern>
    }

    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 800069c:	e002      	b.n	80006a4 <main+0xa0>
      HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fe2c 	bl	80012fc <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fd57 	bl	800115c <CycleController>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f1      	bne.n	800069e <main+0x9a>
    }
    HAL_IWDG_Refresh(&hiwdg);
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <main+0xd0>)
 80006bc:	f001 fd8d 	bl	80021da <HAL_IWDG_Refresh>
    ID = getID();
 80006c0:	e7d6      	b.n	8000670 <main+0x6c>
 80006c2:	bf00      	nop
 80006c4:	20000168 	.word	0x20000168
 80006c8:	20000210 	.word	0x20000210
 80006cc:	42480000 	.word	0x42480000
 80006d0:	43480000 	.word	0x43480000
 80006d4:	20000158 	.word	0x20000158

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006e2:	2228      	movs	r2, #40	@ 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 ff2a 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800070c:	230b      	movs	r3, #11
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000714:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 8000716:	2307      	movs	r3, #7
 8000718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000722:	2301      	movs	r3, #1
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000730:	f44f 1330 	mov.w	r3, #2883584	@ 0x2c0000
 8000734:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fd5e 	bl	80021fc <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000746:	f000 fa01 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fd86 	bl	8003278 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000772:	f000 f9eb 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000776:	2321      	movs	r3, #33	@ 0x21
 8000778:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f002 ffaf 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000790:	f000 f9dc 	bl	8000b4c <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3758      	adds	r7, #88	@ 0x58
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_CAN_Init+0x60>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_CAN_Init+0x64>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_CAN_Init+0x60>)
 80007a8:	2210      	movs	r2, #16
 80007aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_CAN_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_CAN_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_CAN_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_CAN_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <MX_CAN_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_CAN_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_CAN_Init+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_CAN_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_CAN_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_CAN_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_CAN_Init+0x60>)
 80007ea:	f000 fdab 	bl	8001344 <HAL_CAN_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f9aa 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000dc 	.word	0x200000dc
 8000800:	40006400 	.word	0x40006400

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f001 fb56 	bl	8001ef0 <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 f97f 	bl	8000b4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f001 fbdc 	bl	800200e <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 f976 	bl	8000b4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f001 fc1e 	bl	80020a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f96d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000104 	.word	0x20000104
 800087c:	40005400 	.word	0x40005400
 8000880:	00101d7c 	.word	0x00101d7c

08000884 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_IWDG_Init+0x34>)
 800088a:	4a0c      	ldr	r2, [pc, #48]	@ (80008bc <MX_IWDG_Init+0x38>)
 800088c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_IWDG_Init+0x34>)
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_IWDG_Init+0x34>)
 8000896:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800089a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_IWDG_Init+0x34>)
 800089e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_IWDG_Init+0x34>)
 80008a6:	f001 fc49 	bl	800213c <HAL_IWDG_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80008b0:	f000 f94c 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000158 	.word	0x20000158
 80008bc:	40003000 	.word	0x40003000

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_SPI1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000910:	2207      	movs	r2, #7
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_SPI1_Init+0x74>)
 8000922:	f003 f807 	bl	8003934 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800092c:	f000 f90e 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000168 	.word	0x20000168
 8000938:	40013000 	.word	0x40013000

0800093c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	@ (8000998 <MX_USART1_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000948:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800094c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_USART1_UART_Init+0x58>)
 8000980:	f003 fb70 	bl	8004064 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 f8df 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000210 	.word	0x20000210
 8000998:	40013800 	.word	0x40013800

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_DMA_Init+0x38>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <MX_DMA_Init+0x38>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_DMA_Init+0x38>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	200d      	movs	r0, #13
 80009c0:	f000 fe97 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009c4:	200d      	movs	r0, #13
 80009c6:	f000 feb0 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b55      	ldr	r3, [pc, #340]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a54      	ldr	r2, [pc, #336]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 80009f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b52      	ldr	r3, [pc, #328]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b4f      	ldr	r3, [pc, #316]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b4c      	ldr	r3, [pc, #304]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b49      	ldr	r3, [pc, #292]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a48      	ldr	r2, [pc, #288]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b46      	ldr	r3, [pc, #280]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4843      	ldr	r0, [pc, #268]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000a3c:	f001 fa28 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin ID4_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ID4_Pin;
 8000a40:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f001 f890 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : COLOR_Pin */
  GPIO_InitStruct.Pin = COLOR_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a60:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COLOR_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a74:	f001 f882 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f001 f875 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BTN1_Pin USER_BTN2_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin|USER_BTN2_Pin;
 8000a92:	2350      	movs	r3, #80	@ 0x50
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f001 f867 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000ac6:	f001 f859 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin|ID2_Pin;
 8000aca:	2328      	movs	r3, #40	@ 0x28
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ace:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000ae0:	f001 f84c 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ID8_Pin */
  GPIO_InitStruct.Pin = ID8_Pin;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ID8_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4814      	ldr	r0, [pc, #80]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000af8:	f001 f840 	bl	8001b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2008      	movs	r0, #8
 8000b02:	f000 fdf6 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000b06:	2008      	movs	r0, #8
 8000b08:	f000 fe0f 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2009      	movs	r0, #9
 8000b12:	f000 fdee 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b16:	2009      	movs	r0, #9
 8000b18:	f000 fe07 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fde6 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f000 fdff 	bl	800172a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2017      	movs	r0, #23
 8000b32:	f000 fdde 	bl	80016f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b36:	2017      	movs	r0, #23
 8000b38:	f000 fdf7 	bl	800172a <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000400 	.word	0x48000400

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <NeoPixel_Init+0x1c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000298 	.word	0x20000298

08000b78 <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB RGB_buf[]) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(sizeof(uint8_t), N * 24);
 8000b80:	2178      	movs	r1, #120	@ 0x78
 8000b82:	2001      	movs	r0, #1
 8000b84:	f004 fc0a 	bl	800539c <calloc>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf);
 8000b8c:	68f9      	ldr	r1, [r7, #12]
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f832 	bl	8000bf8 <NeoPixel_Serialize>
  NeoPixel_Reset();
 8000b94:	f000 f814 	bl	8000bc0 <NeoPixel_Reset>
  HAL_Delay(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 fbaf 	bl	80012fc <HAL_Delay>
  HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24);
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <NeoPixel_Send+0x44>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2278      	movs	r2, #120	@ 0x78
 8000ba4:	68f9      	ldr	r1, [r7, #12]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 ff68 	bl	8003a7c <HAL_SPI_Transmit_DMA>
  free(send_buf);
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f004 fc11 	bl	80053d4 <free>
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000298 	.word	0x20000298

08000bc0 <NeoPixel_Reset>:

void NeoPixel_Reset() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	e009      	b.n	8000be4 <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <NeoPixel_Reset+0x34>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	1cf9      	adds	r1, r7, #3
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 ff4f 	bl	8003a7c <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3301      	adds	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b63      	cmp	r3, #99	@ 0x63
 8000be8:	ddf2      	ble.n	8000bd0 <NeoPixel_Reset+0x10>
  }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000298 	.word	0x20000298

08000bf8 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e090      	b.n	8000d2a <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	e086      	b.n	8000d1c <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	785b      	ldrb	r3, [r3, #1]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f1c3 0307 	rsb	r3, r3, #7
 8000c24:	fa42 f303 	asr.w	r3, r2, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00d      	beq.n	8000c4c <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4413      	add	r3, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	22f0      	movs	r2, #240	@ 0xf0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e00c      	b.n	8000c66 <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	461a      	mov	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	22c0      	movs	r2, #192	@ 0xc0
 8000c64:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f1c3 0307 	rsb	r3, r3, #7
 8000c7c:	fa42 f303 	asr.w	r3, r2, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00d      	beq.n	8000ca4 <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	461a      	mov	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	3308      	adds	r3, #8
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	22f0      	movs	r2, #240	@ 0xf0
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e00c      	b.n	8000cbe <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	22c0      	movs	r2, #192	@ 0xc0
 8000cbc:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f1c3 0307 	rsb	r3, r3, #7
 8000cd4:	fa42 f303 	asr.w	r3, r2, r3
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00d      	beq.n	8000cfc <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	461a      	mov	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	3310      	adds	r3, #16
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	22f0      	movs	r2, #240	@ 0xf0
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	e00c      	b.n	8000d16 <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	22c0      	movs	r2, #192	@ 0xc0
 8000d14:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	f77f af75 	ble.w	8000c0e <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	f77f af6b 	ble.w	8000c08 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x44>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <HAL_CAN_MspInit+0x80>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d129      	bne.n	8000dfe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000db0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a11      	ldr	r2, [pc, #68]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_CAN_MspInit+0x84>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000dec:	2309      	movs	r3, #9
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f000 febf 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40006400 	.word	0x40006400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_I2C_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d127      	bne.n	8000e82 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	@ 0xc0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <HAL_I2C_MspInit+0x84>)
 8000e66:	f000 fe89 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8000f60 <HAL_SPI_MspInit+0xc8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d14e      	bne.n	8000f58 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a23      	ldr	r2, [pc, #140]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <HAL_SPI_MspInit+0xcc>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eea:	23a0      	movs	r3, #160	@ 0xa0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efa:	2305      	movs	r3, #5
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f000 fe38 	bl	8001b7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_SPI_MspInit+0xd4>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f14:	2210      	movs	r2, #16
 8000f16:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f3c:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f3e:	f000 fc0e 	bl	800175e <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000f48:	f7ff fe00 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f50:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <HAL_SPI_MspInit+0xd0>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40013000 	.word	0x40013000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	200001cc 	.word	0x200001cc
 8000f6c:	40020030 	.word	0x40020030

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <HAL_UART_MspInit+0x90>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d131      	bne.n	8000ff6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a15      	ldr	r2, [pc, #84]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <HAL_UART_MspInit+0x94>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f000 fdcb 	bl	8001b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2025      	movs	r0, #37	@ 0x25
 8000fec:	f000 fb81 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff0:	2025      	movs	r0, #37	@ 0x25
 8000ff2:	f000 fb9a 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013800 	.word	0x40013800
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f92d 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}

08001066 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and touch sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLOR_Pin);
 800106a:	2004      	movs	r0, #4
 800106c:	f000 ff28 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID1_Pin);
 8001078:	2008      	movs	r0, #8
 800107a:	f000 ff21 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN1_Pin);
 8001086:	2010      	movs	r0, #16
 8001088:	f000 ff1a 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA1_Channel3_IRQHandler+0x10>)
 8001096:	f000 fc7f 	bl	8001998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001cc 	.word	0x200001cc

080010a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID2_Pin);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f000 ff09 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BTN2_Pin);
 80010ae:	2040      	movs	r0, #64	@ 0x40
 80010b0:	f000 ff06 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <USART1_IRQHandler+0x10>)
 80010be:	f003 f863 	bl	8004188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000210 	.word	0x20000210

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f004 fa38 	bl	8005570 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20003000 	.word	0x20003000
 800112c:	00000400 	.word	0x00000400
 8001130:	2000029c 	.word	0x2000029c
 8001134:	200003f0 	.word	0x200003f0

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <CycleController+0x2a>
    old[data] = HAL_GetTick();
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	18d4      	adds	r4, r2, r3
 800117e:	f000 f8b1 	bl	80012e4 <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 8001186:	f000 f8ad 	bl	80012e4 <HAL_GetTick>
 800118a:	6178      	str	r0, [r7, #20]
  if (current - (float)old[data] > basis[data]) {
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4413      	add	r3, r2
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	dd07      	ble.n	80011d2 <CycleController+0x76>
    old[data] = current;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	601a      	str	r2, [r3, #0]
    return 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <CycleController+0x78>
  } else {
    return 0;
 80011d2:	2300      	movs	r3, #0
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001214 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ffaa 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f004 f9b7 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff f9f9 	bl	8000604 <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001214:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001220:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 8001224:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001228:	200003ec 	.word	0x200003ec

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>
	...

08001230 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_Init+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_Init+0x28>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 fa4b 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fd78 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000

0800125c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fa63 	bl	8001746 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 fa2b 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000054 	.word	0x20000054
 80012b4:	2000005c 	.word	0x2000005c
 80012b8:	20000058 	.word	0x20000058

080012bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000005c 	.word	0x2000005c
 80012e0:	200002a0 	.word	0x200002a0

080012e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002a0 	.word	0x200002a0

080012fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000005c 	.word	0x2000005c

08001344 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0ed      	b.n	8001532 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd10 	bl	8000d88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001378:	f7ff ffb4 	bl	80012e4 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800137e:	e012      	b.n	80013a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001380:	f7ff ffb0 	bl	80012e4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b0a      	cmp	r3, #10
 800138c:	d90b      	bls.n	80013a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2205      	movs	r2, #5
 800139e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0c5      	b.n	8001532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0e5      	beq.n	8001380 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0202 	bic.w	r2, r2, #2
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff ff8e 	bl	80012e4 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013ca:	e012      	b.n	80013f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013cc:	f7ff ff8a 	bl	80012e4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b0a      	cmp	r3, #10
 80013d8:	d90b      	bls.n	80013f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2205      	movs	r2, #5
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e09f      	b.n	8001532 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e5      	bne.n	80013cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e1b      	ldrb	r3, [r3, #24]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d108      	bne.n	800141a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e007      	b.n	800142a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7e5b      	ldrb	r3, [r3, #25]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e007      	b.n	8001454 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e9b      	ldrb	r3, [r3, #26]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0220 	orr.w	r2, r2, #32
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e007      	b.n	800147e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0220 	bic.w	r2, r2, #32
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7edb      	ldrb	r3, [r3, #27]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0210 	bic.w	r2, r2, #16
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e007      	b.n	80014a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0210 	orr.w	r2, r2, #16
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7f1b      	ldrb	r3, [r3, #28]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d108      	bne.n	80014c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0208 	orr.w	r2, r2, #8
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e007      	b.n	80014d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0208 	bic.w	r2, r2, #8
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7f5b      	ldrb	r3, [r3, #29]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e007      	b.n	80014fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0204 	bic.w	r2, r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	ea42 0103 	orr.w	r1, r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	@ (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	@ (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e037      	b.n	80017e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800178a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800178e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f9b8 	bl	8001b3c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}  
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_DMA_Start_IT+0x20>
 8001808:	2302      	movs	r3, #2
 800180a:	e04a      	b.n	80018a2 <HAL_DMA_Start_IT+0xb6>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800181a:	2b01      	cmp	r3, #1
 800181c:	d13a      	bne.n	8001894 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f94b 	bl	8001ade <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 020e 	orr.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e00f      	b.n	8001882 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 020a 	orr.w	r2, r2, #10
 8001870:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0204 	bic.w	r2, r2, #4
 8001880:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e005      	b.n	80018a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800189c:	2302      	movs	r3, #2
 800189e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e020      	b.n	8001910 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 020e 	bic.w	r2, r2, #14
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800192e:	2b02      	cmp	r3, #2
 8001930:	d005      	beq.n	800193e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2204      	movs	r2, #4
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e027      	b.n	800198e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 020e 	bic.w	r2, r2, #14
 800194c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
    } 
  }
  return status;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	2204      	movs	r2, #4
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d024      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x72>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01f      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f0:	2104      	movs	r1, #4
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d06a      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	e065      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2202      	movs	r2, #2
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d02c      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xdc>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d027      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10b      	bne.n	8001a4a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 020a 	bic.w	r2, r2, #10
 8001a40:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a52:	2102      	movs	r1, #2
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d035      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a72:	e030      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	2208      	movs	r2, #8
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d028      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 020e 	bic.w	r2, r2, #14
 8001a9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
    }
  }
}  
 8001ad4:	e7ff      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x13e>
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d108      	bne.n	8001b1e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b1c:	e007      	b.n	8001b2e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <DMA_CalcBaseAndBitshift+0x34>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <DMA_CalcBaseAndBitshift+0x38>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b60:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	bffdfff8 	.word	0xbffdfff8
 8001b74:	cccccccd 	.word	0xcccccccd
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e14e      	b.n	8001e2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8140 	beq.w	8001e24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 809a 	beq.w	8001e24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b55      	ldr	r3, [pc, #340]	@ (8001e48 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a54      	ldr	r2, [pc, #336]	@ (8001e48 <HAL_GPIO_Init+0x2cc>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b52      	ldr	r3, [pc, #328]	@ (8001e48 <HAL_GPIO_Init+0x2cc>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d08:	4a50      	ldr	r2, [pc, #320]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_Init+0x1e0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a46      	ldr	r2, [pc, #280]	@ (8001e50 <HAL_GPIO_Init+0x2d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a45      	ldr	r2, [pc, #276]	@ (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a44      	ldr	r2, [pc, #272]	@ (8001e58 <HAL_GPIO_Init+0x2dc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_Init+0x1d4>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x1e2>
 8001d50:	2305      	movs	r3, #5
 8001d52:	e004      	b.n	8001d5e <HAL_GPIO_Init+0x1e2>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x1e2>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_GPIO_Init+0x1e2>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	f002 0203 	and.w	r2, r2, #3
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	4093      	lsls	r3, r2
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6e:	4937      	ldr	r1, [pc, #220]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7c:	4b37      	ldr	r3, [pc, #220]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dca:	4a24      	ldr	r2, [pc, #144]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df4:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f47f aea9 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	48000400 	.word	0x48000400
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000c00 	.word	0x48000c00
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f972 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e081      	b.n	8002006 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe ff7a 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d104      	bne.n	8001f8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69d9      	ldr	r1, [r3, #28]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	d138      	bne.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800202e:	2302      	movs	r3, #2
 8002030:	e032      	b.n	8002098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2224      	movs	r2, #36	@ 0x24
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002060:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d139      	bne.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e033      	b.n	8002130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
  }
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e041      	b.n	80021d2 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002156:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002160:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6852      	ldr	r2, [r2, #4]
 800216a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002176:	f7ff f8b5 	bl	80012e4 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800217c:	e00f      	b.n	800219e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800217e:	f7ff f8b1 	bl	80012e4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b27      	cmp	r3, #39	@ 0x27
 800218a:	d908      	bls.n	800219e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e019      	b.n	80021d2 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e8      	bne.n	800217e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d005      	beq.n	80021c6 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68d2      	ldr	r2, [r2, #12]
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	e004      	b.n	80021d0 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80021ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002202:	af00      	add	r7, sp, #0
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f001 b823 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 817d 	beq.w	8002532 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002238:	4bbc      	ldr	r3, [pc, #752]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00c      	beq.n	800225e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002244:	4bb9      	ldr	r3, [pc, #740]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d15c      	bne.n	800230a <HAL_RCC_OscConfig+0x10e>
 8002250:	4bb6      	ldr	r3, [pc, #728]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225c:	d155      	bne.n	800230a <HAL_RCC_OscConfig+0x10e>
 800225e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002262:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002272:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_RCC_OscConfig+0x94>
 800228a:	4ba8      	ldr	r3, [pc, #672]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	e015      	b.n	80022bc <HAL_RCC_OscConfig+0xc0>
 8002290:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002294:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022b8:	4b9c      	ldr	r3, [pc, #624]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022c8:	fa92 f2a2 	rbit	r2, r2
 80022cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 811f 	beq.w	8002530 <HAL_RCC_OscConfig+0x334>
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8116 	bne.w	8002530 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f000 bfaf 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x12e>
 800231c:	4b83      	ldr	r3, [pc, #524]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a82      	ldr	r2, [pc, #520]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e036      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x158>
 800233a:	4b7c      	ldr	r3, [pc, #496]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b79      	ldr	r3, [pc, #484]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a78      	ldr	r2, [pc, #480]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e021      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x184>
 8002366:	4b71      	ldr	r3, [pc, #452]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a70      	ldr	r2, [pc, #448]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6e      	ldr	r3, [pc, #440]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6d      	ldr	r2, [pc, #436]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 8002380:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a69      	ldr	r2, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b67      	ldr	r3, [pc, #412]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a66      	ldr	r2, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	f023 020f 	bic.w	r2, r3, #15
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	495f      	ldr	r1, [pc, #380]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d059      	beq.n	8002476 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe ff8f 	bl	80012e4 <HAL_GetTick>
 80023c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe ff8a 	bl	80012e4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	@ 0x64
 80023da:	d902      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	f000 bf43 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80023e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80023f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x218>
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e015      	b.n	8002440 <HAL_RCC_OscConfig+0x244>
 8002414:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002418:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002430:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800243c:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002444:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002448:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002454:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ab      	beq.n	80023cc <HAL_RCC_OscConfig+0x1d0>
 8002474:	e05d      	b.n	8002532 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe ff35 	bl	80012e4 <HAL_GetTick>
 800247a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe ff30 	bl	80012e4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	@ 0x64
 800248e:	d902      	bls.n	8002496 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	f000 bee9 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 8002496:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2cc>
 80024c2:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e015      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f8>
 80024c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80024dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_RCC_OscConfig+0x330>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80024fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002500:	fa92 f2a2 	rbit	r2, r2
 8002504:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002508:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ab      	bne.n	8002480 <HAL_RCC_OscConfig+0x284>
 8002528:	e003      	b.n	8002532 <HAL_RCC_OscConfig+0x336>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 817d 	beq.w	8002842 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002548:	4ba6      	ldr	r3, [pc, #664]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002554:	4ba3      	ldr	r3, [pc, #652]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d172      	bne.n	8002646 <HAL_RCC_OscConfig+0x44a>
 8002560:	4ba0      	ldr	r3, [pc, #640]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d16c      	bne.n	8002646 <HAL_RCC_OscConfig+0x44a>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800257e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_OscConfig+0x3a0>
 8002596:	4b93      	ldr	r3, [pc, #588]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e013      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c8>
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80025b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025c0:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	2202      	movs	r2, #2
 80025c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80025d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCC_OscConfig+0x410>
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d002      	beq.n	800260c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 be2e 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b75      	ldr	r3, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	21f8      	movs	r1, #248	@ 0xf8
 8002622:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800262a:	fa91 f1a1 	rbit	r1, r1
 800262e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002632:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002636:	fab1 f181 	clz	r1, r1
 800263a:	b2c9      	uxtb	r1, r1
 800263c:	408b      	lsls	r3, r1
 800263e:	4969      	ldr	r1, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	e0fd      	b.n	8002842 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8088 	beq.w	8002768 <HAL_RCC_OscConfig+0x56c>
 8002658:	2301      	movs	r3, #1
 800265a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800266a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002678:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fe2e 	bl	80012e4 <HAL_GetTick>
 8002688:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe fe29 	bl	80012e4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	f000 bde2 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80026b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d102      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d8>
 80026ce:	4b45      	ldr	r3, [pc, #276]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e013      	b.n	80026fc <HAL_RCC_OscConfig+0x500>
 80026d4:	2302      	movs	r3, #2
 80026d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	2202      	movs	r2, #2
 80026fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002702:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002706:	fa92 f2a2 	rbit	r2, r2
 800270a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800270e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0220 	orr.w	r2, r2, #32
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0af      	beq.n	800268e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	21f8      	movs	r1, #248	@ 0xf8
 8002744:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800274c:	fa91 f1a1 	rbit	r1, r1
 8002750:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002754:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002758:	fab1 f181 	clz	r1, r1
 800275c:	b2c9      	uxtb	r1, r1
 800275e:	408b      	lsls	r3, r1
 8002760:	4920      	ldr	r1, [pc, #128]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
 8002766:	e06c      	b.n	8002842 <HAL_RCC_OscConfig+0x646>
 8002768:	2301      	movs	r3, #1
 800276a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800277a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fda6 	bl	80012e4 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fda1 	bl	80012e4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f000 bd5a 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80027c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d104      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5ec>
 80027de:	4b01      	ldr	r3, [pc, #4]	@ (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x614>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002800:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800280c:	4bc8      	ldr	r3, [pc, #800]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	2202      	movs	r2, #2
 8002812:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002816:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002822:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ad      	bne.n	800279e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8110 	beq.w	8002a78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d079      	beq.n	800295c <HAL_RCC_OscConfig+0x760>
 8002868:	2301      	movs	r3, #1
 800286a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800287a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	4bab      	ldr	r3, [pc, #684]	@ (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2301      	movs	r3, #1
 8002890:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fd27 	bl	80012e4 <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fd22 	bl	80012e4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f000 bcdb 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800290a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290c:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 800290e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002918:	2102      	movs	r1, #2
 800291a:	6019      	str	r1, [r3, #0]
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f1a3 	rbit	r1, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002932:	6019      	str	r1, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0a0      	beq.n	800289c <HAL_RCC_OscConfig+0x6a0>
 800295a:	e08d      	b.n	8002a78 <HAL_RCC_OscConfig+0x87c>
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800297e:	601a      	str	r2, [r3, #0]
  return result;
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002988:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4b68      	ldr	r3, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fe fca1 	bl	80012e4 <HAL_GetTick>
 80029a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fc9c 	bl	80012e4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d902      	bls.n	80029be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f000 bc55 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a36:	2102      	movs	r1, #2
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f1a3 	rbit	r1, r3
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a50:	6019      	str	r1, [r3, #0]
  return result;
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d197      	bne.n	80029a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 81a1 	beq.w	8002dd0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ac6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ada:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a16      	ldr	r2, [pc, #88]	@ (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fbfd 	bl	80012e4 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fbf8 	bl	80012e4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	@ 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e3b1      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_OscConfig+0x940>
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a02      	ldr	r2, [pc, #8]	@ (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e03c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	10908120 	.word	0x10908120
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x96a>
 8002b4c:	4bc1      	ldr	r3, [pc, #772]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4ac0      	ldr	r2, [pc, #768]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	4bbe      	ldr	r3, [pc, #760]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4abd      	ldr	r2, [pc, #756]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e020      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x994>
 8002b76:	4bb7      	ldr	r3, [pc, #732]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4ab6      	ldr	r2, [pc, #728]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4bb4      	ldr	r3, [pc, #720]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4ab3      	ldr	r2, [pc, #716]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b90:	4bb0      	ldr	r3, [pc, #704]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4aaf      	ldr	r2, [pc, #700]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	4bad      	ldr	r3, [pc, #692]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4aac      	ldr	r2, [pc, #688]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8081 	beq.w	8002cbc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fb93 	bl	80012e4 <HAL_GetTick>
 8002bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fb8e 	bl	80012e4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e345      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0xa4c>
 8002c42:	4b84      	ldr	r3, [pc, #528]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0xa74>
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b79      	ldr	r3, [pc, #484]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c78:	2102      	movs	r1, #2
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	fa92 f1a2 	rbit	r1, r2
 8002c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c92:	6011      	str	r1, [r2, #0]
  return result;
 8002c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d084      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x9c8>
 8002cba:	e07f      	b.n	8002dbc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fb12 	bl	80012e4 <HAL_GetTick>
 8002cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fb0d 	bl	80012e4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e2c4      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d24:	601a      	str	r2, [r3, #0]
  return result;
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_OscConfig+0xb4e>
 8002d44:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0xb76>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d82:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fa92 f1a2 	rbit	r1, r2
 8002d8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d184      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8242 	beq.w	8003266 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	f000 8213 	beq.w	8003216 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f040 8162 	bne.w	80030c6 <HAL_RCC_OscConfig+0xeca>
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fa4c 	bl	80012e4 <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	e00c      	b.n	8002e6c <HAL_RCC_OscConfig+0xc70>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fa44 	bl	80012e4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1fd      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e90:	601a      	str	r2, [r3, #0]
  return result;
 8002e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_OscConfig+0xcba>
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e027      	b.n	8002f06 <HAL_RCC_OscConfig+0xd0a>
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	4b9c      	ldr	r3, [pc, #624]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f12:	6011      	str	r1, [r2, #0]
 8002f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fa92 f1a2 	rbit	r1, r2
 8002f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f2a:	6011      	str	r1, [r2, #0]
  return result;
 8002f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	fab2 f282 	clz	r2, r2
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f042 0220 	orr.w	r2, r2, #32
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f002 021f 	and.w	r2, r2, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d182      	bne.n	8002e58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f52:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	430b      	orrs	r3, r1
 8002f74:	497f      	ldr	r1, [pc, #508]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f990 	bl	80012e4 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe f98b 	bl	80012e4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e144      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003008:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800300c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_RCC_OscConfig+0xe2c>
 8003022:	4b54      	ldr	r3, [pc, #336]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e027      	b.n	8003078 <HAL_RCC_OscConfig+0xe7c>
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003056:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4b3f      	ldr	r3, [pc, #252]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800307c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003080:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003098:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800309c:	6011      	str	r1, [r2, #0]
  return result;
 800309e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d082      	beq.n	8002fca <HAL_RCC_OscConfig+0xdce>
 80030c4:	e0cf      	b.n	8003266 <HAL_RCC_OscConfig+0x106a>
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030ea:	601a      	str	r2, [r3, #0]
  return result;
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe f8ea 	bl	80012e4 <HAL_GetTick>
 8003110:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	e009      	b.n	800312a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f8e5 	bl	80012e4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e09e      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d104      	bne.n	8003178 <HAL_RCC_OscConfig+0xf7c>
 800316e:	4b01      	ldr	r3, [pc, #4]	@ (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0xfcc>
 8003174:	40021000 	.word	0x40021000
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003180:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCC_OscConfig+0x1078>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fa92 f1a2 	rbit	r1, r2
 80031e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031ec:	6011      	str	r1, [r2, #0]
  return result;
 80031ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d180      	bne.n	8003116 <HAL_RCC_OscConfig+0xf1a>
 8003214:	e027      	b.n	8003266 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e01e      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_OscConfig+0x1078>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003232:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003236:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	d10b      	bne.n	8003262 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800324a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800324e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b09e      	sub	sp, #120	@ 0x78
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e162      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b90      	ldr	r3, [pc, #576]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b8d      	ldr	r3, [pc, #564]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	498b      	ldr	r1, [pc, #556]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b89      	ldr	r3, [pc, #548]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e14a      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b82      	ldr	r3, [pc, #520]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	497f      	ldr	r1, [pc, #508]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80dc 	beq.w	80034a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d13c      	bne.n	800336e <HAL_RCC_ClockConfig+0xf6>
 80032f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_RCC_ClockConfig+0xa6>
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e00f      	b.n	800333e <HAL_RCC_ClockConfig+0xc6>
 800331e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003322:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	667b      	str	r3, [r7, #100]	@ 0x64
 800332c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003330:	663b      	str	r3, [r7, #96]	@ 0x60
 8003332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800333a:	4b67      	ldr	r3, [pc, #412]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003342:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003346:	fa92 f2a2 	rbit	r2, r2
 800334a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800334c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d17b      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0f3      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d13c      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x178>
 8003376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x128>
 800339a:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e00f      	b.n	80033c0 <HAL_RCC_ClockConfig+0x148>
 80033a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033bc:	4b46      	ldr	r3, [pc, #280]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13a      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b2      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
 8003412:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e00d      	b.n	8003434 <HAL_RCC_ClockConfig+0x1bc>
 8003418:	2302      	movs	r3, #2
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
 8003424:	2302      	movs	r3, #2
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	4b29      	ldr	r3, [pc, #164]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2202      	movs	r2, #2
 8003436:	61ba      	str	r2, [r7, #24]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	fa92 f2a2 	rbit	r2, r2
 800343e:	617a      	str	r2, [r7, #20]
  return result;
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e079      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	491a      	ldr	r1, [pc, #104]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fd ff36 	bl	80012e4 <HAL_GetTick>
 8003478:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd ff32 	bl	80012e4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e061      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d214      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	4906      	ldr	r1, [pc, #24]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e040      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	491a      	ldr	r1, [pc, #104]	@ (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4912      	ldr	r1, [pc, #72]	@ (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800351a:	f000 f829 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800351e:	4601      	mov	r1, r0
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003528:	22f0      	movs	r2, #240	@ 0xf0
 800352a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	60fa      	str	r2, [r7, #12]
  return result;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	40d3      	lsrs	r3, r2
 800353e:	4a09      	ldr	r2, [pc, #36]	@ (8003564 <HAL_RCC_ClockConfig+0x2ec>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	fa21 f303 	lsr.w	r3, r1, r3
 8003546:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <HAL_RCC_ClockConfig+0x2f0>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800354a:	4b08      	ldr	r3, [pc, #32]	@ (800356c <HAL_RCC_ClockConfig+0x2f4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fe84 	bl	800125c <HAL_InitTick>
  
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3778      	adds	r7, #120	@ 0x78
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	08005774 	.word	0x08005774
 8003568:	20000054 	.word	0x20000054
 800356c:	20000058 	.word	0x20000058

08003570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b08b      	sub	sp, #44	@ 0x2c
 8003574:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800358a:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x30>
 800359a:	2b08      	cmp	r3, #8
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x36>
 800359e:	e03c      	b.n	800361a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b24      	ldr	r3, [pc, #144]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a2:	623b      	str	r3, [r7, #32]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035ac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80035b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	607a      	str	r2, [r7, #4]
  return result;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	40d3      	lsrs	r3, r2
 80035c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035c6:	5cd3      	ldrb	r3, [r2, r3]
 80035c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	220f      	movs	r2, #15
 80035d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	60fa      	str	r2, [r7, #12]
  return result;
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	40d3      	lsrs	r3, r2
 80035e8:	4a14      	ldr	r2, [pc, #80]	@ (800363c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
 8003608:	e004      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a0c      	ldr	r2, [pc, #48]	@ (8003640 <HAL_RCC_GetSysClockFreq+0xd0>)
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e002      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_RCC_GetSysClockFreq+0xd4>)
 800361c:	623b      	str	r3, [r7, #32]
      break;
 800361e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003620:	6a3b      	ldr	r3, [r7, #32]
}
 8003622:	4618      	mov	r0, r3
 8003624:	372c      	adds	r7, #44	@ 0x2c
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	01e84800 	.word	0x01e84800
 8003638:	0800578c 	.word	0x0800578c
 800363c:	0800579c 	.word	0x0800579c
 8003640:	003d0900 	.word	0x003d0900
 8003644:	007a1200 	.word	0x007a1200

08003648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b03      	ldr	r3, [pc, #12]	@ (800365c <HAL_RCC_GetHCLKFreq+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000054 	.word	0x20000054

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003666:	f7ff ffef 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 800366a:	4601      	mov	r1, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003674:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003678:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	603a      	str	r2, [r7, #0]
  return result;
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	40d3      	lsrs	r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08005784 	.word	0x08005784

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036aa:	f7ff ffcd 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 80036ae:	4601      	mov	r1, r0
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80036b8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	fa92 f2a2 	rbit	r2, r2
 80036c4:	603a      	str	r2, [r7, #0]
  return result;
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	40d3      	lsrs	r3, r2
 80036d0:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08005784 	.word	0x08005784

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b092      	sub	sp, #72	@ 0x48
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80cd 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370c:	4b86      	ldr	r3, [pc, #536]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b83      	ldr	r3, [pc, #524]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a82      	ldr	r2, [pc, #520]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b80      	ldr	r3, [pc, #512]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b7d      	ldr	r3, [pc, #500]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b7a      	ldr	r3, [pc, #488]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a79      	ldr	r2, [pc, #484]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fd fdc9 	bl	80012e4 <HAL_GetTick>
 8003752:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fdc5 	bl	80012e4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	@ 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0db      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b70      	ldr	r3, [pc, #448]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003774:	4b6c      	ldr	r3, [pc, #432]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d07d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800378e:	429a      	cmp	r2, r3
 8003790:	d076      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003792:	4b65      	ldr	r3, [pc, #404]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800379c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e4:	4a50      	ldr	r2, [pc, #320]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d045      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fd76 	bl	80012e4 <HAL_GetTick>
 80037f8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fd fd72 	bl	80012e4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e086      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003812:	2302      	movs	r3, #2
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	61fb      	str	r3, [r7, #28]
  return result;
 800382a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d102      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	e007      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003846:	2302      	movs	r3, #2
 8003848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	4b35      	ldr	r3, [pc, #212]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	2202      	movs	r2, #2
 8003858:	613a      	str	r2, [r7, #16]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	fa92 f2a2 	rbit	r2, r2
 8003860:	60fa      	str	r2, [r7, #12]
  return result;
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	fab2 f282 	clz	r2, r2
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f002 021f 	and.w	r2, r2, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0bd      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003880:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4926      	ldr	r1, [pc, #152]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003892:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	491a      	ldr	r1, [pc, #104]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d0:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	f023 0210 	bic.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4912      	ldr	r1, [pc, #72]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	490b      	ldr	r1, [pc, #44]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4903      	ldr	r1, [pc, #12]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3748      	adds	r7, #72	@ 0x48
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
 8003930:	10908100 	.word	0x10908100

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e095      	b.n	8003a72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003956:	d009      	beq.n	800396c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	e005      	b.n	800396c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fa86 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039ac:	d902      	bls.n	80039b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e002      	b.n	80039ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_Init+0xa0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	ea42 0103 	orr.w	r1, r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f003 0204 	and.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a50:	ea42 0103 	orr.w	r1, r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_SPI_Transmit_DMA+0x20>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e0d4      	b.n	8003c46 <HAL_SPI_Transmit_DMA+0x1ca>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ab4:	e0c2      	b.n	8003c3c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_SPI_Transmit_DMA+0x46>
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0b9      	b.n	8003c3c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2203      	movs	r2, #3
 8003acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d10f      	bne.n	8003b34 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	4a45      	ldr	r2, [pc, #276]	@ (8003c50 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	4a44      	ldr	r2, [pc, #272]	@ (8003c54 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	4a43      	ldr	r2, [pc, #268]	@ (8003c58 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b50:	2200      	movs	r2, #0
 8003b52:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b62:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b6c:	d82d      	bhi.n	8003bca <HAL_SPI_Transmit_DMA+0x14e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b78:	d127      	bne.n	8003bca <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10f      	bne.n	8003ba8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b96:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ba6:	e010      	b.n	8003bca <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003be2:	f7fd fe03 	bl	80017ec <HAL_DMA_Start_IT>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003bfc:	e01e      	b.n	8003c3c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d007      	beq.n	8003c1c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0220 	orr.w	r2, r2, #32
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0202 	orr.w	r2, r2, #2
 8003c3a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	08003d3f 	.word	0x08003d3f
 8003c54:	08003c99 	.word	0x08003c99
 8003c58:	08003d5b 	.word	0x08003d5b

08003c5c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca6:	f7fd fb1d 	bl	80012e4 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d03b      	beq.n	8003d32 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0220 	bic.w	r2, r2, #32
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0202 	bic.w	r2, r2, #2
 8003cd8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	2164      	movs	r1, #100	@ 0x64
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f000 f97a 	bl	8003fd8 <SPI_EndRxTxTransaction>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ffaa 	bl	8003c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d30:	e002      	b.n	8003d38 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff ff92 	bl	8003c5c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ff8f 	bl	8003c70 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0203 	bic.w	r2, r2, #3
 8003d76:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff ff79 	bl	8003c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dac:	f7fd fa9a 	bl	80012e4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dbc:	f7fd fa92 	bl	80012e4 <HAL_GetTick>
 8003dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dc2:	4b39      	ldr	r3, [pc, #228]	@ (8003ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	015b      	lsls	r3, r3, #5
 8003dc8:	0d1b      	lsrs	r3, r3, #20
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd2:	e054      	b.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d050      	beq.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ddc:	f7fd fa82 	bl	80012e4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d902      	bls.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d13d      	bne.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e0a:	d111      	bne.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e14:	d004      	beq.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d107      	bne.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e38:	d10f      	bne.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e017      	b.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d19b      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000054 	.word	0x20000054

08003eac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	@ 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ebe:	f7fd fa11 	bl	80012e4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ece:	f7fd fa09 	bl	80012e4 <HAL_GetTick>
 8003ed2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003edc:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00da      	lsls	r2, r3, #3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	0d1b      	lsrs	r3, r3, #20
 8003eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ef4:	e060      	b.n	8003fb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003efc:	d107      	bne.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d050      	beq.n	8003fb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f16:	f7fd f9e5 	bl	80012e4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d902      	bls.n	8003f2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d13d      	bne.n	8003fa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f44:	d111      	bne.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4e:	d004      	beq.n	8003f5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f58:	d107      	bne.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f72:	d10f      	bne.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e010      	b.n	8003fca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d196      	bne.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000054 	.word	0x20000054

08003fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff ff5b 	bl	8003eac <SPI_WaitFifoStateUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e027      	b.n	800405c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	2180      	movs	r1, #128	@ 0x80
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff fec0 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e014      	b.n	800405c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff34 	bl	8003eac <SPI_WaitFifoStateUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e000      	b.n	800405c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e040      	b.n	80040f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc ff72 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb76 	bl	8004794 <UART_SetConfig>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fca0 	bl	8004a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fd27 	bl	8004b44 <UART_CheckIdleState>
 80040f6:	4603      	mov	r3, r0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004114:	2b20      	cmp	r3, #32
 8004116:	d132      	bne.n	800417e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_UART_Receive_IT+0x24>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e02b      	b.n	8004180 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d018      	beq.n	800416e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	613b      	str	r3, [r7, #16]
   return(result);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	69f9      	ldr	r1, [r7, #28]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	61bb      	str	r3, [r7, #24]
   return(result);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	461a      	mov	r2, r3
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fdf5 	bl	8004d64 <UART_Start_Receive_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	e000      	b.n	8004180 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	@ 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ba      	sub	sp, #232	@ 0xe8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041b6:	4013      	ands	r3, r2
 80041b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d115      	bne.n	80041f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00f      	beq.n	80041f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 82ab 	beq.w	800473c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
      }
      return;
 80041ee:	e2a5      	b.n	800473c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8117 	beq.w	8004428 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800420a:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <HAL_UART_IRQHandler+0x298>)
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 810a 	beq.w	8004428 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <HAL_UART_IRQHandler+0xbc>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d011      	beq.n	8004274 <HAL_UART_IRQHandler+0xec>
 8004250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2202      	movs	r2, #2
 8004262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426a:	f043 0204 	orr.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d011      	beq.n	80042a4 <HAL_UART_IRQHandler+0x11c>
 8004280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d017      	beq.n	80042e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2208      	movs	r2, #8
 80042ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d6:	f043 0208 	orr.w	r2, r3, #8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <HAL_UART_IRQHandler+0x18a>
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8211 	beq.w	8004740 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b40      	cmp	r3, #64	@ 0x40
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800435e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004366:	2b00      	cmp	r3, #0
 8004368:	d04f      	beq.n	800440a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fdc0 	bl	8004ef0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437a:	2b40      	cmp	r3, #64	@ 0x40
 800437c:	d141      	bne.n	8004402 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1d9      	bne.n	800437e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d6:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <HAL_UART_IRQHandler+0x29c>)
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fa9c 	bl	800191c <HAL_DMA_Abort_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043f4:	4610      	mov	r0, r2
 80043f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e00f      	b.n	800441a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9b4 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e00b      	b.n	800441a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9b0 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e007      	b.n	800441a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9ac 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004418:	e192      	b.n	8004740 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441a:	bf00      	nop
    return;
 800441c:	e190      	b.n	8004740 <HAL_UART_IRQHandler+0x5b8>
 800441e:	bf00      	nop
 8004420:	04000120 	.word	0x04000120
 8004424:	08004fb9 	.word	0x08004fb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 814b 	bne.w	80046c8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8144 	beq.w	80046c8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 813d 	beq.w	80046c8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	f040 80b5 	bne.w	80045d0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004472:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8164 	beq.w	8004744 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004486:	429a      	cmp	r2, r3
 8004488:	f080 815c 	bcs.w	8004744 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004492:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b20      	cmp	r3, #32
 800449e:	f000 8086 	beq.w	80045ae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1da      	bne.n	80044a2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004510:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004514:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004518:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e1      	bne.n	80044ec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800453e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800454c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800454e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004552:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800455a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e3      	bne.n	8004528 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800457c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004590:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004592:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004596:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800459e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e4      	bne.n	800456e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd f97e 	bl	80018aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8d7 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ce:	e0b9      	b.n	8004744 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ab 	beq.w	8004748 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80045f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80a6 	beq.w	8004748 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800461e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004620:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e4      	bne.n	80045fc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	623b      	str	r3, [r7, #32]
   return(result);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004656:	633a      	str	r2, [r7, #48]	@ 0x30
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800465c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e3      	bne.n	8004632 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60fb      	str	r3, [r7, #12]
   return(result);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	617b      	str	r3, [r7, #20]
   return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e4      	bne.n	800467e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f85b 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c6:	e03f      	b.n	8004748 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <HAL_UART_IRQHandler+0x56a>
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fe4c 	bl	8005388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046f0:	e02d      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01c      	beq.n	800474c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
    }
    return;
 800471a:	e017      	b.n	800474c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_UART_IRQHandler+0x5c6>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fc55 	bl	8004fe4 <UART_EndTransmit_IT>
    return;
 800473a:	e008      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
      return;
 800473c:	bf00      	nop
 800473e:	e006      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004740:	bf00      	nop
 8004742:	e004      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_UART_IRQHandler+0x5c6>
    return;
 800474c:	bf00      	nop
  }

}
 800474e:	37e8      	adds	r7, #232	@ 0xe8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8a      	ldr	r3, [pc, #552]	@ (80049e8 <UART_SetConfig+0x254>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a78      	ldr	r2, [pc, #480]	@ (80049ec <UART_SetConfig+0x258>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d120      	bne.n	8004852 <UART_SetConfig+0xbe>
 8004810:	4b77      	ldr	r3, [pc, #476]	@ (80049f0 <UART_SetConfig+0x25c>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d817      	bhi.n	800484c <UART_SetConfig+0xb8>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x90>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004835 	.word	0x08004835
 8004828:	08004841 	.word	0x08004841
 800482c:	08004847 	.word	0x08004847
 8004830:	0800483b 	.word	0x0800483b
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e01d      	b.n	8004876 <UART_SetConfig+0xe2>
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e01a      	b.n	8004876 <UART_SetConfig+0xe2>
 8004840:	2304      	movs	r3, #4
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e017      	b.n	8004876 <UART_SetConfig+0xe2>
 8004846:	2308      	movs	r3, #8
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e014      	b.n	8004876 <UART_SetConfig+0xe2>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e011      	b.n	8004876 <UART_SetConfig+0xe2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a67      	ldr	r2, [pc, #412]	@ (80049f4 <UART_SetConfig+0x260>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d102      	bne.n	8004862 <UART_SetConfig+0xce>
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0xe2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a64      	ldr	r2, [pc, #400]	@ (80049f8 <UART_SetConfig+0x264>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d102      	bne.n	8004872 <UART_SetConfig+0xde>
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e001      	b.n	8004876 <UART_SetConfig+0xe2>
 8004872:	2310      	movs	r3, #16
 8004874:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487e:	d15a      	bne.n	8004936 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	2b08      	cmp	r3, #8
 8004884:	d827      	bhi.n	80048d6 <UART_SetConfig+0x142>
 8004886:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0xf8>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe fed6 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 80048b4:	61b8      	str	r0, [r7, #24]
        break;
 80048b6:	e013      	b.n	80048e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fe fef4 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 80048bc:	61b8      	str	r0, [r7, #24]
        break;
 80048be:	e00f      	b.n	80048e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b4e      	ldr	r3, [pc, #312]	@ (80049fc <UART_SetConfig+0x268>)
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e00c      	b.n	80048e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fe fe53 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80048ca:	61b8      	str	r0, [r7, #24]
        break;
 80048cc:	e008      	b.n	80048e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e004      	b.n	80048e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77bb      	strb	r3, [r7, #30]
        break;
 80048de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d074      	beq.n	80049d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	441a      	add	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d916      	bls.n	8004930 <UART_SetConfig+0x19c>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004908:	d212      	bcs.n	8004930 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f023 030f 	bic.w	r3, r3, #15
 8004912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	b29b      	uxth	r3, r3
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	b29a      	uxth	r2, r3
 8004920:	89fb      	ldrh	r3, [r7, #14]
 8004922:	4313      	orrs	r3, r2
 8004924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	89fa      	ldrh	r2, [r7, #14]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e04f      	b.n	80049d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	77bb      	strb	r3, [r7, #30]
 8004934:	e04c      	b.n	80049d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004936:	7ffb      	ldrb	r3, [r7, #31]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d828      	bhi.n	800498e <UART_SetConfig+0x1fa>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <UART_SetConfig+0x1b0>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fe7a 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 800496c:	61b8      	str	r0, [r7, #24]
        break;
 800496e:	e013      	b.n	8004998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fe98 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004974:	61b8      	str	r0, [r7, #24]
        break;
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <UART_SetConfig+0x268>)
 800497a:	61bb      	str	r3, [r7, #24]
        break;
 800497c:	e00c      	b.n	8004998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fdf7 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8004982:	61b8      	str	r0, [r7, #24]
        break;
 8004984:	e008      	b.n	8004998 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498a:	61bb      	str	r3, [r7, #24]
        break;
 800498c:	e004      	b.n	8004998 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	77bb      	strb	r3, [r7, #30]
        break;
 8004996:	bf00      	nop
    }

    if (pclk != 0U)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	085a      	lsrs	r2, r3, #1
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	441a      	add	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d909      	bls.n	80049cc <UART_SetConfig+0x238>
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049be:	d205      	bcs.n	80049cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	e001      	b.n	80049d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	efff69f3 	.word	0xefff69f3
 80049ec:	40013800 	.word	0x40013800
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40004400 	.word	0x40004400
 80049f8:	40004800 	.word	0x40004800
 80049fc:	007a1200 	.word	0x007a1200

08004a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01a      	beq.n	8004b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004afe:	d10a      	bne.n	8004b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b098      	sub	sp, #96	@ 0x60
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b54:	f7fc fbc6 	bl	80012e4 <HAL_GetTick>
 8004b58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d12e      	bne.n	8004bc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f88c 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d021      	beq.n	8004bc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e062      	b.n	8004c8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d149      	bne.n	8004c68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f856 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d03c      	beq.n	8004c68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e011      	b.n	8004c8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3758      	adds	r7, #88	@ 0x58
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	e049      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d045      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fc fb19 	bl	80012e4 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e048      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d031      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d110      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f8ff 	bl	8004ef0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d14:	d111      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f8e5 	bl	8004ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0a6      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b097      	sub	sp, #92	@ 0x5c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d96:	d10e      	bne.n	8004db6 <UART_Start_Receive_IT+0x52>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <UART_Start_Receive_IT+0x48>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004da6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004daa:	e02d      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	22ff      	movs	r2, #255	@ 0xff
 8004db0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004db4:	e028      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <UART_Start_Receive_IT+0x76>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <UART_Start_Receive_IT+0x6c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dce:	e01b      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	227f      	movs	r2, #127	@ 0x7f
 8004dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dd8:	e016      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de2:	d10d      	bne.n	8004e00 <UART_Start_Receive_IT+0x9c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <UART_Start_Receive_IT+0x92>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	227f      	movs	r2, #127	@ 0x7f
 8004df0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004df4:	e008      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	223f      	movs	r2, #63	@ 0x3f
 8004dfa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dfe:	e003      	b.n	8004e08 <UART_Start_Receive_IT+0xa4>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2222      	movs	r2, #34	@ 0x22
 8004e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e54:	d107      	bne.n	8004e66 <UART_Start_Receive_IT+0x102>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a21      	ldr	r2, [pc, #132]	@ (8004ee8 <UART_Start_Receive_IT+0x184>)
 8004e62:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e64:	e002      	b.n	8004e6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a20      	ldr	r2, [pc, #128]	@ (8004eec <UART_Start_Receive_IT+0x188>)
 8004e6a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_Start_Receive_IT+0x110>
 8004ea6:	e018      	b.n	8004eda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f043 0320 	orr.w	r3, r3, #32
 8004ebc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	375c      	adds	r7, #92	@ 0x5c
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	080051e1 	.word	0x080051e1
 8004eec:	08005039 	.word	0x08005039

08004ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b095      	sub	sp, #84	@ 0x54
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e6      	bne.n	8004ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d118      	bne.n	8004f98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6979      	ldr	r1, [r7, #20]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	613b      	str	r3, [r7, #16]
   return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fac:	bf00      	nop
 8004fae:	3754      	adds	r7, #84	@ 0x54
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff fbc6 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fb92 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005030:	bf00      	nop
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b09c      	sub	sp, #112	@ 0x70
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005046:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005050:	2b22      	cmp	r3, #34	@ 0x22
 8005052:	f040 80b9 	bne.w	80051c8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800505c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005064:	b2d9      	uxtb	r1, r3
 8005066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800506a:	b2da      	uxtb	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	400a      	ands	r2, r1
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 809c 	bne.w	80051d8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d018      	beq.n	800515a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	623b      	str	r3, [r7, #32]
   return(result);
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800513c:	663b      	str	r3, [r7, #96]	@ 0x60
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005146:	633b      	str	r3, [r7, #48]	@ 0x30
 8005148:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800514c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515e:	2b01      	cmp	r3, #1
 8005160:	d12e      	bne.n	80051c0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	60fb      	str	r3, [r7, #12]
   return(result);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	617b      	str	r3, [r7, #20]
   return(result);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e6      	bne.n	8005168 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d103      	bne.n	80051b0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2210      	movs	r2, #16
 80051ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fadf 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051be:	e00b      	b.n	80051d8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fb f989 	bl	80004d8 <HAL_UART_RxCpltCallback>
}
 80051c6:	e007      	b.n	80051d8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0208 	orr.w	r2, r2, #8
 80051d6:	619a      	str	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	3770      	adds	r7, #112	@ 0x70
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b09c      	sub	sp, #112	@ 0x70
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f8:	2b22      	cmp	r3, #34	@ 0x22
 80051fa:	f040 80b9 	bne.w	8005370 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800520e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005212:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005216:	4013      	ands	r3, r2
 8005218:	b29a      	uxth	r2, r3
 800521a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800521c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	f040 809c 	bne.w	8005380 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800525c:	667b      	str	r3, [r7, #100]	@ 0x64
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005266:	657b      	str	r3, [r7, #84]	@ 0x54
 8005268:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800526c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e6      	bne.n	8005248 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	663b      	str	r3, [r7, #96]	@ 0x60
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800529a:	643a      	str	r2, [r7, #64]	@ 0x40
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d018      	beq.n	8005302 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005306:	2b01      	cmp	r3, #1
 8005308:	d12e      	bne.n	8005368 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	60bb      	str	r3, [r7, #8]
   return(result);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	613b      	str	r3, [r7, #16]
   return(result);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d103      	bne.n	8005358 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fa0b 	bl	800477c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005366:	e00b      	b.n	8005380 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fb f8b5 	bl	80004d8 <HAL_UART_RxCpltCallback>
}
 800536e:	e007      	b.n	8005380 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]
}
 8005380:	bf00      	nop
 8005382:	3770      	adds	r7, #112	@ 0x70
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <calloc>:
 800539c:	4b02      	ldr	r3, [pc, #8]	@ (80053a8 <calloc+0xc>)
 800539e:	460a      	mov	r2, r1
 80053a0:	4601      	mov	r1, r0
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	f000 b802 	b.w	80053ac <_calloc_r>
 80053a8:	20000060 	.word	0x20000060

080053ac <_calloc_r>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	fba1 5402 	umull	r5, r4, r1, r2
 80053b2:	b93c      	cbnz	r4, 80053c4 <_calloc_r+0x18>
 80053b4:	4629      	mov	r1, r5
 80053b6:	f000 f837 	bl	8005428 <_malloc_r>
 80053ba:	4606      	mov	r6, r0
 80053bc:	b928      	cbnz	r0, 80053ca <_calloc_r+0x1e>
 80053be:	2600      	movs	r6, #0
 80053c0:	4630      	mov	r0, r6
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	220c      	movs	r2, #12
 80053c6:	6002      	str	r2, [r0, #0]
 80053c8:	e7f9      	b.n	80053be <_calloc_r+0x12>
 80053ca:	462a      	mov	r2, r5
 80053cc:	4621      	mov	r1, r4
 80053ce:	f000 f8b7 	bl	8005540 <memset>
 80053d2:	e7f5      	b.n	80053c0 <_calloc_r+0x14>

080053d4 <free>:
 80053d4:	4b02      	ldr	r3, [pc, #8]	@ (80053e0 <free+0xc>)
 80053d6:	4601      	mov	r1, r0
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	f000 b8f5 	b.w	80055c8 <_free_r>
 80053de:	bf00      	nop
 80053e0:	20000060 	.word	0x20000060

080053e4 <sbrk_aligned>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005424 <sbrk_aligned+0x40>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	6831      	ldr	r1, [r6, #0]
 80053ec:	4605      	mov	r5, r0
 80053ee:	b911      	cbnz	r1, 80053f6 <sbrk_aligned+0x12>
 80053f0:	f000 f8ae 	bl	8005550 <_sbrk_r>
 80053f4:	6030      	str	r0, [r6, #0]
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 f8a9 	bl	8005550 <_sbrk_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d103      	bne.n	800540a <sbrk_aligned+0x26>
 8005402:	f04f 34ff 	mov.w	r4, #4294967295
 8005406:	4620      	mov	r0, r4
 8005408:	bd70      	pop	{r4, r5, r6, pc}
 800540a:	1cc4      	adds	r4, r0, #3
 800540c:	f024 0403 	bic.w	r4, r4, #3
 8005410:	42a0      	cmp	r0, r4
 8005412:	d0f8      	beq.n	8005406 <sbrk_aligned+0x22>
 8005414:	1a21      	subs	r1, r4, r0
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f89a 	bl	8005550 <_sbrk_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d1f2      	bne.n	8005406 <sbrk_aligned+0x22>
 8005420:	e7ef      	b.n	8005402 <sbrk_aligned+0x1e>
 8005422:	bf00      	nop
 8005424:	200002a4 	.word	0x200002a4

08005428 <_malloc_r>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	1ccd      	adds	r5, r1, #3
 800542e:	f025 0503 	bic.w	r5, r5, #3
 8005432:	3508      	adds	r5, #8
 8005434:	2d0c      	cmp	r5, #12
 8005436:	bf38      	it	cc
 8005438:	250c      	movcc	r5, #12
 800543a:	2d00      	cmp	r5, #0
 800543c:	4606      	mov	r6, r0
 800543e:	db01      	blt.n	8005444 <_malloc_r+0x1c>
 8005440:	42a9      	cmp	r1, r5
 8005442:	d904      	bls.n	800544e <_malloc_r+0x26>
 8005444:	230c      	movs	r3, #12
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	2000      	movs	r0, #0
 800544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005524 <_malloc_r+0xfc>
 8005452:	f000 f869 	bl	8005528 <__malloc_lock>
 8005456:	f8d8 3000 	ldr.w	r3, [r8]
 800545a:	461c      	mov	r4, r3
 800545c:	bb44      	cbnz	r4, 80054b0 <_malloc_r+0x88>
 800545e:	4629      	mov	r1, r5
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff ffbf 	bl	80053e4 <sbrk_aligned>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	4604      	mov	r4, r0
 800546a:	d158      	bne.n	800551e <_malloc_r+0xf6>
 800546c:	f8d8 4000 	ldr.w	r4, [r8]
 8005470:	4627      	mov	r7, r4
 8005472:	2f00      	cmp	r7, #0
 8005474:	d143      	bne.n	80054fe <_malloc_r+0xd6>
 8005476:	2c00      	cmp	r4, #0
 8005478:	d04b      	beq.n	8005512 <_malloc_r+0xea>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	4639      	mov	r1, r7
 800547e:	4630      	mov	r0, r6
 8005480:	eb04 0903 	add.w	r9, r4, r3
 8005484:	f000 f864 	bl	8005550 <_sbrk_r>
 8005488:	4581      	cmp	r9, r0
 800548a:	d142      	bne.n	8005512 <_malloc_r+0xea>
 800548c:	6821      	ldr	r1, [r4, #0]
 800548e:	1a6d      	subs	r5, r5, r1
 8005490:	4629      	mov	r1, r5
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff ffa6 	bl	80053e4 <sbrk_aligned>
 8005498:	3001      	adds	r0, #1
 800549a:	d03a      	beq.n	8005512 <_malloc_r+0xea>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	442b      	add	r3, r5
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	f8d8 3000 	ldr.w	r3, [r8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	bb62      	cbnz	r2, 8005504 <_malloc_r+0xdc>
 80054aa:	f8c8 7000 	str.w	r7, [r8]
 80054ae:	e00f      	b.n	80054d0 <_malloc_r+0xa8>
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	1b52      	subs	r2, r2, r5
 80054b4:	d420      	bmi.n	80054f8 <_malloc_r+0xd0>
 80054b6:	2a0b      	cmp	r2, #11
 80054b8:	d917      	bls.n	80054ea <_malloc_r+0xc2>
 80054ba:	1961      	adds	r1, r4, r5
 80054bc:	42a3      	cmp	r3, r4
 80054be:	6025      	str	r5, [r4, #0]
 80054c0:	bf18      	it	ne
 80054c2:	6059      	strne	r1, [r3, #4]
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	bf08      	it	eq
 80054c8:	f8c8 1000 	streq.w	r1, [r8]
 80054cc:	5162      	str	r2, [r4, r5]
 80054ce:	604b      	str	r3, [r1, #4]
 80054d0:	4630      	mov	r0, r6
 80054d2:	f000 f82f 	bl	8005534 <__malloc_unlock>
 80054d6:	f104 000b 	add.w	r0, r4, #11
 80054da:	1d23      	adds	r3, r4, #4
 80054dc:	f020 0007 	bic.w	r0, r0, #7
 80054e0:	1ac2      	subs	r2, r0, r3
 80054e2:	bf1c      	itt	ne
 80054e4:	1a1b      	subne	r3, r3, r0
 80054e6:	50a3      	strne	r3, [r4, r2]
 80054e8:	e7af      	b.n	800544a <_malloc_r+0x22>
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	bf0c      	ite	eq
 80054f0:	f8c8 2000 	streq.w	r2, [r8]
 80054f4:	605a      	strne	r2, [r3, #4]
 80054f6:	e7eb      	b.n	80054d0 <_malloc_r+0xa8>
 80054f8:	4623      	mov	r3, r4
 80054fa:	6864      	ldr	r4, [r4, #4]
 80054fc:	e7ae      	b.n	800545c <_malloc_r+0x34>
 80054fe:	463c      	mov	r4, r7
 8005500:	687f      	ldr	r7, [r7, #4]
 8005502:	e7b6      	b.n	8005472 <_malloc_r+0x4a>
 8005504:	461a      	mov	r2, r3
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	42a3      	cmp	r3, r4
 800550a:	d1fb      	bne.n	8005504 <_malloc_r+0xdc>
 800550c:	2300      	movs	r3, #0
 800550e:	6053      	str	r3, [r2, #4]
 8005510:	e7de      	b.n	80054d0 <_malloc_r+0xa8>
 8005512:	230c      	movs	r3, #12
 8005514:	6033      	str	r3, [r6, #0]
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f80c 	bl	8005534 <__malloc_unlock>
 800551c:	e794      	b.n	8005448 <_malloc_r+0x20>
 800551e:	6005      	str	r5, [r0, #0]
 8005520:	e7d6      	b.n	80054d0 <_malloc_r+0xa8>
 8005522:	bf00      	nop
 8005524:	200002a8 	.word	0x200002a8

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__malloc_lock+0x8>)
 800552a:	f000 b84b 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	200003e8 	.word	0x200003e8

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__malloc_unlock+0x8>)
 8005536:	f000 b846 	b.w	80055c6 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	200003e8 	.word	0x200003e8

08005540 <memset>:
 8005540:	4402      	add	r2, r0
 8005542:	4603      	mov	r3, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d06      	ldr	r5, [pc, #24]	@ (800556c <_sbrk_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb fdb6 	bl	80010cc <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200003e4 	.word	0x200003e4

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	@ (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000060 	.word	0x20000060

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	@ (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	@ (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	@ (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	@ (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 f864 	bl	800565c <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	080057ac 	.word	0x080057ac
 80055b8:	080057ac 	.word	0x080057ac
 80055bc:	080057ac 	.word	0x080057ac
 80055c0:	080057b0 	.word	0x080057b0

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <_free_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d041      	beq.n	8005654 <_free_r+0x8c>
 80055d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d4:	1f0c      	subs	r4, r1, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfb8      	it	lt
 80055da:	18e4      	addlt	r4, r4, r3
 80055dc:	f7ff ffa4 	bl	8005528 <__malloc_lock>
 80055e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005658 <_free_r+0x90>)
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	b933      	cbnz	r3, 80055f4 <_free_r+0x2c>
 80055e6:	6063      	str	r3, [r4, #4]
 80055e8:	6014      	str	r4, [r2, #0]
 80055ea:	4628      	mov	r0, r5
 80055ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f0:	f7ff bfa0 	b.w	8005534 <__malloc_unlock>
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	d908      	bls.n	800560a <_free_r+0x42>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	1821      	adds	r1, r4, r0
 80055fc:	428b      	cmp	r3, r1
 80055fe:	bf01      	itttt	eq
 8005600:	6819      	ldreq	r1, [r3, #0]
 8005602:	685b      	ldreq	r3, [r3, #4]
 8005604:	1809      	addeq	r1, r1, r0
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	e7ed      	b.n	80055e6 <_free_r+0x1e>
 800560a:	461a      	mov	r2, r3
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b10b      	cbz	r3, 8005614 <_free_r+0x4c>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d9fa      	bls.n	800560a <_free_r+0x42>
 8005614:	6811      	ldr	r1, [r2, #0]
 8005616:	1850      	adds	r0, r2, r1
 8005618:	42a0      	cmp	r0, r4
 800561a:	d10b      	bne.n	8005634 <_free_r+0x6c>
 800561c:	6820      	ldr	r0, [r4, #0]
 800561e:	4401      	add	r1, r0
 8005620:	1850      	adds	r0, r2, r1
 8005622:	4283      	cmp	r3, r0
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	d1e0      	bne.n	80055ea <_free_r+0x22>
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	6053      	str	r3, [r2, #4]
 800562e:	4408      	add	r0, r1
 8005630:	6010      	str	r0, [r2, #0]
 8005632:	e7da      	b.n	80055ea <_free_r+0x22>
 8005634:	d902      	bls.n	800563c <_free_r+0x74>
 8005636:	230c      	movs	r3, #12
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	e7d6      	b.n	80055ea <_free_r+0x22>
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	1821      	adds	r1, r4, r0
 8005640:	428b      	cmp	r3, r1
 8005642:	bf04      	itt	eq
 8005644:	6819      	ldreq	r1, [r3, #0]
 8005646:	685b      	ldreq	r3, [r3, #4]
 8005648:	6063      	str	r3, [r4, #4]
 800564a:	bf04      	itt	eq
 800564c:	1809      	addeq	r1, r1, r0
 800564e:	6021      	streq	r1, [r4, #0]
 8005650:	6054      	str	r4, [r2, #4]
 8005652:	e7ca      	b.n	80055ea <_free_r+0x22>
 8005654:	bd38      	pop	{r3, r4, r5, pc}
 8005656:	bf00      	nop
 8005658:	200002a8 	.word	0x200002a8

0800565c <_init>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr

08005668 <_fini>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr
