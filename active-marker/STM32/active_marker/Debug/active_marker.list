
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ed  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00033010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b147  00000000  00000000  00033c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011823  00000000  00000000  0004ed8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d2a6  00000000  00000000  000605b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd858  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003768  00000000  00000000  000fd8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047a0 	.word	0x080047a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080047a0 	.word	0x080047a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <VEML6030_init+0x44>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00, 0x00 };
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <VEML6030_init+0x48>)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	8019      	strh	r1, [r3, #0]
 8000a22:	3302      	adds	r3, #2
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	701a      	strb	r2, [r3, #0]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 3, 100);
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <VEML6030_init+0x44>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2303      	movs	r3, #3
 8000a3a:	f001 f953 	bl	8001ce4 <HAL_I2C_Master_Transmit>
 8000a3e:	4603      	mov	r3, r0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000028 	.word	0x20000028
 8000a4c:	080047b8 	.word	0x080047b8

08000a50 <VEML6030_getLux>:
/*
 * @brief get lux data
 * @param sensor address
 * @return lux
 */
float VEML6030_getLux(uint8_t addr) {
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  float gain = VEML6030_getGain(addr);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f855 	bl	8000b0c <VEML6030_getGain>
 8000a62:	ed87 0a05 	vstr	s0, [r7, #20]
  uint16_t inttime = VEML6030_getIntTime(addr);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f881 	bl	8000b70 <VEML6030_getIntTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	827b      	strh	r3, [r7, #18]
  uint16_t als = VEML6030_getALS(addr);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f8b1 	bl	8000bdc <VEML6030_getALS>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	823b      	strh	r3, [r7, #16]
  float resolution = (1.8432 / ((float) inttime / 25.0)) * (0.125 / gain);
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a88:	ee17 0a90 	vmov	r0, s15
 8000a8c:	f7ff fd00 	bl	8000490 <__aeabi_f2d>
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <VEML6030_getLux+0xb8>)
 8000a96:	f7ff fe7d 	bl	8000794 <__aeabi_ddiv>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	a118      	add	r1, pc, #96	; (adr r1, 8000b00 <VEML6030_getLux+0xb0>)
 8000aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000aa4:	f7ff fe76 	bl	8000794 <__aeabi_ddiv>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	4614      	mov	r4, r2
 8000aae:	461d      	mov	r5, r3
 8000ab0:	6978      	ldr	r0, [r7, #20]
 8000ab2:	f7ff fced 	bl	8000490 <__aeabi_f2d>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000ac2:	f7ff fe67 	bl	8000794 <__aeabi_ddiv>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	460b      	mov	r3, r1
 8000aca:	4620      	mov	r0, r4
 8000acc:	4629      	mov	r1, r5
 8000ace:	f7ff fd37 	bl	8000540 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff ff43 	bl	8000964 <__aeabi_d2f>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60fb      	str	r3, [r7, #12]
  return als * resolution;
 8000ae2:	8a3b      	ldrh	r3, [r7, #16]
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000af4:	eeb0 0a67 	vmov.f32	s0, s15
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	487fcb92 	.word	0x487fcb92
 8000b04:	3ffd7dbf 	.word	0x3ffd7dbf
 8000b08:	40390000 	.word	0x40390000

08000b0c <VEML6030_getGain>:
/*
 * @brief get gain data
 * @param addr sensor address
 * @return gain
 */
float VEML6030_getGain(uint8_t addr) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  float gain = 0;
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f86b 	bl	8000bfc <VEML6030_readWord>
 8000b26:	4603      	mov	r3, r0
 8000b28:	827b      	strh	r3, [r7, #18]
  int x0 = VEML6030_readBit(config, 11);
 8000b2a:	8a7b      	ldrh	r3, [r7, #18]
 8000b2c:	210b      	movs	r1, #11
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f88e 	bl	8000c50 <VEML6030_readBit>
 8000b34:	4603      	mov	r3, r0
 8000b36:	60fb      	str	r3, [r7, #12]
  int x1 = VEML6030_readBit(config, 12);
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	210c      	movs	r1, #12
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f887 	bl	8000c50 <VEML6030_readBit>
 8000b42:	4603      	mov	r3, r0
 8000b44:	60bb      	str	r3, [r7, #8]
  gain = (x0 - 3 * x1);
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	1ad2      	subs	r2, r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b5a:	edc7 7a05 	vstr	s15, [r7, #20]
  return gain * gain;
 8000b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b62:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f83c 	bl	8000bfc <VEML6030_readWord>
 8000b84:	4603      	mov	r3, r0
 8000b86:	83fb      	strh	r3, [r7, #30]
  int x2x1 = (config >> 6) & 0x03;
 8000b88:	8bfb      	ldrh	r3, [r7, #30]
 8000b8a:	099b      	lsrs	r3, r3, #6
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	61bb      	str	r3, [r7, #24]
  int x3 = VEML6030_readBit(config, 8);
 8000b94:	8bfb      	ldrh	r3, [r7, #30]
 8000b96:	2108      	movs	r1, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f859 	bl	8000c50 <VEML6030_readBit>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	617b      	str	r3, [r7, #20]
  int x4 = VEML6030_readBit(config, 9);
 8000ba2:	8bfb      	ldrh	r3, [r7, #30]
 8000ba4:	2109      	movs	r1, #9
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f852 	bl	8000c50 <VEML6030_readBit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	613b      	str	r3, [r7, #16]
  uint16_t IntTime = 100 * x2x1 * x2x1 / ((x3 + x4) * (x3 + x4));
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fb03 f303 	mul.w	r3, r3, r3
 8000bb6:	2264      	movs	r2, #100	; 0x64
 8000bb8:	fb03 f202 	mul.w	r2, r3, r2
 8000bbc:	6979      	ldr	r1, [r7, #20]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	6939      	ldr	r1, [r7, #16]
 8000bc6:	4401      	add	r1, r0
 8000bc8:	fb01 f303 	mul.w	r3, r1, r3
 8000bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bd0:	81fb      	strh	r3, [r7, #14]
  return IntTime;
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <VEML6030_getALS>:
/*
 * @brief get row illuminance data
 * @param addr address
 * @return row data
 */
uint16_t VEML6030_getALS(uint8_t addr){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  return VEML6030_readWord(addr, ALS_CMD);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2104      	movs	r1, #4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f806 	bl	8000bfc <VEML6030_readWord>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af04      	add	r7, sp, #16
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
  int data = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  uint8_t buf[2] = { };
 8000c10:	2300      	movs	r3, #0
 8000c12:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <VEML6030_readWord+0x50>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2302      	movs	r3, #2
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f001 f94c 	bl	8001ecc <HAL_I2C_Mem_Read>
  data = (buf[1] << 8) + buf[0];
 8000c34:	7a7b      	ldrb	r3, [r7, #9]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	7a3a      	ldrb	r2, [r7, #8]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  return data;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b29b      	uxth	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000028 	.word	0x20000028

08000c50 <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	80fb      	strh	r3, [r7, #6]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	797b      	ldrb	r3, [r7, #5]
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f000 fbcd 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f825 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 f985 	bl	8000f98 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000c8e:	f000 f8f7 	bl	8000e80 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000c92:	f000 f913 	bl	8000ebc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c96:	f000 f94f 	bl	8000f38 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000c9a:	f000 f87d 	bl	8000d98 <MX_CAN_Init>
  MX_I2C1_Init();
 8000c9e:	f000 f8af 	bl	8000e00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  const float cycle = 1000/60;
 8000ca2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000ca6:	607b      	str	r3, [r7, #4]
  VEML6030_init(&hi2c1, SENS_ADDR_0);
 8000ca8:	2190      	movs	r1, #144	; 0x90
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <main+0x50>)
 8000cac:	f7ff feaa 	bl	8000a04 <VEML6030_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    g_lux = VEML6030_getLux(SENS_ADDR_0);
 8000cb0:	2090      	movs	r0, #144	; 0x90
 8000cb2:	f7ff fecd 	bl	8000a50 <VEML6030_getLux>
 8000cb6:	eef0 7a40 	vmov.f32	s15, s0
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <main+0x54>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
    CycleController(cycle);
 8000cc0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000cc4:	f000 fb4e 	bl	8001364 <CycleController>
    g_lux = VEML6030_getLux(SENS_ADDR_0);
 8000cc8:	e7f2      	b.n	8000cb0 <main+0x34>
 8000cca:	bf00      	nop
 8000ccc:	20000054 	.word	0x20000054
 8000cd0:	200001a4 	.word	0x200001a4

08000cd4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fd54 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000d08:	230b      	movs	r3, #11
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
      | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000d12:	2303      	movs	r3, #3
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d16:	2301      	movs	r3, #1
 8000d18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000d2c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fd2c 	bl	8002794 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x72>
    Error_Handler();
 8000d42:	f000 f99b 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fd54 	bl	8003810 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x9e>
    Error_Handler();
 8000d6e:	f000 f985 	bl	800107c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection =
 8000d72:	2321      	movs	r3, #33	; 0x21
 8000d74:	607b      	str	r3, [r7, #4]
      RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 ff7d 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xbc>
    Error_Handler();
 8000d8c:	f000 f976 	bl	800107c <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3758      	adds	r7, #88	; 0x58
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_CAN_Init+0x60>)
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <MX_CAN_Init+0x64>)
 8000da0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_CAN_Init+0x60>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_CAN_Init+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_CAN_Init+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_CAN_Init+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_CAN_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_CAN_Init+0x60>)
 8000de6:	f000 fb81 	bl	80014ec <HAL_CAN_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_CAN_Init+0x5c>
    Error_Handler();
 8000df0:	f000 f944 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	40006400 	.word	0x40006400

08000e00 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_I2C1_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MX_I2C1_Init+0x7c>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e3c:	f000 fec2 	bl	8001bc4 <HAL_I2C_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C1_Init+0x4a>
    Error_Handler();
 8000e46:	f000 f919 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e4e:	f001 fbbb 	bl	80025c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000e58:	f000 f910 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_I2C1_Init+0x74>)
 8000e60:	f001 fbfd 	bl	800265e <HAL_I2CEx_ConfigDigitalFilter>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C1_Init+0x6e>
    Error_Handler();
 8000e6a:	f000 f907 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000054 	.word	0x20000054
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	2000090e 	.word	0x2000090e

08000e80 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <MX_IWDG_Init+0x38>)
 8000e88:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e96:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000e9a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e9e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_IWDG_Init+0x34>)
 8000ea2:	f001 fc28 	bl	80026f6 <HAL_IWDG_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_IWDG_Init+0x30>
    Error_Handler();
 8000eac:	f000 f8e6 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000a8 	.word	0x200000a8
 8000eb8:	40003000 	.word	0x40003000

08000ebc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_SPI1_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ed8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000edc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000ef4:	2218      	movs	r2, #24
 8000ef6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI1_Init+0x74>)
 8000f1e:	f002 ffd5 	bl	8003ecc <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0x70>
    Error_Handler();
 8000f28:	f000 f8a8 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000b8 	.word	0x200000b8
 8000f34:	40013000 	.word	0x40013000

08000f38 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART1_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f7c:	f003 f849 	bl	8004012 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8000f86:	f000 f879 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000011c 	.word	0x2000011c
 8000f94:	40013800 	.word	0x40013800

08000f98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a30      	ldr	r2, [pc, #192]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a24      	ldr	r2, [pc, #144]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <MX_GPIO_Init+0xdc>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	481f      	ldr	r0, [pc, #124]	; (8001078 <MX_GPIO_Init+0xe0>)
 8000ffc:	f000 fdca 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_SEL1_Pin USER_SEL2_Pin USER_BTN1_Pin USER_BTN2_Pin
   ID4_Pin */
  GPIO_InitStruct.Pin = USER_SEL1_Pin | USER_SEL2_Pin | USER_BTN1_Pin
 8001000:	f248 0356 	movw	r3, #32854	; 0x8056
 8001004:	60fb      	str	r3, [r7, #12]
      | USER_BTN2_Pin | ID4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f000 fc4a 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 800101c:	2308      	movs	r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001020:	2303      	movs	r3, #3
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f000 fc3d 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001036:	2302      	movs	r3, #2
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4619      	mov	r1, r3
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <MX_GPIO_Init+0xe0>)
 800104e:	f000 fc2f 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID8_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin | ID8_Pin | ID2_Pin;
 8001052:	2338      	movs	r3, #56	; 0x38
 8001054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_GPIO_Init+0xe0>)
 8001066:	f000 fc23 	bl	80018b0 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48000400 	.word	0x48000400

0800107c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <HAL_CAN_MspInit+0x80>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d129      	bne.n	8001146 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_CAN_MspInit+0x84>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_CAN_MspInit+0x84>)
 80010f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_CAN_MspInit+0x84>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_CAN_MspInit+0x84>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_CAN_MspInit+0x84>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_CAN_MspInit+0x84>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001122:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001134:	2309      	movs	r3, #9
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fbb5 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40006400 	.word	0x40006400
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_I2C_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d127      	bne.n	80011ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23c0      	movs	r3, #192	; 0xc0
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001196:	2312      	movs	r3, #18
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a2:	2304      	movs	r3, #4
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <HAL_I2C_MspInit+0x84>)
 80011ae:	f000 fb7f 	bl	80018b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 80011b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_I2C_MspInit+0x80>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_SPI_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d128      	bne.n	8001254 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_SPI_MspInit+0x80>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_SPI_MspInit+0x80>)
 8001208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_SPI_MspInit+0x80>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_SPI_MspInit+0x80>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_SPI_MspInit+0x80>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	6153      	str	r3, [r2, #20]
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_SPI_MspInit+0x80>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001232:	23a0      	movs	r3, #160	; 0xa0
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001242:	2305      	movs	r3, #5
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f000 fb2e 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40013000 	.word	0x40013000
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0x80>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d129      	bne.n	80012da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0x84>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_UART_MspInit+0x84>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x84>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_MspInit+0x84>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x84>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_UART_MspInit+0x84>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c8:	2307      	movs	r3, #7
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f000 faeb 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8b8 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
void CycleController(float ms) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	ed87 0a01 	vstr	s0, [r7, #4]
  static bool init = false;
  static uint32_t old_time = 0;
  if (!init) {
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <CycleController+0x60>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f083 0301 	eor.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <CycleController+0x28>
    old_time = HAL_GetTick();
 800137c:	f000 f8aa 	bl	80014d4 <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <CycleController+0x64>)
 8001384:	6013      	str	r3, [r2, #0]
    init = true;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <CycleController+0x60>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
  }
  while (HAL_GetTick() - old_time < ms)
 800138c:	bf00      	nop
 800138e:	f000 f8a1 	bl	80014d4 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <CycleController+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dcee      	bgt.n	800138e <CycleController+0x2a>
    ;
  old_time = HAL_GetTick();
 80013b0:	f000 f890 	bl	80014d4 <HAL_GetTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <CycleController+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001a8 	.word	0x200001a8
 80013c8:	200001ac 	.word	0x200001ac

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffb6 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 f9a5 	bl	8004748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fc3d 	bl	8000c7c <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001410:	080047fc 	.word	0x080047fc
  ldr r2, =_sbss
 8001414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001418:	200001b4 	.word	0x200001b4

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 fa09 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe24 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fa13 	bl	8001896 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f9e9 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	200001b0 	.word	0x200001b0

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200001b0 	.word	0x200001b0

080014ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ed      	b.n	80016da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fde0 	bl	80010d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff ffd8 	bl	80014d4 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff ffd4 	bl	80014d4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0c5      	b.n	80016da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0e5      	beq.n	8001528 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0202 	bic.w	r2, r2, #2
 800156a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff ffb2 	bl	80014d4 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001572:	e012      	b.n	800159a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001574:	f7ff ffae 	bl	80014d4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d90b      	bls.n	800159a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e09f      	b.n	80016da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e5      	bne.n	8001574 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7e5b      	ldrb	r3, [r3, #25]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e007      	b.n	80015fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e9b      	ldrb	r3, [r3, #26]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0220 	orr.w	r2, r2, #32
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0220 	bic.w	r2, r2, #32
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7edb      	ldrb	r3, [r3, #27]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0210 	bic.w	r2, r2, #16
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0210 	orr.w	r2, r2, #16
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7f1b      	ldrb	r3, [r3, #28]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0208 	bic.w	r2, r2, #8
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7f5b      	ldrb	r3, [r3, #29]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0204 	orr.w	r2, r2, #4
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	ea42 0103 	orr.w	r1, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff47 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff5c 	bl	800172c <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffb0 	bl	8001804 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e14e      	b.n	8001b5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8140 	beq.w	8001b58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 809a 	beq.w	8001b58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1e0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_GPIO_Init+0x2d4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_GPIO_Init+0x2d8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1d8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1d4>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a84:	2305      	movs	r3, #5
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a90:	2300      	movs	r3, #0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa2:	4937      	ldr	r1, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b52:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f aea9 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e081      	b.n	8001cda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fab4 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e006      	b.n	8001c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d104      	bne.n	8001c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	817b      	strh	r3, [r7, #10]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	f040 80da 	bne.w	8001eba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_I2C_Master_Transmit+0x30>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0d3      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fbda 	bl	80014d4 <HAL_GetTick>
 8001d20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2319      	movs	r3, #25
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fa5e 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0be      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2bff      	cmp	r3, #255	; 0xff
 8001d6e:	d90e      	bls.n	8001d8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	8979      	ldrh	r1, [r7, #10]
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fbec 	bl	8002564 <I2C_TransferConfig>
 8001d8c:	e06c      	b.n	8001e68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	8979      	ldrh	r1, [r7, #10]
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fbdb 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dae:	e05b      	b.n	8001e68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	6a39      	ldr	r1, [r7, #32]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fa6a 	bl	800228e <I2C_WaitOnTXISFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e07b      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d034      	beq.n	8001e68 <HAL_I2C_Master_Transmit+0x184>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d130      	bne.n	8001e68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f9ed 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e04d      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2bff      	cmp	r3, #255	; 0xff
 8001e28:	d90e      	bls.n	8001e48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fb8f 	bl	8002564 <I2C_TransferConfig>
 8001e46:	e00f      	b.n	8001e68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fb7e 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d19e      	bne.n	8001db0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fa50 	bl	800231c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e01a      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	80002000 	.word	0x80002000
 8001ec8:	fe00e800 	.word	0xfe00e800

08001ecc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	f040 80fd 	bne.w	80020ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_I2C_Mem_Read+0x34>
 8001efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0f1      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Read+0x4e>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0ea      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f22:	f7ff fad7 	bl	80014d4 <HAL_GetTick>
 8001f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2319      	movs	r3, #25
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f95b 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d5      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2222      	movs	r2, #34	; 0x22
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6c:	88f8      	ldrh	r0, [r7, #6]
 8001f6e:	893a      	ldrh	r2, [r7, #8]
 8001f70:	8979      	ldrh	r1, [r7, #10]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f8bf 	bl	8002100 <I2C_RequestMemoryRead>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ad      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d90e      	bls.n	8001fbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	8979      	ldrh	r1, [r7, #10]
 8001fac:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_I2C_Mem_Read+0x22c>)
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fad5 	bl	8002564 <I2C_TransferConfig>
 8001fba:	e00f      	b.n	8001fdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_I2C_Mem_Read+0x22c>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fac4 	bl	8002564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f902 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07c      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d034      	beq.n	800209c <HAL_I2C_Mem_Read+0x1d0>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d130      	bne.n	800209c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f8d3 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04d      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d90e      	bls.n	800207c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	2300      	movs	r3, #0
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fa75 	bl	8002564 <I2C_TransferConfig>
 800207a:	e00f      	b.n	800209c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fa64 	bl	8002564 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d19a      	bne.n	8001fdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f936 	bl	800231c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01a      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2220      	movs	r2, #32
 80020c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_I2C_Mem_Read+0x230>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	80002400 	.word	0x80002400
 80020fc:	fe00e800 	.word	0xfe00e800

08002100 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
 8002112:	460b      	mov	r3, r1
 8002114:	813b      	strh	r3, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	8979      	ldrh	r1, [r7, #10]
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <I2C_RequestMemoryRead+0xa4>)
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fa1c 	bl	8002564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f8ac 	bl	800228e <I2C_WaitOnTXISFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e02c      	b.n	800219a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002146:	893b      	ldrh	r3, [r7, #8]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
 8002150:	e015      	b.n	800217e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002152:	893b      	ldrh	r3, [r7, #8]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f892 	bl	800228e <I2C_WaitOnTXISFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e012      	b.n	800219a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2200      	movs	r2, #0
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f831 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	80002000 	.word	0x80002000

080021a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d103      	bne.n	80021c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	619a      	str	r2, [r3, #24]
  }
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002200:	e031      	b.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d02d      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff f963 	bl	80014d4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d122      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	429a      	cmp	r2, r3
 800223c:	d113      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	429a      	cmp	r2, r3
 8002282:	d0be      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229a:	e033      	b.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f87f 	bl	80023a4 <I2C_IsErrorOccurred>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e031      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d025      	beq.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b8:	f7ff f90c 	bl	80014d4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d302      	bcc.n	80022ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11a      	bne.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d013      	beq.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e007      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d1c4      	bne.n	800229c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002328:	e02f      	b.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f838 	bl	80023a4 <I2C_IsErrorOccurred>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02d      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7ff f8c9 	bl	80014d4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11a      	bne.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d013      	beq.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e007      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b20      	cmp	r3, #32
 8002396:	d1c8      	bne.n	800232a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d068      	beq.n	80024a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d8:	e049      	b.n	800246e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d045      	beq.n	800246e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7ff f877 	bl	80014d4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_IsErrorOccurred+0x54>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d13a      	bne.n	800246e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800240a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241a:	d121      	bne.n	8002460 <I2C_IsErrorOccurred+0xbc>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002422:	d01d      	beq.n	8002460 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b20      	cmp	r3, #32
 8002428:	d01a      	beq.n	8002460 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002438:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800243a:	f7ff f84b 	bl	80014d4 <HAL_GetTick>
 800243e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002440:	e00e      	b.n	8002460 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002442:	f7ff f847 	bl	80014d4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b19      	cmp	r3, #25
 800244e:	d907      	bls.n	8002460 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800245e:	e006      	b.n	800246e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d1e9      	bne.n	8002442 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d003      	beq.n	8002484 <I2C_IsErrorOccurred+0xe0>
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0aa      	beq.n	80023da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01c      	beq.n	8002552 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fe45 	bl	80021a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <I2C_IsErrorOccurred+0x1bc>)
 800252a:	400b      	ands	r3, r1
 800252c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	431a      	orrs	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002556:	4618      	mov	r0, r3
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	4613      	mov	r3, r2
 8002574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257c:	7a7b      	ldrb	r3, [r7, #9]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	4313      	orrs	r3, r2
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <I2C_TransferConfig+0x60>)
 80025a4:	430b      	orrs	r3, r1
 80025a6:	43db      	mvns	r3, r3
 80025a8:	ea02 0103 	and.w	r1, r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	03ff63ff 	.word	0x03ff63ff

080025c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d138      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e032      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800261a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d139      	bne.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	e033      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2224      	movs	r2, #36	; 0x24
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e041      	b.n	800278c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002710:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f245 5255 	movw	r2, #21845	; 0x5555
 800271a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6852      	ldr	r2, [r2, #4]
 8002724:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002730:	f7fe fed0 	bl	80014d4 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002736:	e00f      	b.n	8002758 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002738:	f7fe fecc 	bl	80014d4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b27      	cmp	r3, #39	; 0x27
 8002744:	d908      	bls.n	8002758 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e019      	b.n	800278c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e8      	bne.n	8002738 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d005      	beq.n	8002780 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68d2      	ldr	r2, [r2, #12]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	e004      	b.n	800278a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800279a:	af00      	add	r7, sp, #0
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f001 b823 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 817d 	beq.w	8002aca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d0:	4bbc      	ldr	r3, [pc, #752]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4bb9      	ldr	r3, [pc, #740]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d15c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x10e>
 80027e8:	4bb6      	ldr	r3, [pc, #728]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d155      	bne.n	80028a2 <HAL_RCC_OscConfig+0x10e>
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x94>
 8002822:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e015      	b.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002844:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002850:	4b9c      	ldr	r3, [pc, #624]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002858:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800285c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002860:	fa92 f2a2 	rbit	r2, r2
 8002864:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002868:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	f042 0220 	orr.w	r2, r2, #32
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 811f 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x334>
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 8116 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f000 bfaf 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12e>
 80028b4:	4b83      	ldr	r3, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a82      	ldr	r2, [pc, #520]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	e036      	b.n	8002930 <HAL_RCC_OscConfig+0x19c>
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x158>
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80028e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e021      	b.n	8002930 <HAL_RCC_OscConfig+0x19c>
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x184>
 80028fe:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a70      	ldr	r2, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6d      	ldr	r2, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x19c>
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a66      	ldr	r2, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002930:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f023 020f 	bic.w	r2, r3, #15
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	495f      	ldr	r1, [pc, #380]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002946:	4313      	orrs	r3, r2
 8002948:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d059      	beq.n	8002a0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fdbb 	bl	80014d4 <HAL_GetTick>
 800295e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fdb6 	bl	80014d4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d902      	bls.n	800297a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	f000 bf43 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800298e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0x218>
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x244>
 80029ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029d4:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ab      	beq.n	8002964 <HAL_RCC_OscConfig+0x1d0>
 8002a0c:	e05d      	b.n	8002aca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fd61 	bl	80014d4 <HAL_GetTick>
 8002a12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fd5c 	bl	80014d4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	; 0x64
 8002a26:	d902      	bls.n	8002a2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f000 bee9 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2cc>
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e015      	b.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
 8002a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a98:	fa92 f2a2 	rbit	r2, r2
 8002a9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002aa0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ab      	bne.n	8002a18 <HAL_RCC_OscConfig+0x284>
 8002ac0:	e003      	b.n	8002aca <HAL_RCC_OscConfig+0x336>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 817d 	beq.w	8002dda <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ae0:	4ba6      	ldr	r3, [pc, #664]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aec:	4ba3      	ldr	r3, [pc, #652]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d172      	bne.n	8002bde <HAL_RCC_OscConfig+0x44a>
 8002af8:	4ba0      	ldr	r3, [pc, #640]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d16c      	bne.n	8002bde <HAL_RCC_OscConfig+0x44a>
 8002b04:	2302      	movs	r3, #2
 8002b06:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b16:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3a0>
 8002b2e:	4b93      	ldr	r3, [pc, #588]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e013      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
 8002b34:	2302      	movs	r3, #2
 8002b36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b46:	2302      	movs	r3, #2
 8002b48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b58:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b6e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x410>
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f000 be2e 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	21f8      	movs	r1, #248	; 0xf8
 8002bba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bc2:	fa91 f1a1 	rbit	r1, r1
 8002bc6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002bca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002bce:	fab1 f181 	clz	r1, r1
 8002bd2:	b2c9      	uxtb	r1, r1
 8002bd4:	408b      	lsls	r3, r1
 8002bd6:	4969      	ldr	r1, [pc, #420]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bdc:	e0fd      	b.n	8002dda <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8088 	beq.w	8002d00 <HAL_RCC_OscConfig+0x56c>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	461a      	mov	r2, r3
 8002c18:	2301      	movs	r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fc5a 	bl	80014d4 <HAL_GetTick>
 8002c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fc55 	bl	80014d4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	f000 bde2 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
 8002c66:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e013      	b.n	8002c94 <HAL_RCC_OscConfig+0x500>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2202      	movs	r2, #2
 8002c96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c9e:	fa92 f2a2 	rbit	r2, r2
 8002ca2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ca6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0220 	orr.w	r2, r2, #32
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0af      	beq.n	8002c26 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	21f8      	movs	r1, #248	; 0xf8
 8002cdc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ce4:	fa91 f1a1 	rbit	r1, r1
 8002ce8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cf0:	fab1 f181 	clz	r1, r1
 8002cf4:	b2c9      	uxtb	r1, r1
 8002cf6:	408b      	lsls	r3, r1
 8002cf8:	4920      	ldr	r1, [pc, #128]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
 8002cfe:	e06c      	b.n	8002dda <HAL_RCC_OscConfig+0x646>
 8002d00:	2301      	movs	r3, #1
 8002d02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fbd2 	bl	80014d4 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe fbcd 	bl	80014d4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	f000 bd5a 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d104      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5ec>
 8002d76:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <HAL_RCC_OscConfig+0x5e8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e015      	b.n	8002da8 <HAL_RCC_OscConfig+0x614>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	2302      	movs	r3, #2
 8002d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d92:	2302      	movs	r3, #2
 8002d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002da4:	4bc8      	ldr	r3, [pc, #800]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2202      	movs	r2, #2
 8002daa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002dae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002db2:	fa92 f2a2 	rbit	r2, r2
 8002db6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002dba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f042 0220 	orr.w	r2, r2, #32
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f002 021f 	and.w	r2, r2, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ad      	bne.n	8002d36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8110 	beq.w	8003010 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d079      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x760>
 8002e00:	2301      	movs	r3, #1
 8002e02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4bab      	ldr	r3, [pc, #684]	; (80030cc <HAL_RCC_OscConfig+0x938>)
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	2301      	movs	r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fb53 	bl	80014d4 <HAL_GetTick>
 8002e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e34:	f7fe fb4e 	bl	80014d4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d902      	bls.n	8002e4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	f000 bcdb 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fa93 f2a3 	rbit	r2, r3
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e88:	2202      	movs	r2, #2
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ea2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea4:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	6019      	str	r1, [r3, #0]
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f1a3 	rbit	r1, r3
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eca:	6019      	str	r1, [r3, #0]
  return result;
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0a0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x6a0>
 8002ef2:	e08d      	b.n	8003010 <HAL_RCC_OscConfig+0x87c>
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f16:	601a      	str	r2, [r3, #0]
  return result;
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x938>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe facd 	bl	80014d4 <HAL_GetTick>
 8002f3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe fac8 	bl	80014d4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f000 bc55 	b.w	8003800 <HAL_RCC_OscConfig+0x106c>
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 8002fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6019      	str	r1, [r3, #0]
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f1a3 	rbit	r1, r3
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fe8:	6019      	str	r1, [r3, #0]
  return result;
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d197      	bne.n	8002f40 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 81a1 	beq.w	8003368 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302c:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	61d3      	str	r3, [r2, #28]
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800305e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_RCC_OscConfig+0x93c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11a      	bne.n	80030a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_RCC_OscConfig+0x93c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_RCC_OscConfig+0x93c>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fa29 	bl	80014d4 <HAL_GetTick>
 8003082:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	e009      	b.n	800309c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fa24 	bl	80014d4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e3b1      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_RCC_OscConfig+0x93c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_OscConfig+0x940>
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a02      	ldr	r2, [pc, #8]	; (80030c8 <HAL_RCC_OscConfig+0x934>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	e03c      	b.n	8003140 <HAL_RCC_OscConfig+0x9ac>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	10908120 	.word	0x10908120
 80030d0:	40007000 	.word	0x40007000
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x96a>
 80030e4:	4bc1      	ldr	r3, [pc, #772]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4ac0      	ldr	r2, [pc, #768]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	4bbe      	ldr	r3, [pc, #760]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4abd      	ldr	r2, [pc, #756]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e020      	b.n	8003140 <HAL_RCC_OscConfig+0x9ac>
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x994>
 800310e:	4bb7      	ldr	r3, [pc, #732]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4ab6      	ldr	r2, [pc, #728]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	4bb4      	ldr	r3, [pc, #720]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4ab3      	ldr	r2, [pc, #716]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x9ac>
 8003128:	4bb0      	ldr	r3, [pc, #704]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4aaf      	ldr	r2, [pc, #700]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4bad      	ldr	r3, [pc, #692]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4aac      	ldr	r2, [pc, #688]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8081 	beq.w	8003254 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fe f9bf 	bl	80014d4 <HAL_GetTick>
 8003156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe f9ba 	bl	80014d4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e345      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800317c:	2202      	movs	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031a0:	2202      	movs	r2, #2
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f2a3 	rbit	r2, r3
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031ba:	601a      	str	r2, [r3, #0]
  return result;
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d102      	bne.n	80031e0 <HAL_RCC_OscConfig+0xa4c>
 80031da:	4b84      	ldr	r3, [pc, #528]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	e013      	b.n	8003208 <HAL_RCC_OscConfig+0xa74>
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031e8:	2202      	movs	r2, #2
 80031ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fa93 f2a3 	rbit	r2, r3
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	4b79      	ldr	r3, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003210:	2102      	movs	r1, #2
 8003212:	6011      	str	r1, [r2, #0]
 8003214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003218:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	fa92 f1a2 	rbit	r1, r2
 8003222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003226:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800322a:	6011      	str	r1, [r2, #0]
  return result;
 800322c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003230:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d084      	beq.n	800315c <HAL_RCC_OscConfig+0x9c8>
 8003252:	e07f      	b.n	8003354 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe f93e 	bl	80014d4 <HAL_GetTick>
 8003258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	e00b      	b.n	8003276 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe f939 	bl	80014d4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e2c4      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800327e:	2202      	movs	r2, #2
 8003280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fa93 f2a3 	rbit	r2, r3
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032a2:	2202      	movs	r2, #2
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032bc:	601a      	str	r2, [r3, #0]
  return result;
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0xb4e>
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	e013      	b.n	800330a <HAL_RCC_OscConfig+0xb76>
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003312:	2102      	movs	r1, #2
 8003314:	6011      	str	r1, [r2, #0]
 8003316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800331a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	fa92 f1a2 	rbit	r1, r2
 8003324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003328:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800332c:	6011      	str	r1, [r2, #0]
  return result;
 800332e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003332:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d184      	bne.n	800325e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003354:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8242 	beq.w	80037fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0xc58>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	f000 8213 	beq.w	80037ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 8162 	bne.w	800365e <HAL_RCC_OscConfig+0xeca>
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe f878 	bl	80014d4 <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	e00c      	b.n	8003404 <HAL_RCC_OscConfig+0xc70>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe f870 	bl	80014d4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1fd      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800340c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	fa93 f2a3 	rbit	r2, r3
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003428:	601a      	str	r2, [r3, #0]
  return result;
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003432:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0xcba>
 8003448:	4bb0      	ldr	r3, [pc, #704]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e027      	b.n	800349e <HAL_RCC_OscConfig+0xd0a>
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800347c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4b9c      	ldr	r3, [pc, #624]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034aa:	6011      	str	r1, [r2, #0]
 80034ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	fa92 f1a2 	rbit	r1, r2
 80034ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034c2:	6011      	str	r1, [r2, #0]
  return result;
 80034c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f042 0220 	orr.w	r2, r2, #32
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 021f 	and.w	r2, r2, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d182      	bne.n	80033f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ea:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	430b      	orrs	r3, r1
 800350c:	497f      	ldr	r1, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800351a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800351e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003536:	601a      	str	r2, [r3, #0]
  return result;
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003540:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800354c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fd ffbc 	bl	80014d4 <HAL_GetTick>
 800355c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	e009      	b.n	8003576 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fd ffb7 	bl	80014d4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e144      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800357e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800359a:	601a      	str	r2, [r3, #0]
  return result;
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_RCC_OscConfig+0xe2c>
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e027      	b.n	8003610 <HAL_RCC_OscConfig+0xe7c>
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003614:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003622:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	fa92 f1a2 	rbit	r1, r2
 800362c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003630:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003634:	6011      	str	r1, [r2, #0]
  return result;
 8003636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800363a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d082      	beq.n	8003562 <HAL_RCC_OscConfig+0xdce>
 800365c:	e0cf      	b.n	80037fe <HAL_RCC_OscConfig+0x106a>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003682:	601a      	str	r2, [r3, #0]
  return result;
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800368c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003698:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	461a      	mov	r2, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fd ff16 	bl	80014d4 <HAL_GetTick>
 80036a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ac:	e009      	b.n	80036c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd ff11 	bl	80014d4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e09e      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	fa93 f2a3 	rbit	r2, r3
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036e6:	601a      	str	r2, [r3, #0]
  return result;
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d104      	bne.n	8003710 <HAL_RCC_OscConfig+0xf7c>
 8003706:	4b01      	ldr	r3, [pc, #4]	; (800370c <HAL_RCC_OscConfig+0xf78>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e029      	b.n	8003760 <HAL_RCC_OscConfig+0xfcc>
 800370c:	40021000 	.word	0x40021000
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800373e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	fa93 f2a3 	rbit	r2, r3
 8003752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003756:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x1078>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003764:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003772:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	fa92 f1a2 	rbit	r1, r2
 800377c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003780:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003784:	6011      	str	r1, [r2, #0]
  return result;
 8003786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f042 0220 	orr.w	r2, r2, #32
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	f002 021f 	and.w	r2, r2, #31
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f202 	lsl.w	r2, r1, r2
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d180      	bne.n	80036ae <HAL_RCC_OscConfig+0xf1a>
 80037ac:	e027      	b.n	80037fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01e      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_OscConfig+0x1078>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b09e      	sub	sp, #120	; 0x78
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e162      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b90      	ldr	r3, [pc, #576]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	498b      	ldr	r1, [pc, #556]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b89      	ldr	r3, [pc, #548]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e14a      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	497f      	ldr	r1, [pc, #508]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80dc 	beq.w	8003a3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d13c      	bne.n	8003906 <HAL_RCC_ClockConfig+0xf6>
 800388c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800389a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xa6>
 80038b0:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e00f      	b.n	80038d6 <HAL_RCC_ClockConfig+0xc6>
 80038b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
 80038c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038d2:	4b67      	ldr	r3, [pc, #412]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038da:	65ba      	str	r2, [r7, #88]	; 0x58
 80038dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038de:	fa92 f2a2 	rbit	r2, r2
 80038e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038e6:	fab2 f282 	clz	r2, r2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f002 021f 	and.w	r2, r2, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d17b      	bne.n	80039fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0f3      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d13c      	bne.n	8003988 <HAL_RCC_ClockConfig+0x178>
 800390e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003912:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_RCC_ClockConfig+0x128>
 8003932:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e00f      	b.n	8003958 <HAL_RCC_ClockConfig+0x148>
 8003938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	647b      	str	r3, [r7, #68]	; 0x44
 8003946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003954:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395c:	63ba      	str	r2, [r7, #56]	; 0x38
 800395e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003960:	fa92 f2a2 	rbit	r2, r2
 8003964:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	fab2 f282 	clz	r2, r2
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f042 0220 	orr.w	r2, r2, #32
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	f002 021f 	and.w	r2, r2, #31
 8003978:	2101      	movs	r1, #1
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d13a      	bne.n	80039fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0b2      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
 8003988:	2302      	movs	r3, #2
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x1a0>
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e00d      	b.n	80039cc <HAL_RCC_ClockConfig+0x1bc>
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
 80039bc:	2302      	movs	r3, #2
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2202      	movs	r2, #2
 80039ce:	61ba      	str	r2, [r7, #24]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	617a      	str	r2, [r7, #20]
  return result;
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	fab2 f282 	clz	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f042 0220 	orr.w	r2, r2, #32
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e079      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	491a      	ldr	r1, [pc, #104]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fd62 	bl	80014d4 <HAL_GetTick>
 8003a10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fd fd5e 	bl	80014d4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e061      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d214      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4906      	ldr	r1, [pc, #24]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <HAL_RCC_ClockConfig+0x25c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e040      	b.n	8003aee <HAL_RCC_ClockConfig+0x2de>
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	491a      	ldr	r1, [pc, #104]	; (8003af8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_RCC_ClockConfig+0x2e8>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4912      	ldr	r1, [pc, #72]	; (8003af8 <HAL_RCC_ClockConfig+0x2e8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ab2:	f000 f829 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_RCC_ClockConfig+0x2e8>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac0:	22f0      	movs	r2, #240	; 0xf0
 8003ac2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	fa92 f2a2 	rbit	r2, r2
 8003aca:	60fa      	str	r2, [r7, #12]
  return result;
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	fab2 f282 	clz	r2, r2
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	40d3      	lsrs	r3, r2
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x2ec>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	fa21 f303 	lsr.w	r3, r1, r3
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_RCC_ClockConfig+0x2f0>)
 8003ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCC_ClockConfig+0x2f4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd fcb0 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3778      	adds	r7, #120	; 0x78
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	080047bc 	.word	0x080047bc
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b08b      	sub	sp, #44	; 0x2c
 8003b0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x30>
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x36>
 8003b36:	e03c      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b3a:	623b      	str	r3, [r7, #32]
      break;
 8003b3c:	e03c      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	fa92 f2a2 	rbit	r2, r2
 8003b50:	607a      	str	r2, [r7, #4]
  return result;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	40d3      	lsrs	r3, r2
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	60fa      	str	r2, [r7, #12]
  return result;
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	40d3      	lsrs	r3, r2
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	e004      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	623b      	str	r3, [r7, #32]
      break;
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bb4:	623b      	str	r3, [r7, #32]
      break;
 8003bb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	372c      	adds	r7, #44	; 0x2c
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	01e84800 	.word	0x01e84800
 8003bd0:	080047d4 	.word	0x080047d4
 8003bd4:	080047e4 	.word	0x080047e4
 8003bd8:	003d0900 	.word	0x003d0900
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bfe:	f7ff ffef 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	fa92 f2a2 	rbit	r2, r2
 8003c18:	603a      	str	r2, [r7, #0]
  return result;
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	fab2 f282 	clz	r2, r2
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	40d3      	lsrs	r3, r2
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	080047cc 	.word	0x080047cc

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c42:	f7ff ffcd 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	fa92 f2a2 	rbit	r2, r2
 8003c5c:	603a      	str	r2, [r7, #0]
  return result;
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	40d3      	lsrs	r3, r2
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080047cc 	.word	0x080047cc

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b092      	sub	sp, #72	; 0x48
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80cd 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca4:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10e      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a82      	ldr	r2, [pc, #520]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cba:	61d3      	str	r3, [r2, #28]
 8003cbc:	4b80      	ldr	r3, [pc, #512]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	4b7d      	ldr	r3, [pc, #500]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d118      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cda:	4b7a      	ldr	r3, [pc, #488]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a79      	ldr	r2, [pc, #484]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fbf5 	bl	80014d4 <HAL_GetTick>
 8003cea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	e008      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cee:	f7fd fbf1 	bl	80014d4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b64      	cmp	r3, #100	; 0x64
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0db      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d076      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	2301      	movs	r3, #1
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d7c:	4a50      	ldr	r2, [pc, #320]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d045      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fba2 	bl	80014d4 <HAL_GetTick>
 8003d90:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fd fb9e 	bl	80014d4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e086      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003daa:	2302      	movs	r3, #2
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	2302      	movs	r3, #2
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	61fb      	str	r3, [r7, #28]
  return result;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d102      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	e007      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2202      	movs	r2, #2
 8003df0:	613a      	str	r2, [r7, #16]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	fa92 f2a2 	rbit	r2, r2
 8003df8:	60fa      	str	r2, [r7, #12]
  return result;
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f002 021f 	and.w	r2, r2, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0bd      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e18:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f023 0203 	bic.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	491a      	ldr	r1, [pc, #104]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3748      	adds	r7, #72	; 0x48
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	10908100 	.word	0x10908100

08003ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e095      	b.n	800400a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d009      	beq.n	8003f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f95e 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f44:	d902      	bls.n	8003f4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e002      	b.n	8003f52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f5a:	d007      	beq.n	8003f6c <HAL_SPI_Init+0xa0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	ea42 0103 	orr.w	r1, r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f003 0204 	and.w	r2, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fe8:	ea42 0103 	orr.w	r1, r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e040      	b.n	80040a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fd f915 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f82d 	bl	80040b0 <UART_SetConfig>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e022      	b.n	80040a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f957 	bl	800431c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9de 	bl	8004460 <UART_CheckIdleState>
 80040a4:	4603      	mov	r3, r0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b8a      	ldr	r3, [pc, #552]	; (8004304 <UART_SetConfig+0x254>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6979      	ldr	r1, [r7, #20]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a78      	ldr	r2, [pc, #480]	; (8004308 <UART_SetConfig+0x258>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <UART_SetConfig+0xbe>
 800412c:	4b77      	ldr	r3, [pc, #476]	; (800430c <UART_SetConfig+0x25c>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d817      	bhi.n	8004168 <UART_SetConfig+0xb8>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0x90>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004151 	.word	0x08004151
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004163 	.word	0x08004163
 800414c:	08004157 	.word	0x08004157
 8004150:	2300      	movs	r3, #0
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e01d      	b.n	8004192 <UART_SetConfig+0xe2>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e01a      	b.n	8004192 <UART_SetConfig+0xe2>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e017      	b.n	8004192 <UART_SetConfig+0xe2>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e014      	b.n	8004192 <UART_SetConfig+0xe2>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e011      	b.n	8004192 <UART_SetConfig+0xe2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a67      	ldr	r2, [pc, #412]	; (8004310 <UART_SetConfig+0x260>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d102      	bne.n	800417e <UART_SetConfig+0xce>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e009      	b.n	8004192 <UART_SetConfig+0xe2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a64      	ldr	r2, [pc, #400]	; (8004314 <UART_SetConfig+0x264>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d102      	bne.n	800418e <UART_SetConfig+0xde>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e001      	b.n	8004192 <UART_SetConfig+0xe2>
 800418e:	2310      	movs	r3, #16
 8004190:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419a:	d15a      	bne.n	8004252 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800419c:	7ffb      	ldrb	r3, [r7, #31]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d827      	bhi.n	80041f2 <UART_SetConfig+0x142>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0xf8>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041f3 	.word	0x080041f3
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	080041f3 	.word	0x080041f3
 80041c0:	080041f3 	.word	0x080041f3
 80041c4:	080041f3 	.word	0x080041f3
 80041c8:	080041eb 	.word	0x080041eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7ff fd14 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80041d0:	61b8      	str	r0, [r7, #24]
        break;
 80041d2:	e013      	b.n	80041fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7ff fd32 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 80041d8:	61b8      	str	r0, [r7, #24]
        break;
 80041da:	e00f      	b.n	80041fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <UART_SetConfig+0x268>)
 80041de:	61bb      	str	r3, [r7, #24]
        break;
 80041e0:	e00c      	b.n	80041fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e2:	f7ff fc91 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 80041e6:	61b8      	str	r0, [r7, #24]
        break;
 80041e8:	e008      	b.n	80041fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ee:	61bb      	str	r3, [r7, #24]
        break;
 80041f0:	e004      	b.n	80041fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	77bb      	strb	r3, [r7, #30]
        break;
 80041fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d074      	beq.n	80042ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	005a      	lsls	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d916      	bls.n	800424c <UART_SetConfig+0x19c>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d212      	bcs.n	800424c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f023 030f 	bic.w	r3, r3, #15
 800422e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	b29b      	uxth	r3, r3
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	b29a      	uxth	r2, r3
 800423c:	89fb      	ldrh	r3, [r7, #14]
 800423e:	4313      	orrs	r3, r2
 8004240:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	89fa      	ldrh	r2, [r7, #14]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e04f      	b.n	80042ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	77bb      	strb	r3, [r7, #30]
 8004250:	e04c      	b.n	80042ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d828      	bhi.n	80042aa <UART_SetConfig+0x1fa>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <UART_SetConfig+0x1b0>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004285 	.word	0x08004285
 8004264:	0800428d 	.word	0x0800428d
 8004268:	08004295 	.word	0x08004295
 800426c:	080042ab 	.word	0x080042ab
 8004270:	0800429b 	.word	0x0800429b
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042ab 	.word	0x080042ab
 800427c:	080042ab 	.word	0x080042ab
 8004280:	080042a3 	.word	0x080042a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004284:	f7ff fcb8 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8004288:	61b8      	str	r0, [r7, #24]
        break;
 800428a:	e013      	b.n	80042b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800428c:	f7ff fcd6 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e00f      	b.n	80042b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <UART_SetConfig+0x268>)
 8004296:	61bb      	str	r3, [r7, #24]
        break;
 8004298:	e00c      	b.n	80042b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800429a:	f7ff fc35 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 800429e:	61b8      	str	r0, [r7, #24]
        break;
 80042a0:	e008      	b.n	80042b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a6:	61bb      	str	r3, [r7, #24]
        break;
 80042a8:	e004      	b.n	80042b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	77bb      	strb	r3, [r7, #30]
        break;
 80042b2:	bf00      	nop
    }

    if (pclk != 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085a      	lsrs	r2, r3, #1
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	441a      	add	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b0f      	cmp	r3, #15
 80042d2:	d909      	bls.n	80042e8 <UART_SetConfig+0x238>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042da:	d205      	bcs.n	80042e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	e001      	b.n	80042ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	efff69f3 	.word	0xefff69f3
 8004308:	40013800 	.word	0x40013800
 800430c:	40021000 	.word	0x40021000
 8004310:	40004400 	.word	0x40004400
 8004314:	40004800 	.word	0x40004800
 8004318:	007a1200 	.word	0x007a1200

0800431c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01a      	beq.n	8004432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441a:	d10a      	bne.n	8004432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b098      	sub	sp, #96	; 0x60
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004470:	f7fd f830 	bl	80014d4 <HAL_GetTick>
 8004474:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d12e      	bne.n	80044e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448c:	2200      	movs	r2, #0
 800448e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f88c 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d021      	beq.n	80044e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b2:	653b      	str	r3, [r7, #80]	; 0x50
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
 80044be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e062      	b.n	80045a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d149      	bne.n	8004584 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f856 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03c      	beq.n	8004584 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	623b      	str	r3, [r7, #32]
   return(result);
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e6      	bne.n	800450a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60fb      	str	r3, [r7, #12]
   return(result);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e011      	b.n	80045a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3758      	adds	r7, #88	; 0x58
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c0:	e049      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d045      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fc ff83 	bl	80014d4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e048      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d031      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d110      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f838 	bl	800467e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2208      	movs	r2, #8
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e029      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004630:	d111      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800463a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f81e 	bl	800467e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e00f      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d0a6      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467e:	b480      	push	{r7}
 8004680:	b095      	sub	sp, #84	; 0x54
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
 80046a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d118      	bne.n	8004726 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	60bb      	str	r3, [r7, #8]
   return(result);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	669a      	str	r2, [r3, #104]	; 0x68
}
 800473a:	bf00      	nop
 800473c:	3754      	adds	r7, #84	; 0x54
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <__libc_init_array>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	4d0d      	ldr	r5, [pc, #52]	; (8004780 <__libc_init_array+0x38>)
 800474c:	4c0d      	ldr	r4, [pc, #52]	; (8004784 <__libc_init_array+0x3c>)
 800474e:	1b64      	subs	r4, r4, r5
 8004750:	10a4      	asrs	r4, r4, #2
 8004752:	2600      	movs	r6, #0
 8004754:	42a6      	cmp	r6, r4
 8004756:	d109      	bne.n	800476c <__libc_init_array+0x24>
 8004758:	4d0b      	ldr	r5, [pc, #44]	; (8004788 <__libc_init_array+0x40>)
 800475a:	4c0c      	ldr	r4, [pc, #48]	; (800478c <__libc_init_array+0x44>)
 800475c:	f000 f820 	bl	80047a0 <_init>
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	2600      	movs	r6, #0
 8004766:	42a6      	cmp	r6, r4
 8004768:	d105      	bne.n	8004776 <__libc_init_array+0x2e>
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004770:	4798      	blx	r3
 8004772:	3601      	adds	r6, #1
 8004774:	e7ee      	b.n	8004754 <__libc_init_array+0xc>
 8004776:	f855 3b04 	ldr.w	r3, [r5], #4
 800477a:	4798      	blx	r3
 800477c:	3601      	adds	r6, #1
 800477e:	e7f2      	b.n	8004766 <__libc_init_array+0x1e>
 8004780:	080047f4 	.word	0x080047f4
 8004784:	080047f4 	.word	0x080047f4
 8004788:	080047f4 	.word	0x080047f4
 800478c:	080047f8 	.word	0x080047f8

08004790 <memset>:
 8004790:	4402      	add	r2, r0
 8004792:	4603      	mov	r3, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	f803 1b01 	strb.w	r1, [r3], #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
