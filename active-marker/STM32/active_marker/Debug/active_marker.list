
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080045b0  080045b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b0  080045b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ed  00000000  00000000  000301e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  000322d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b147  00000000  00000000  00033c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011824  00000000  00000000  0004ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d2a6  00000000  00000000  00060593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd839  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003768  00000000  00000000  000fd88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004560 	.word	0x08004560

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004560 	.word	0x08004560

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <VEML6030_getLux>:
/*
 * @brief get lux data
 * @param sensor address
 * @return lux
 */
float VEML6030_getLux(uint8_t addr) {
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  float gain = VEML6030_getGain(addr);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f855 	bl	8000ac4 <VEML6030_getGain>
 8000a1a:	ed87 0a05 	vstr	s0, [r7, #20]
  uint16_t inttime = VEML6030_getIntTime(addr);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f881 	bl	8000b28 <VEML6030_getIntTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	827b      	strh	r3, [r7, #18]
  uint16_t als = VEML6030_getALS(addr);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8b1 	bl	8000b94 <VEML6030_getALS>
 8000a32:	4603      	mov	r3, r0
 8000a34:	823b      	strh	r3, [r7, #16]
  float resolution = (1.8432 / ((float) inttime / 25.0)) * (0.125 / gain);
 8000a36:	8a7b      	ldrh	r3, [r7, #18]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	ee17 0a90 	vmov	r0, s15
 8000a44:	f7ff fd24 	bl	8000490 <__aeabi_f2d>
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <VEML6030_getLux+0xb8>)
 8000a4e:	f7ff fea1 	bl	8000794 <__aeabi_ddiv>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	a118      	add	r1, pc, #96	; (adr r1, 8000ab8 <VEML6030_getLux+0xb0>)
 8000a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a5c:	f7ff fe9a 	bl	8000794 <__aeabi_ddiv>
 8000a60:	4602      	mov	r2, r0
 8000a62:	460b      	mov	r3, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	461d      	mov	r5, r3
 8000a68:	6978      	ldr	r0, [r7, #20]
 8000a6a:	f7ff fd11 	bl	8000490 <__aeabi_f2d>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	460b      	mov	r3, r1
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000a7a:	f7ff fe8b 	bl	8000794 <__aeabi_ddiv>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	4620      	mov	r0, r4
 8000a84:	4629      	mov	r1, r5
 8000a86:	f7ff fd5b 	bl	8000540 <__aeabi_dmul>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4619      	mov	r1, r3
 8000a92:	f7ff ff67 	bl	8000964 <__aeabi_d2f>
 8000a96:	4603      	mov	r3, r0
 8000a98:	60fb      	str	r3, [r7, #12]
  return als * resolution;
 8000a9a:	8a3b      	ldrh	r3, [r7, #16]
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	487fcb92 	.word	0x487fcb92
 8000abc:	3ffd7dbf 	.word	0x3ffd7dbf
 8000ac0:	40390000 	.word	0x40390000

08000ac4 <VEML6030_getGain>:
/*
 * @brief get gain data
 * @param addr sensor address
 * @return gain
 */
float VEML6030_getGain(uint8_t addr) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  float gain = 0;
 8000ace:	f04f 0300 	mov.w	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f86b 	bl	8000bb4 <VEML6030_readWord>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	827b      	strh	r3, [r7, #18]
  int x0 = VEML6030_readBit(config, 11);
 8000ae2:	8a7b      	ldrh	r3, [r7, #18]
 8000ae4:	210b      	movs	r1, #11
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f88c 	bl	8000c04 <VEML6030_readBit>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60fb      	str	r3, [r7, #12]
  int x1 = VEML6030_readBit(config, 12);
 8000af0:	8a7b      	ldrh	r3, [r7, #18]
 8000af2:	210c      	movs	r1, #12
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f885 	bl	8000c04 <VEML6030_readBit>
 8000afa:	4603      	mov	r3, r0
 8000afc:	60bb      	str	r3, [r7, #8]
  gain = (x0 - 3 * x1);
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	461a      	mov	r2, r3
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b12:	edc7 7a05 	vstr	s15, [r7, #20]
  return gain * gain;
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8000b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f83c 	bl	8000bb4 <VEML6030_readWord>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	83fb      	strh	r3, [r7, #30]
  int x2x1 = (config >> 6) & 0x03;
 8000b40:	8bfb      	ldrh	r3, [r7, #30]
 8000b42:	099b      	lsrs	r3, r3, #6
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	61bb      	str	r3, [r7, #24]
  int x3 = VEML6030_readBit(config, 8);
 8000b4c:	8bfb      	ldrh	r3, [r7, #30]
 8000b4e:	2108      	movs	r1, #8
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f857 	bl	8000c04 <VEML6030_readBit>
 8000b56:	4603      	mov	r3, r0
 8000b58:	617b      	str	r3, [r7, #20]
  int x4 = VEML6030_readBit(config, 9);
 8000b5a:	8bfb      	ldrh	r3, [r7, #30]
 8000b5c:	2109      	movs	r1, #9
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f850 	bl	8000c04 <VEML6030_readBit>
 8000b64:	4603      	mov	r3, r0
 8000b66:	613b      	str	r3, [r7, #16]
  uint16_t IntTime = 100 * x2x1 * x2x1 / ((x3 + x4) * (x3 + x4));
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fb03 f303 	mul.w	r3, r3, r3
 8000b6e:	2264      	movs	r2, #100	; 0x64
 8000b70:	fb03 f202 	mul.w	r2, r3, r2
 8000b74:	6979      	ldr	r1, [r7, #20]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	440b      	add	r3, r1
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	6939      	ldr	r1, [r7, #16]
 8000b7e:	4401      	add	r1, r0
 8000b80:	fb01 f303 	mul.w	r3, r1, r3
 8000b84:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b88:	81fb      	strh	r3, [r7, #14]
  return IntTime;
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <VEML6030_getALS>:
/*
 * @brief get row illuminance data
 * @param addr address
 * @return row data
 */
uint16_t VEML6030_getALS(uint8_t addr){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  return VEML6030_readWord(addr, ALS_CMD);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f806 	bl	8000bb4 <VEML6030_readWord>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b29b      	uxth	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
int VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
  int data = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  uint8_t buf[2] = { };
 8000bc8:	2300      	movs	r3, #0
 8000bca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <VEML6030_readWord+0x4c>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	f001 f850 	bl	8001c8c <HAL_I2C_Mem_Read>
  data = (buf[1] << 8) + buf[0];
 8000bec:	7a7b      	ldrb	r3, [r7, #9]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	7a3a      	ldrb	r2, [r7, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  return data;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000028 	.word	0x20000028

08000c04 <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	80fb      	strh	r3, [r7, #6]
 8000c10:	4613      	mov	r3, r2
 8000c12:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	797b      	ldrb	r3, [r7, #5]
 8000c18:	fa42 f303 	asr.w	r3, r2, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fbc7 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f81f 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f000 f97f 	bl	8000f40 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000c42:	f000 f8f1 	bl	8000e28 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000c46:	f000 f90d 	bl	8000e64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c4a:	f000 f949 	bl	8000ee0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000c4e:	f000 f877 	bl	8000d40 <MX_CAN_Init>
  MX_I2C1_Init();
 8000c52:	f000 f8a9 	bl	8000da8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  const float cycle = 1000/60;
 8000c56:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000c5a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    g_lux = VEML6030_getLux(SENS_ADDR_0);
 8000c5c:	2090      	movs	r0, #144	; 0x90
 8000c5e:	f7ff fed3 	bl	8000a08 <VEML6030_getLux>
 8000c62:	eef0 7a40 	vmov.f32	s15, s0
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <main+0x48>)
 8000c68:	edc3 7a00 	vstr	s15, [r3]
    CycleController(cycle);
 8000c6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000c70:	f000 fb4c 	bl	800130c <CycleController>
    g_lux = VEML6030_getLux(SENS_ADDR_0);
 8000c74:	e7f2      	b.n	8000c5c <main+0x2c>
 8000c76:	bf00      	nop
 8000c78:	200001a4 	.word	0x200001a4

08000c7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b096      	sub	sp, #88	; 0x58
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fc60 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
      | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000cd4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000cd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fc38 	bl	8002554 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x72>
    Error_Handler();
 8000cea:	f000 f99b 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fc60 	bl	80035d0 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x9e>
    Error_Handler();
 8000d16:	f000 f985 	bl	8001024 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection =
 8000d1a:	2321      	movs	r3, #33	; 0x21
 8000d1c:	607b      	str	r3, [r7, #4]
      RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fe89 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xbc>
    Error_Handler();
 8000d34:	f000 f976 	bl	8001024 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3758      	adds	r7, #88	; 0x58
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_CAN_Init+0x60>)
 8000d8e:	f000 fb81 	bl	8001494 <HAL_CAN_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_CAN_Init+0x5c>
    Error_Handler();
 8000d98:	f000 f944 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000002c 	.word	0x2000002c
 8000da4:	40006400 	.word	0x40006400

08000da8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_I2C1_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <MX_I2C1_Init+0x7c>)
 8000db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000de4:	f000 fec2 	bl	8001b6c <HAL_I2C_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8000dee:	f000 f919 	bl	8001024 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000df2:	2100      	movs	r1, #0
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000df6:	f001 fac7 	bl	8002388 <HAL_I2CEx_ConfigAnalogFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000e00:	f000 f910 	bl	8001024 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000e04:	2100      	movs	r1, #0
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000e08:	f001 fb09 	bl	800241e <HAL_I2CEx_ConfigDigitalFilter>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8000e12:	f000 f907 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000054 	.word	0x20000054
 8000e20:	40005400 	.word	0x40005400
 8000e24:	2000090e 	.word	0x2000090e

08000e28 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_IWDG_Init+0x34>)
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <MX_IWDG_Init+0x38>)
 8000e30:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_IWDG_Init+0x34>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_IWDG_Init+0x34>)
 8000e3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e3e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_IWDG_Init+0x34>)
 8000e42:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e46:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_IWDG_Init+0x34>)
 8000e4a:	f001 fb34 	bl	80024b6 <HAL_IWDG_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_IWDG_Init+0x30>
    Error_Handler();
 8000e54:	f000 f8e6 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000a8 	.word	0x200000a8
 8000e60:	40003000 	.word	0x40003000

08000e64 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_SPI1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e9c:	2218      	movs	r2, #24
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec6:	f002 fee1 	bl	8003c8c <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI1_Init+0x70>
    Error_Handler();
 8000ed0:	f000 f8a8 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000b8 	.word	0x200000b8
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MX_USART1_UART_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART1_UART_Init+0x58>)
 8000f24:	f002 ff55 	bl	8003dd2 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8000f2e:	f000 f879 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000011c 	.word	0x2000011c
 8000f3c:	40013800 	.word	0x40013800

08000f40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a30      	ldr	r2, [pc, #192]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a2a      	ldr	r2, [pc, #168]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_GPIO_Init+0xdc>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	481f      	ldr	r0, [pc, #124]	; (8001020 <MX_GPIO_Init+0xe0>)
 8000fa4:	f000 fdca 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_SEL1_Pin USER_SEL2_Pin USER_BTN1_Pin USER_BTN2_Pin
   ID4_Pin */
  GPIO_InitStruct.Pin = USER_SEL1_Pin | USER_SEL2_Pin | USER_BTN1_Pin
 8000fa8:	f248 0356 	movw	r3, #32854	; 0x8056
 8000fac:	60fb      	str	r3, [r7, #12]
      | USER_BTN2_Pin | ID4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f000 fc4a 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f000 fc3d 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <MX_GPIO_Init+0xe0>)
 8000ff6:	f000 fc2f 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID8_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin | ID8_Pin | ID2_Pin;
 8000ffa:	2338      	movs	r3, #56	; 0x38
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_GPIO_Init+0xe0>)
 800100e:	f000 fc23 	bl	8001858 <HAL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x44>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x44>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x44>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x44>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_CAN_MspInit+0x80>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d129      	bne.n	80010ee <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_CAN_MspInit+0x84>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_CAN_MspInit+0x84>)
 80010a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_CAN_MspInit+0x84>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_CAN_MspInit+0x84>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_CAN_MspInit+0x84>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_CAN_MspInit+0x84>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80010dc:	2309      	movs	r3, #9
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f000 fbb5 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40006400 	.word	0x40006400
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_I2C_MspInit+0x7c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d127      	bne.n	8001172 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23c0      	movs	r3, #192	; 0xc0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113e:	2312      	movs	r3, #18
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114a:	2304      	movs	r3, #4
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_I2C_MspInit+0x84>)
 8001156:	f000 fb7f 	bl	8001858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_I2C_MspInit+0x80>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_I2C_MspInit+0x80>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40005400 	.word	0x40005400
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d128      	bne.n	80011fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011da:	23a0      	movs	r3, #160	; 0xa0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f000 fb2e 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_UART_MspInit+0x80>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d129      	bne.n	8001282 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6193      	str	r3, [r2, #24]
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x84>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_UART_MspInit+0x84>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800125e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f000 faeb 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40013800 	.word	0x40013800
 8001290:	40021000 	.word	0x40021000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8b8 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
void CycleController(float ms) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0a01 	vstr	s0, [r7, #4]
  static bool init = false;
  static uint32_t old_time = 0;
  if (!init) {
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <CycleController+0x60>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <CycleController+0x28>
    old_time = HAL_GetTick();
 8001324:	f000 f8aa 	bl	800147c <HAL_GetTick>
 8001328:	4603      	mov	r3, r0
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <CycleController+0x64>)
 800132c:	6013      	str	r3, [r2, #0]
    init = true;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <CycleController+0x60>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
  }
  while (HAL_GetTick() - old_time < ms)
 8001334:	bf00      	nop
 8001336:	f000 f8a1 	bl	800147c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <CycleController+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134a:	ed97 7a01 	vldr	s14, [r7, #4]
 800134e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	dcee      	bgt.n	8001336 <CycleController+0x2a>
    ;
  old_time = HAL_GetTick();
 8001358:	f000 f890 	bl	800147c <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <CycleController+0x64>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001a8 	.word	0x200001a8
 8001370:	200001ac 	.word	0x200001ac

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffb6 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f003 f8b1 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff fc43 	bl	8000c30 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c0:	200001b4 	.word	0x200001b4

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fa09 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe24 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fa13 	bl	800183e <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f9e9 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	200001b0 	.word	0x200001b0

0800147c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200001b0 	.word	0x200001b0

08001494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0ed      	b.n	8001682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fde0 	bl	8001078 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff ffd8 	bl	800147c <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ce:	e012      	b.n	80014f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d0:	f7ff ffd4 	bl	800147c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b0a      	cmp	r3, #10
 80014dc:	d90b      	bls.n	80014f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0c5      	b.n	8001682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0e5      	beq.n	80014d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0202 	bic.w	r2, r2, #2
 8001512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001514:	f7ff ffb2 	bl	800147c <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff ffae 	bl	800147c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e09f      	b.n	8001682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7e1b      	ldrb	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e007      	b.n	800157a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e5b      	ldrb	r3, [r3, #25]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e007      	b.n	80015a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e9b      	ldrb	r3, [r3, #26]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e007      	b.n	80015ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0220 	bic.w	r2, r2, #32
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7edb      	ldrb	r3, [r3, #27]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0210 	bic.w	r2, r2, #16
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0210 	orr.w	r2, r2, #16
 80015f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7f1b      	ldrb	r3, [r3, #28]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0208 	orr.w	r2, r2, #8
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e007      	b.n	8001622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7f5b      	ldrb	r3, [r3, #29]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e007      	b.n	800164c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0204 	bic.w	r2, r2, #4
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	ea42 0103 	orr.w	r1, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff47 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff5c 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffb0 	bl	80017ac <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e14e      	b.n	8001b06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8140 	beq.w	8001b00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d005      	beq.n	8001898 <HAL_GPIO_Init+0x40>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d130      	bne.n	80018fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ce:	2201      	movs	r2, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 0201 	and.w	r2, r3, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b03      	cmp	r3, #3
 8001904:	d017      	beq.n	8001936 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d123      	bne.n	800198a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	6939      	ldr	r1, [r7, #16]
 8001986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 809a 	beq.w	8001b00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019cc:	4b55      	ldr	r3, [pc, #340]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e4:	4a50      	ldr	r2, [pc, #320]	; (8001b28 <HAL_GPIO_Init+0x2d0>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_GPIO_Init+0x2d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_GPIO_Init+0x2d8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a44      	ldr	r2, [pc, #272]	; (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1d4>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4a:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a58:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7c:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f aea9 	bne.w	8001868 <HAL_GPIO_Init+0x10>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e081      	b.n	8001c82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fab4 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d104      	bne.n	8001c06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69d9      	ldr	r1, [r3, #28]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	817b      	strh	r3, [r7, #10]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	813b      	strh	r3, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	f040 80fd 	bne.w	8001eae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_I2C_Mem_Read+0x34>
 8001cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0f1      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_I2C_Mem_Read+0x4e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0ea      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ce2:	f7ff fbcb 	bl	800147c <HAL_GetTick>
 8001ce6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2319      	movs	r3, #25
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f95b 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0d5      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2222      	movs	r2, #34	; 0x22
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d2c:	88f8      	ldrh	r0, [r7, #6]
 8001d2e:	893a      	ldrh	r2, [r7, #8]
 8001d30:	8979      	ldrh	r1, [r7, #10]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f8bf 	bl	8001ec0 <I2C_RequestMemoryRead>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0ad      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d90e      	bls.n	8001d7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8979      	ldrh	r1, [r7, #10]
 8001d6c:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <HAL_I2C_Mem_Read+0x22c>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fad5 	bl	8002324 <I2C_TransferConfig>
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_I2C_Mem_Read+0x22c>)
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fac4 	bl	8002324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	2200      	movs	r2, #0
 8001da4:	2104      	movs	r1, #4
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f902 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07c      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d034      	beq.n	8001e5c <HAL_I2C_Mem_Read+0x1d0>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d130      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	2200      	movs	r2, #0
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f8d3 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e04d      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d90e      	bls.n	8001e3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	22ff      	movs	r2, #255	; 0xff
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	8979      	ldrh	r1, [r7, #10]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fa75 	bl	8002324 <I2C_TransferConfig>
 8001e3a:	e00f      	b.n	8001e5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa64 	bl	8002324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d19a      	bne.n	8001d9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f936 	bl	80020dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01a      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_I2C_Mem_Read+0x230>)
 8001e8e:	400b      	ands	r3, r1
 8001e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
  }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	80002400 	.word	0x80002400
 8001ebc:	fe00e800 	.word	0xfe00e800

08001ec0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	8979      	ldrh	r1, [r7, #10]
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <I2C_RequestMemoryRead+0xa4>)
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa1c 	bl	8002324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f8ac 	bl	800204e <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e02c      	b.n	8001f5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f06:	893b      	ldrh	r3, [r7, #8]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f10:	e015      	b.n	8001f3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f12:	893b      	ldrh	r3, [r7, #8]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	69b9      	ldr	r1, [r7, #24]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f892 	bl	800204e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e012      	b.n	8001f5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f34:	893b      	ldrh	r3, [r7, #8]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2140      	movs	r1, #64	; 0x40
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f831 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	80002000 	.word	0x80002000

08001f68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d103      	bne.n	8001f86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d007      	beq.n	8001fa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	619a      	str	r2, [r3, #24]
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc0:	e031      	b.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d02d      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7ff fa57 	bl	800147c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d122      	bne.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d113      	bne.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4013      	ands	r3, r2
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	bf0c      	ite	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	2300      	movne	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	429a      	cmp	r2, r3
 8002042:	d0be      	beq.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205a:	e033      	b.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f87f 	bl	8002164 <I2C_IsErrorOccurred>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e031      	b.n	80020d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d025      	beq.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002078:	f7ff fa00 	bl	800147c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	d302      	bcc.n	800208e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11a      	bne.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d013      	beq.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e007      	b.n	80020d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d1c4      	bne.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e8:	e02f      	b.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f838 	bl	8002164 <I2C_IsErrorOccurred>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02d      	b.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7ff f9bd 	bl	800147c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11a      	bne.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d013      	beq.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d1c8      	bne.n	80020ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d068      	beq.n	8002262 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002198:	e049      	b.n	800222e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d045      	beq.n	800222e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021a2:	f7ff f96b 	bl	800147c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d302      	bcc.n	80021b8 <I2C_IsErrorOccurred+0x54>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d13a      	bne.n	800222e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021da:	d121      	bne.n	8002220 <I2C_IsErrorOccurred+0xbc>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e2:	d01d      	beq.n	8002220 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d01a      	beq.n	8002220 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021fa:	f7ff f93f 	bl	800147c <HAL_GetTick>
 80021fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002200:	e00e      	b.n	8002220 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002202:	f7ff f93b 	bl	800147c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b19      	cmp	r3, #25
 800220e:	d907      	bls.n	8002220 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f043 0320 	orr.w	r3, r3, #32
 8002216:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800221e:	e006      	b.n	800222e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b20      	cmp	r3, #32
 800222c:	d1e9      	bne.n	8002202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b20      	cmp	r3, #32
 800223a:	d003      	beq.n	8002244 <I2C_IsErrorOccurred+0xe0>
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0aa      	beq.n	800219a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2220      	movs	r2, #32
 8002252:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01c      	beq.n	8002312 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fe45 	bl	8001f68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <I2C_IsErrorOccurred+0x1bc>)
 80022ea:	400b      	ands	r3, r1
 80022ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002316:	4618      	mov	r0, r3
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	4613      	mov	r3, r2
 8002334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800233c:	7a7b      	ldrb	r3, [r7, #9]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002344:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	4313      	orrs	r3, r2
 800234e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002352:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	0d5b      	lsrs	r3, r3, #21
 800235e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <I2C_TransferConfig+0x60>)
 8002364:	430b      	orrs	r3, r1
 8002366:	43db      	mvns	r3, r3
 8002368:	ea02 0103 	and.w	r1, r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	03ff63ff 	.word	0x03ff63ff

08002388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	d138      	bne.n	8002410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e032      	b.n	8002412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6819      	ldr	r1, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	d139      	bne.n	80024a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800243e:	2302      	movs	r3, #2
 8002440:	e033      	b.n	80024aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2224      	movs	r2, #36	; 0x24
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e041      	b.n	800254c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80024d0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f245 5255 	movw	r2, #21845	; 0x5555
 80024da:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6852      	ldr	r2, [r2, #4]
 80024e4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80024f0:	f7fe ffc4 	bl	800147c <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80024f6:	e00f      	b.n	8002518 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80024f8:	f7fe ffc0 	bl	800147c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b27      	cmp	r3, #39	; 0x27
 8002504:	d908      	bls.n	8002518 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e019      	b.n	800254c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e8      	bne.n	80024f8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d005      	beq.n	8002540 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68d2      	ldr	r2, [r2, #12]
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	e004      	b.n	800254a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800255a:	af00      	add	r7, sp, #0
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002564:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f001 b823 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 817d 	beq.w	800288a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002590:	4bbc      	ldr	r3, [pc, #752]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b04      	cmp	r3, #4
 800259a:	d00c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800259c:	4bb9      	ldr	r3, [pc, #740]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d15c      	bne.n	8002662 <HAL_RCC_OscConfig+0x10e>
 80025a8:	4bb6      	ldr	r3, [pc, #728]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d155      	bne.n	8002662 <HAL_RCC_OscConfig+0x10e>
 80025b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x94>
 80025e2:	4ba8      	ldr	r3, [pc, #672]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e015      	b.n	8002614 <HAL_RCC_OscConfig+0xc0>
 80025e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002600:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002604:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002610:	4b9c      	ldr	r3, [pc, #624]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002618:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800261c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002620:	fa92 f2a2 	rbit	r2, r2
 8002624:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002628:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 811f 	beq.w	8002888 <HAL_RCC_OscConfig+0x334>
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 8116 	bne.w	8002888 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f000 bfaf 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x12e>
 8002674:	4b83      	ldr	r3, [pc, #524]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a82      	ldr	r2, [pc, #520]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e036      	b.n	80026f0 <HAL_RCC_OscConfig+0x19c>
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x158>
 8002692:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7b      	ldr	r2, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b79      	ldr	r3, [pc, #484]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a78      	ldr	r2, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e021      	b.n	80026f0 <HAL_RCC_OscConfig+0x19c>
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x184>
 80026be:	4b71      	ldr	r3, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a70      	ldr	r2, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6d      	ldr	r2, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x19c>
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f0:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f023 020f 	bic.w	r2, r3, #15
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	495f      	ldr	r1, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002706:	4313      	orrs	r3, r2
 8002708:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d059      	beq.n	80027ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe feaf 	bl	800147c <HAL_GetTick>
 800271e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe feaa 	bl	800147c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d902      	bls.n	800273a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	f000 bf43 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 800273a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800274e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <HAL_RCC_OscConfig+0x218>
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e015      	b.n	8002798 <HAL_RCC_OscConfig+0x244>
 800276c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002770:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002784:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002788:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002794:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800279c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f002 021f 	and.w	r2, r2, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ab      	beq.n	8002724 <HAL_RCC_OscConfig+0x1d0>
 80027cc:	e05d      	b.n	800288a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fe55 	bl	800147c <HAL_GetTick>
 80027d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fe50 	bl	800147c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bee9 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002802:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x2cc>
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x2f8>
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800283c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002854:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002860:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ab      	bne.n	80027d8 <HAL_RCC_OscConfig+0x284>
 8002880:	e003      	b.n	800288a <HAL_RCC_OscConfig+0x336>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 817d 	beq.w	8002b9a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028a0:	4ba6      	ldr	r3, [pc, #664]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028ac:	4ba3      	ldr	r3, [pc, #652]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d172      	bne.n	800299e <HAL_RCC_OscConfig+0x44a>
 80028b8:	4ba0      	ldr	r3, [pc, #640]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d16c      	bne.n	800299e <HAL_RCC_OscConfig+0x44a>
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_OscConfig+0x3a0>
 80028ee:	4b93      	ldr	r3, [pc, #588]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e013      	b.n	800291c <HAL_RCC_OscConfig+0x3c8>
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002906:	2302      	movs	r3, #2
 8002908:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800290c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002918:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2202      	movs	r2, #2
 800291e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002922:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002926:	fa92 f2a2 	rbit	r2, r2
 800292a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800292e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f042 0220 	orr.w	r2, r2, #32
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f002 021f 	and.w	r2, r2, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCC_OscConfig+0x410>
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 be2e 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	21f8      	movs	r1, #248	; 0xf8
 800297a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002982:	fa91 f1a1 	rbit	r1, r1
 8002986:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800298a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800298e:	fab1 f181 	clz	r1, r1
 8002992:	b2c9      	uxtb	r1, r1
 8002994:	408b      	lsls	r3, r1
 8002996:	4969      	ldr	r1, [pc, #420]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299c:	e0fd      	b.n	8002b9a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8088 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x56c>
 80029b0:	2301      	movs	r3, #1
 80029b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	461a      	mov	r2, r3
 80029d8:	2301      	movs	r3, #1
 80029da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fd4e 	bl	800147c <HAL_GetTick>
 80029e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fd49 	bl	800147c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	f000 bde2 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d8>
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e013      	b.n	8002a54 <HAL_RCC_OscConfig+0x500>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a6a:	fab2 f282 	clz	r2, r2
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f042 0220 	orr.w	r2, r2, #32
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f002 021f 	and.w	r2, r2, #31
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0af      	beq.n	80029e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	21f8      	movs	r1, #248	; 0xf8
 8002a9c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002aa4:	fa91 f1a1 	rbit	r1, r1
 8002aa8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002aac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ab0:	fab1 f181 	clz	r1, r1
 8002ab4:	b2c9      	uxtb	r1, r1
 8002ab6:	408b      	lsls	r3, r1
 8002ab8:	4920      	ldr	r1, [pc, #128]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
 8002abe:	e06c      	b.n	8002b9a <HAL_RCC_OscConfig+0x646>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fcc6 	bl	800147c <HAL_GetTick>
 8002af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fcc1 	bl	800147c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	f000 bd5a 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d104      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5ec>
 8002b36:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <HAL_RCC_OscConfig+0x5e8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e015      	b.n	8002b68 <HAL_RCC_OscConfig+0x614>
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	2302      	movs	r3, #2
 8002b42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b52:	2302      	movs	r3, #2
 8002b54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b64:	4bc8      	ldr	r3, [pc, #800]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b72:	fa92 f2a2 	rbit	r2, r2
 8002b76:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ad      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8110 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d079      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x760>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4bab      	ldr	r3, [pc, #684]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	461a      	mov	r2, r3
 8002be6:	2301      	movs	r3, #1
 8002be8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fc47 	bl	800147c <HAL_GetTick>
 8002bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fc42 	bl	800147c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d902      	bls.n	8002c0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	f000 bcdb 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c48:	2202      	movs	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c70:	2102      	movs	r1, #2
 8002c72:	6019      	str	r1, [r3, #0]
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f1a3 	rbit	r1, r3
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c8a:	6019      	str	r1, [r3, #0]
  return result;
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0a0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x6a0>
 8002cb2:	e08d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x87c>
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ce0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x938>)
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fbc1 	bl	800147c <HAL_GetTick>
 8002cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d00:	f7fe fbbc 	bl	800147c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	f000 bc55 	b.w	80035c0 <HAL_RCC_OscConfig+0x106c>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d1e:	2202      	movs	r2, #2
 8002d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d8e:	2102      	movs	r1, #2
 8002d90:	6019      	str	r1, [r3, #0]
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f1a3 	rbit	r1, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002da8:	6019      	str	r1, [r3, #0]
  return result;
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d197      	bne.n	8002d00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 81a1 	beq.w	8003128 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_RCC_OscConfig+0x93c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11a      	bne.n	8002e68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCC_OscConfig+0x93c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <HAL_RCC_OscConfig+0x93c>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fb1d 	bl	800147c <HAL_GetTick>
 8002e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe fb18 	bl	800147c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e3b1      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_OscConfig+0x93c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCC_OscConfig+0x940>
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a02      	ldr	r2, [pc, #8]	; (8002e88 <HAL_RCC_OscConfig+0x934>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e03c      	b.n	8002f00 <HAL_RCC_OscConfig+0x9ac>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	10908120 	.word	0x10908120
 8002e90:	40007000 	.word	0x40007000
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10c      	bne.n	8002ebe <HAL_RCC_OscConfig+0x96a>
 8002ea4:	4bc1      	ldr	r3, [pc, #772]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4ac0      	ldr	r2, [pc, #768]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	4bbe      	ldr	r3, [pc, #760]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4abd      	ldr	r2, [pc, #756]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e020      	b.n	8002f00 <HAL_RCC_OscConfig+0x9ac>
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x994>
 8002ece:	4bb7      	ldr	r3, [pc, #732]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4ab6      	ldr	r2, [pc, #728]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4bb4      	ldr	r3, [pc, #720]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4ab3      	ldr	r2, [pc, #716]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x9ac>
 8002ee8:	4bb0      	ldr	r3, [pc, #704]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4aaf      	ldr	r2, [pc, #700]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4bad      	ldr	r3, [pc, #692]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4aac      	ldr	r2, [pc, #688]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8081 	beq.w	8003014 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fab3 	bl	800147c <HAL_GetTick>
 8002f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe faae 	bl	800147c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e345      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f60:	2202      	movs	r2, #2
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f7a:	601a      	str	r2, [r3, #0]
  return result;
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xa4c>
 8002f9a:	4b84      	ldr	r3, [pc, #528]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	e013      	b.n	8002fc8 <HAL_RCC_OscConfig+0xa74>
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fa8:	2202      	movs	r2, #2
 8002faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fcc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	6011      	str	r1, [r2, #0]
 8002fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	fa92 f1a2 	rbit	r1, r2
 8002fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fea:	6011      	str	r1, [r2, #0]
  return result;
 8002fec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	fab2 f282 	clz	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f002 021f 	and.w	r2, r2, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d084      	beq.n	8002f1c <HAL_RCC_OscConfig+0x9c8>
 8003012:	e07f      	b.n	8003114 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fa32 	bl	800147c <HAL_GetTick>
 8003018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fa2d 	bl	800147c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e2c4      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800303e:	2202      	movs	r2, #2
 8003040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fa93 f2a3 	rbit	r2, r3
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800307c:	601a      	str	r2, [r3, #0]
  return result;
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003086:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_OscConfig+0xb4e>
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	e013      	b.n	80030ca <HAL_RCC_OscConfig+0xb76>
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030d2:	2102      	movs	r1, #2
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	fa92 f1a2 	rbit	r1, r2
 80030e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f002 021f 	and.w	r2, r2, #31
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d184      	bne.n	800301e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003114:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8242 	beq.w	80035be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_OscConfig+0xc58>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b08      	cmp	r3, #8
 8003144:	f000 8213 	beq.w	800356e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f040 8162 	bne.w	800341e <HAL_RCC_OscConfig+0xeca>
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003162:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003188:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003194:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	461a      	mov	r2, r3
 800319c:	2300      	movs	r3, #0
 800319e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe f96c 	bl	800147c <HAL_GetTick>
 80031a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	e00c      	b.n	80031c4 <HAL_RCC_OscConfig+0xc70>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f964 	bl	800147c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1fd      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031e8:	601a      	str	r2, [r3, #0]
  return result;
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80031f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_RCC_OscConfig+0xcba>
 8003208:	4bb0      	ldr	r3, [pc, #704]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e027      	b.n	800325e <HAL_RCC_OscConfig+0xd0a>
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800323c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4b9c      	ldr	r3, [pc, #624]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003262:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003266:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800326a:	6011      	str	r1, [r2, #0]
 800326c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003270:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	fa92 f1a2 	rbit	r1, r2
 800327a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003282:	6011      	str	r1, [r2, #0]
  return result;
 8003284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003288:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	fab2 f282 	clz	r2, r2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f042 0220 	orr.w	r2, r2, #32
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d182      	bne.n	80031b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032aa:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	430b      	orrs	r3, r1
 80032cc:	497f      	ldr	r1, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032f6:	601a      	str	r2, [r3, #0]
  return result;
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003300:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800330c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f8b0 	bl	800147c <HAL_GetTick>
 800331c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003320:	e009      	b.n	8003336 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe f8ab 	bl	800147c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e144      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800333e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800335a:	601a      	str	r2, [r3, #0]
  return result;
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0xe2c>
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e027      	b.n	80033d0 <HAL_RCC_OscConfig+0xe7c>
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fa92 f1a2 	rbit	r1, r2
 80033ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033f4:	6011      	str	r1, [r2, #0]
  return result;
 80033f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d082      	beq.n	8003322 <HAL_RCC_OscConfig+0xdce>
 800341c:	e0cf      	b.n	80035be <HAL_RCC_OscConfig+0x106a>
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800344c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	2300      	movs	r3, #0
 8003462:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe f80a 	bl	800147c <HAL_GetTick>
 8003468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	e009      	b.n	8003482 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe f805 	bl	800147c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e09e      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800348a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034a6:	601a      	str	r2, [r3, #0]
  return result;
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d104      	bne.n	80034d0 <HAL_RCC_OscConfig+0xf7c>
 80034c6:	4b01      	ldr	r3, [pc, #4]	; (80034cc <HAL_RCC_OscConfig+0xf78>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e029      	b.n	8003520 <HAL_RCC_OscConfig+0xfcc>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x1078>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003524:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003532:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	fa92 f1a2 	rbit	r1, r2
 800353c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003540:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003544:	6011      	str	r1, [r2, #0]
  return result;
 8003546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d180      	bne.n	800346e <HAL_RCC_OscConfig+0xf1a>
 800356c:	e027      	b.n	80035be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e01e      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_OscConfig+0x1078>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800358a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800358e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10b      	bne.n	80035ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b09e      	sub	sp, #120	; 0x78
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e162      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b90      	ldr	r3, [pc, #576]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d910      	bls.n	8003618 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b8d      	ldr	r3, [pc, #564]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	498b      	ldr	r1, [pc, #556]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b89      	ldr	r3, [pc, #548]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e14a      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b82      	ldr	r3, [pc, #520]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	497f      	ldr	r1, [pc, #508]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80dc 	beq.w	80037fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d13c      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xf6>
 800364c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800365a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_RCC_ClockConfig+0xa6>
 8003670:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	e00f      	b.n	8003696 <HAL_RCC_ClockConfig+0xc6>
 8003676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	667b      	str	r3, [r7, #100]	; 0x64
 8003684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003688:	663b      	str	r3, [r7, #96]	; 0x60
 800368a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800369a:	65ba      	str	r2, [r7, #88]	; 0x58
 800369c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800369e:	fa92 f2a2 	rbit	r2, r2
 80036a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036a6:	fab2 f282 	clz	r2, r2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f042 0220 	orr.w	r2, r2, #32
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f002 021f 	and.w	r2, r2, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d17b      	bne.n	80037ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0f3      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d13c      	bne.n	8003748 <HAL_RCC_ClockConfig+0x178>
 80036ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x128>
 80036f2:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e00f      	b.n	8003718 <HAL_RCC_ClockConfig+0x148>
 80036f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
 8003706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370a:	643b      	str	r3, [r7, #64]	; 0x40
 800370c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371c:	63ba      	str	r2, [r7, #56]	; 0x38
 800371e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f042 0220 	orr.w	r2, r2, #32
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f002 021f 	and.w	r2, r2, #31
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d13a      	bne.n	80037ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b2      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
 8003748:	2302      	movs	r3, #2
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_RCC_ClockConfig+0x1a0>
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	e00d      	b.n	800378c <HAL_RCC_ClockConfig+0x1bc>
 8003770:	2302      	movs	r3, #2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	2302      	movs	r3, #2
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	4b29      	ldr	r3, [pc, #164]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2202      	movs	r2, #2
 800378e:	61ba      	str	r2, [r7, #24]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	fa92 f2a2 	rbit	r2, r2
 8003796:	617a      	str	r2, [r7, #20]
  return result;
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	fab2 f282 	clz	r2, r2
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f042 0220 	orr.w	r2, r2, #32
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f002 021f 	and.w	r2, r2, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e079      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	491a      	ldr	r1, [pc, #104]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fe56 	bl	800147c <HAL_GetTick>
 80037d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fd fe52 	bl	800147c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e061      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d214      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4906      	ldr	r1, [pc, #24]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e040      	b.n	80038ae <HAL_RCC_ClockConfig+0x2de>
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	491a      	ldr	r1, [pc, #104]	; (80038b8 <HAL_RCC_ClockConfig+0x2e8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4912      	ldr	r1, [pc, #72]	; (80038b8 <HAL_RCC_ClockConfig+0x2e8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003872:	f000 f829 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003876:	4601      	mov	r1, r0
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_ClockConfig+0x2e8>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003880:	22f0      	movs	r2, #240	; 0xf0
 8003882:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	fa92 f2a2 	rbit	r2, r2
 800388a:	60fa      	str	r2, [r7, #12]
  return result;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	fab2 f282 	clz	r2, r2
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	40d3      	lsrs	r3, r2
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x2ec>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
 800389a:	fa21 f303 	lsr.w	r3, r1, r3
 800389e:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <HAL_RCC_ClockConfig+0x2f0>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_RCC_ClockConfig+0x2f4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fda4 	bl	80013f4 <HAL_InitTick>
  
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3778      	adds	r7, #120	; 0x78
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08004578 	.word	0x08004578
 80038c0:	20000000 	.word	0x20000000
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b08b      	sub	sp, #44	; 0x2c
 80038cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x30>
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x36>
 80038f6:	e03c      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_GetSysClockFreq+0xc4>)
 80038fa:	623b      	str	r3, [r7, #32]
      break;
 80038fc:	e03c      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003904:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003908:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	fa92 f2a2 	rbit	r2, r2
 8003910:	607a      	str	r2, [r7, #4]
  return result;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	fab2 f282 	clz	r2, r2
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	40d3      	lsrs	r3, r2
 800391c:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_RCC_GetSysClockFreq+0xc8>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	220f      	movs	r2, #15
 800392c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	fa92 f2a2 	rbit	r2, r2
 8003934:	60fa      	str	r2, [r7, #12]
  return result;
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	40d3      	lsrs	r3, r2
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	fbb2 f2f3 	udiv	r2, r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	623b      	str	r3, [r7, #32]
      break;
 8003970:	e002      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003974:	623b      	str	r3, [r7, #32]
      break;
 8003976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003978:	6a3b      	ldr	r3, [r7, #32]
}
 800397a:	4618      	mov	r0, r3
 800397c:	372c      	adds	r7, #44	; 0x2c
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	01e84800 	.word	0x01e84800
 8003990:	08004590 	.word	0x08004590
 8003994:	080045a0 	.word	0x080045a0
 8003998:	003d0900 	.word	0x003d0900
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000000 	.word	0x20000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039be:	f7ff ffef 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039c2:	4601      	mov	r1, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	fa92 f2a2 	rbit	r2, r2
 80039d8:	603a      	str	r2, [r7, #0]
  return result;
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	fab2 f282 	clz	r2, r2
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	40d3      	lsrs	r3, r2
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039e6:	5cd3      	ldrb	r3, [r2, r3]
 80039e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	08004588 	.word	0x08004588

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a02:	f7ff ffcd 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	fa92 f2a2 	rbit	r2, r2
 8003a1c:	603a      	str	r2, [r7, #0]
  return result;
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	40d3      	lsrs	r3, r2
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08004588 	.word	0x08004588

08003a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b092      	sub	sp, #72	; 0x48
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80cd 	beq.w	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a64:	4b86      	ldr	r3, [pc, #536]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10e      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4a82      	ldr	r2, [pc, #520]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	61d3      	str	r3, [r2, #28]
 8003a7c:	4b80      	ldr	r3, [pc, #512]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b7d      	ldr	r3, [pc, #500]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d118      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9a:	4b7a      	ldr	r3, [pc, #488]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa6:	f7fd fce9 	bl	800147c <HAL_GetTick>
 8003aaa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	e008      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aae:	f7fd fce5 	bl	800147c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b64      	cmp	r3, #100	; 0x64
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0db      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d07d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d076      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	461a      	mov	r2, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b55      	ldr	r3, [pc, #340]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b3c:	4a50      	ldr	r2, [pc, #320]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b40:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d045      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fc96 	bl	800147c <HAL_GetTick>
 8003b50:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fc92 	bl	800147c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e086      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	2302      	movs	r3, #2
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	61fb      	str	r3, [r7, #28]
  return result;
 8003b82:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d102      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b98:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	e007      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2202      	movs	r2, #2
 8003bb0:	613a      	str	r2, [r7, #16]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	fa92 f2a2 	rbit	r2, r2
 8003bb8:	60fa      	str	r2, [r7, #12]
  return result;
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0bd      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bd8:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4926      	ldr	r1, [pc, #152]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	491a      	ldr	r1, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f023 0210 	bic.w	r2, r3, #16
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4912      	ldr	r1, [pc, #72]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	490b      	ldr	r1, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3748      	adds	r7, #72	; 0x48
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
 8003c88:	10908100 	.word	0x10908100

08003c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e095      	b.n	8003dca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d009      	beq.n	8003cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
 8003cb6:	e005      	b.n	8003cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fa52 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d04:	d902      	bls.n	8003d0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e002      	b.n	8003d12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d1a:	d007      	beq.n	8003d2c <HAL_SPI_Init+0xa0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	ea42 0103 	orr.w	r1, r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	f003 0204 	and.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003da8:	ea42 0103 	orr.w	r1, r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e040      	b.n	8003e66 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd fa09 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f82d 	bl	8003e70 <UART_SetConfig>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e022      	b.n	8003e66 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f957 	bl	80040dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f9de 	bl	8004220 <UART_CheckIdleState>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b8a      	ldr	r3, [pc, #552]	; (80040c4 <UART_SetConfig+0x254>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	6979      	ldr	r1, [r7, #20]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a78      	ldr	r2, [pc, #480]	; (80040c8 <UART_SetConfig+0x258>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d120      	bne.n	8003f2e <UART_SetConfig+0xbe>
 8003eec:	4b77      	ldr	r3, [pc, #476]	; (80040cc <UART_SetConfig+0x25c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d817      	bhi.n	8003f28 <UART_SetConfig+0xb8>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x90>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f1d 	.word	0x08003f1d
 8003f08:	08003f23 	.word	0x08003f23
 8003f0c:	08003f17 	.word	0x08003f17
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e01d      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e01a      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e017      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f22:	2308      	movs	r3, #8
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e014      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e011      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <UART_SetConfig+0x260>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d102      	bne.n	8003f3e <UART_SetConfig+0xce>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a64      	ldr	r2, [pc, #400]	; (80040d4 <UART_SetConfig+0x264>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d102      	bne.n	8003f4e <UART_SetConfig+0xde>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e001      	b.n	8003f52 <UART_SetConfig+0xe2>
 8003f4e:	2310      	movs	r3, #16
 8003f50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5a:	d15a      	bne.n	8004012 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d827      	bhi.n	8003fb2 <UART_SetConfig+0x142>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0xf8>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7ff fd14 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8003f90:	61b8      	str	r0, [r7, #24]
        break;
 8003f92:	e013      	b.n	8003fbc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7ff fd32 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8003f98:	61b8      	str	r0, [r7, #24]
        break;
 8003f9a:	e00f      	b.n	8003fbc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <UART_SetConfig+0x268>)
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	e00c      	b.n	8003fbc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7ff fc91 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	61b8      	str	r0, [r7, #24]
        break;
 8003fa8:	e008      	b.n	8003fbc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	61bb      	str	r3, [r7, #24]
        break;
 8003fb0:	e004      	b.n	8003fbc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	77bb      	strb	r3, [r7, #30]
        break;
 8003fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d074      	beq.n	80040ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	005a      	lsls	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	d916      	bls.n	800400c <UART_SetConfig+0x19c>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d212      	bcs.n	800400c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f023 030f 	bic.w	r3, r3, #15
 8003fee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	89fb      	ldrh	r3, [r7, #14]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	89fa      	ldrh	r2, [r7, #14]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	e04f      	b.n	80040ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	77bb      	strb	r3, [r7, #30]
 8004010:	e04c      	b.n	80040ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004012:	7ffb      	ldrb	r3, [r7, #31]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d828      	bhi.n	800406a <UART_SetConfig+0x1fa>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x1b0>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004045 	.word	0x08004045
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004055 	.word	0x08004055
 800402c:	0800406b 	.word	0x0800406b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7ff fcb8 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004048:	61b8      	str	r0, [r7, #24]
        break;
 800404a:	e013      	b.n	8004074 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7ff fcd6 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8004050:	61b8      	str	r0, [r7, #24]
        break;
 8004052:	e00f      	b.n	8004074 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <UART_SetConfig+0x268>)
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e00c      	b.n	8004074 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7ff fc35 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800405e:	61b8      	str	r0, [r7, #24]
        break;
 8004060:	e008      	b.n	8004074 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	61bb      	str	r3, [r7, #24]
        break;
 8004068:	e004      	b.n	8004074 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	77bb      	strb	r3, [r7, #30]
        break;
 8004072:	bf00      	nop
    }

    if (pclk != 0U)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085a      	lsrs	r2, r3, #1
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b0f      	cmp	r3, #15
 8004092:	d909      	bls.n	80040a8 <UART_SetConfig+0x238>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409a:	d205      	bcs.n	80040a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e001      	b.n	80040ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	efff69f3 	.word	0xefff69f3
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40004400 	.word	0x40004400
 80040d4:	40004800 	.word	0x40004800
 80040d8:	007a1200 	.word	0x007a1200

080040dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d10a      	bne.n	80041f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b098      	sub	sp, #96	; 0x60
 8004224:	af02      	add	r7, sp, #8
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004230:	f7fd f924 	bl	800147c <HAL_GetTick>
 8004234:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d12e      	bne.n	80042a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f88c 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d021      	beq.n	80042a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	647b      	str	r3, [r7, #68]	; 0x44
 800427e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e062      	b.n	8004368 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d149      	bne.n	8004344 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f856 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03c      	beq.n	8004344 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	623b      	str	r3, [r7, #32]
   return(result);
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	60fb      	str	r3, [r7, #12]
   return(result);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431c:	61fa      	str	r2, [r7, #28]
 800431e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	617b      	str	r3, [r7, #20]
   return(result);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e011      	b.n	8004368 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3758      	adds	r7, #88	; 0x58
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e049      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d045      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fd f877 	bl	800147c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e048      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d031      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d110      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f838 	bl	800443e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2208      	movs	r2, #8
 80043d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e029      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f0:	d111      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f81e 	bl	800443e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e00f      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	429a      	cmp	r2, r3
 8004432:	d0a6      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800443e:	b480      	push	{r7}
 8004440:	b095      	sub	sp, #84	; 0x54
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
 8004466:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800446a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3308      	adds	r3, #8
 800447e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	61fb      	str	r3, [r7, #28]
   return(result);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d118      	bne.n	80044e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	613b      	str	r3, [r7, #16]
   return(result);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e6      	bne.n	80044b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044fa:	bf00      	nop
 80044fc:	3754      	adds	r7, #84	; 0x54
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4d0d      	ldr	r5, [pc, #52]	; (8004540 <__libc_init_array+0x38>)
 800450c:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 800450e:	1b64      	subs	r4, r4, r5
 8004510:	10a4      	asrs	r4, r4, #2
 8004512:	2600      	movs	r6, #0
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	4d0b      	ldr	r5, [pc, #44]	; (8004548 <__libc_init_array+0x40>)
 800451a:	4c0c      	ldr	r4, [pc, #48]	; (800454c <__libc_init_array+0x44>)
 800451c:	f000 f820 	bl	8004560 <_init>
 8004520:	1b64      	subs	r4, r4, r5
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	2600      	movs	r6, #0
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	f855 3b04 	ldr.w	r3, [r5], #4
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	080045b0 	.word	0x080045b0
 8004544:	080045b0 	.word	0x080045b0
 8004548:	080045b0 	.word	0x080045b0
 800454c:	080045b4 	.word	0x080045b4

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
