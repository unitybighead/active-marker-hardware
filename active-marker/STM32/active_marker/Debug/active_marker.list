
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b2c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007cb8  08007cb8  00008cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e30  08007e30  000090c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007e30  08007e30  000090c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e30  08007e30  000090c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e34  08007e34  00008e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007e38  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090c8  2**0
                  CONTENTS
 10 .bss          00000344  200000c8  200000c8  000090c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000090c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012aaf  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e4d  00000000  00000000  0001bba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0001e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bac  00000000  00000000  0001f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbc5  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cfe  00000000  00000000  0003d089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1ad9  00000000  00000000  00052d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f4860  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f8  00000000  00000000  000f48a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000f8e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c9c 	.word	0x08007c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	08007c9c 	.word	0x08007c9c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <VEML6030_init+0x38>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00};
 8000b92:	2300      	movs	r3, #0
 8000b94:	81bb      	strh	r3, [r7, #12]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 2, 100);
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <VEML6030_init+0x38>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	f107 020c 	add.w	r2, r7, #12
 8000ba2:	2364      	movs	r3, #100	@ 0x64
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f002 f8f8 	bl	8002d9c <HAL_I2C_Master_Transmit>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000e4 	.word	0x200000e4
 8000bbc:	00000000 	.word	0x00000000

08000bc0 <VEML6030_getLux>:
/*
 * @brief get lux data
 * @param sensor address
 * @return lux
 */
float VEML6030_getLux(uint8_t addr) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  float gain = VEML6030_getGain(addr);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f857 	bl	8000c80 <VEML6030_getGain>
 8000bd2:	ed87 0a05 	vstr	s0, [r7, #20]
  uint16_t inttime = VEML6030_getIntTime(addr);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f891 	bl	8000d00 <VEML6030_getIntTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	827b      	strh	r3, [r7, #18]
  uint16_t als = VEML6030_getALS(addr);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f8ed 	bl	8000dc4 <VEML6030_getALS>
 8000bea:	4603      	mov	r3, r0
 8000bec:	823b      	strh	r3, [r7, #16]
  float resolution = (1.8432 / ((float) inttime / 25.0)) * (0.125 / gain);
 8000bee:	8a7b      	ldrh	r3, [r7, #18]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf8:	ee17 0a90 	vmov	r0, s15
 8000bfc:	f7ff fc48 	bl	8000490 <__aeabi_f2d>
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <VEML6030_getLux+0xb8>)
 8000c06:	f7ff fdc5 	bl	8000794 <__aeabi_ddiv>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	a118      	add	r1, pc, #96	@ (adr r1, 8000c70 <VEML6030_getLux+0xb0>)
 8000c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c14:	f7ff fdbe 	bl	8000794 <__aeabi_ddiv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4614      	mov	r4, r2
 8000c1e:	461d      	mov	r5, r3
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff fc35 	bl	8000490 <__aeabi_f2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8000c32:	f7ff fdaf 	bl	8000794 <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	f7ff fc7f 	bl	8000540 <__aeabi_dmul>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff ff49 	bl	8000ae0 <__aeabi_d2f>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60fb      	str	r3, [r7, #12]
  return als * resolution;
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	487fcb92 	.word	0x487fcb92
 8000c74:	3ffd7dbf 	.word	0x3ffd7dbf
 8000c78:	40390000 	.word	0x40390000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <VEML6030_getGain>:
/*
 * @brief get gain data
 * @param addr sensor address
 * @return gain
 */
float VEML6030_getGain(uint8_t addr) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8aa 	bl	8000de8 <VEML6030_readWord>
 8000c94:	4603      	mov	r3, r0
 8000c96:	82fb      	strh	r3, [r7, #22]
  uint16_t x0 = VEML6030_readBit(config, 11);
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	210b      	movs	r1, #11
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f8cb 	bl	8000e38 <VEML6030_readBit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	82bb      	strh	r3, [r7, #20]
  uint16_t x1 = VEML6030_readBit(config, 12);
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	210c      	movs	r1, #12
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8c4 	bl	8000e38 <VEML6030_readBit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	827b      	strh	r3, [r7, #18]
  float gain = pow(2,(x0 - 3 * x1));
 8000cb4:	8aba      	ldrh	r2, [r7, #20]
 8000cb6:	8a7b      	ldrh	r3, [r7, #18]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	1acb      	subs	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fbd3 	bl	800046c <__aeabi_i2d>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	ec43 2b11 	vmov	d1, r2, r3
 8000cce:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8000cf8 <VEML6030_getGain+0x78>
 8000cd2:	f006 f885 	bl	8006de0 <pow>
 8000cd6:	ec53 2b10 	vmov	r2, r3, d0
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff feff 	bl	8000ae0 <__aeabi_d2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60fb      	str	r3, [r7, #12]
  return gain;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	ee07 3a90 	vmov	s15, r3
}
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40000000 	.word	0x40000000

08000d00 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f86a 	bl	8000de8 <VEML6030_readWord>
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
  uint8_t x2x1 = (config >> 6) & 0x03;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	099b      	lsrs	r3, r3, #6
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	737b      	strb	r3, [r7, #13]
  uint8_t x3 = VEML6030_readBit(config, 8);
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f884 	bl	8000e38 <VEML6030_readBit>
 8000d30:	4603      	mov	r3, r0
 8000d32:	733b      	strb	r3, [r7, #12]
  uint8_t x4 = VEML6030_readBit(config, 9);
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	2109      	movs	r1, #9
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f87d 	bl	8000e38 <VEML6030_readBit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	72fb      	strb	r3, [r7, #11]
  uint16_t IntTime = 100 *pow(2,x2x1)/ pow(2,(x3 + x4));
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb81 	bl	800044c <__aeabi_ui2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	ec43 2b11 	vmov	d1, r2, r3
 8000d52:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8000db8 <VEML6030_getIntTime+0xb8>
 8000d56:	f006 f843 	bl	8006de0 <pow>
 8000d5a:	ec51 0b10 	vmov	r0, r1, d0
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <VEML6030_getIntTime+0xc0>)
 8000d64:	f7ff fbec 	bl	8000540 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	461d      	mov	r5, r3
 8000d70:	7b3a      	ldrb	r2, [r7, #12]
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	4413      	add	r3, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb78 	bl	800046c <__aeabi_i2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	ec43 2b11 	vmov	d1, r2, r3
 8000d84:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8000db8 <VEML6030_getIntTime+0xb8>
 8000d88:	f006 f82a 	bl	8006de0 <pow>
 8000d8c:	ec53 2b10 	vmov	r2, r3, d0
 8000d90:	4620      	mov	r0, r4
 8000d92:	4629      	mov	r1, r5
 8000d94:	f7ff fcfe 	bl	8000794 <__aeabi_ddiv>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe7e 	bl	8000aa0 <__aeabi_d2uiz>
 8000da4:	4603      	mov	r3, r0
 8000da6:	813b      	strh	r3, [r7, #8]
  return IntTime;
 8000da8:	893b      	ldrh	r3, [r7, #8]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bdb0      	pop	{r4, r5, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40000000 	.word	0x40000000
 8000dc0:	40590000 	.word	0x40590000

08000dc4 <VEML6030_getALS>:
/*
 * @brief get row illuminance data
 * @param addr address
 * @return row data
 */
uint16_t VEML6030_getALS(uint8_t addr){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  uint16_t als = VEML6030_readWord(addr, ALS_CMD);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f808 	bl	8000de8 <VEML6030_readWord>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	81fb      	strh	r3, [r7, #14]
  return als;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = { };
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <VEML6030_readWord+0x4c>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	b299      	uxth	r1, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	2364      	movs	r3, #100	@ 0x64
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	f002 f8b4 	bl	8002f84 <HAL_I2C_Mem_Read>
  uint16_t data = (buf[1] << 8) + buf[0];
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	7b3a      	ldrb	r2, [r7, #12]
 8000e24:	4413      	add	r3, r2
 8000e26:	81fb      	strh	r3, [r7, #14]
  return data;
 8000e28:	89fb      	ldrh	r3, [r7, #14]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000e4 	.word	0x200000e4

08000e38 <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	fa42 f303 	asr.w	r3, r2, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_EXTI_Callback>:
static const int msg_size = 8;
static uint8_t ID = 8;
static bool color = TEAM_COLOR_BLUE;
static uint16_t illuminance = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
  if (getMode() == MODE_MEMORY) {
 8000e6e:	f000 f87b 	bl	8000f68 <getMode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d16f      	bne.n	8000f58 <HAL_GPIO_EXTI_Callback+0xf4>
    switch (GPIO_Pin) {
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	2b20      	cmp	r3, #32
 8000e7c:	dc42      	bgt.n	8000f04 <HAL_GPIO_EXTI_Callback+0xa0>
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	db67      	blt.n	8000f52 <HAL_GPIO_EXTI_Callback+0xee>
 8000e82:	3b04      	subs	r3, #4
 8000e84:	2b1c      	cmp	r3, #28
 8000e86:	d864      	bhi.n	8000f52 <HAL_GPIO_EXTI_Callback+0xee>
 8000e88:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000f11 	.word	0x08000f11
 8000e94:	08000f53 	.word	0x08000f53
 8000e98:	08000f53 	.word	0x08000f53
 8000e9c:	08000f53 	.word	0x08000f53
 8000ea0:	08000f0b 	.word	0x08000f0b
 8000ea4:	08000f53 	.word	0x08000f53
 8000ea8:	08000f53 	.word	0x08000f53
 8000eac:	08000f53 	.word	0x08000f53
 8000eb0:	08000f53 	.word	0x08000f53
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f17 	.word	0x08000f17
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f53 	.word	0x08000f53
 8000eec:	08000f53 	.word	0x08000f53
 8000ef0:	08000f53 	.word	0x08000f53
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f53 	.word	0x08000f53
 8000efc:	08000f53 	.word	0x08000f53
 8000f00:	08000f0b 	.word	0x08000f0b
 8000f04:	2b40      	cmp	r3, #64	@ 0x40
 8000f06:	d014      	beq.n	8000f32 <HAL_GPIO_EXTI_Callback+0xce>
    case USER_BTN2_Pin:
      color = !color;
      break;

    default:
      break;
 8000f08:	e023      	b.n	8000f52 <HAL_GPIO_EXTI_Callback+0xee>
      setIDSwitch();
 8000f0a:	f000 f84f 	bl	8000fac <setIDSwitch>
      break;
 8000f0e:	e023      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0xf4>
      setColorSwitch();
 8000f10:	f000 f8a6 	bl	8001060 <setColorSwitch>
      break;
 8000f14:	e020      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0xf4>
      ID++;
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f20:	701a      	strb	r2, [r3, #0]
      if (ID > 15) {
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	d915      	bls.n	8000f56 <HAL_GPIO_EXTI_Callback+0xf2>
        ID = 0;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
      break;
 8000f30:	e011      	b.n	8000f56 <HAL_GPIO_EXTI_Callback+0xf2>
      color = !color;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_GPIO_EXTI_Callback+0x100>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf14      	ite	ne
 8000f3a:	2301      	movne	r3, #1
 8000f3c:	2300      	moveq	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f083 0301 	eor.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_GPIO_EXTI_Callback+0x100>)
 8000f4e:	701a      	strb	r2, [r3, #0]
      break;
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 8000f52:	bf00      	nop
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 8000f56:	bf00      	nop
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000054 	.word	0x20000054
 8000f64:	20000055 	.word	0x20000055

08000f68 <getMode>:

int getMode(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f001 fe3b 	bl	8002bec <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <getID>:

uint8_t getID(void) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ID;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <getID+0x14>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000054 	.word	0x20000054

08000f94 <getColor>:

bool getColor(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return color;
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <getColor+0x14>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000055 	.word	0x20000055

08000fac <setIDSwitch>:

void setIDSwitch(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  // Because of my bad circuit specs......
  ID = 0;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <setIDSwitch+0xac>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin)) << 0;
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4828      	ldr	r0, [pc, #160]	@ (800105c <setIDSwitch+0xb0>)
 8000fba:	f001 fe17 	bl	8002bec <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <setIDSwitch+0xac>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <setIDSwitch+0xac>)
 8000fda:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin)) << 1;
 8000fdc:	2120      	movs	r1, #32
 8000fde:	481f      	ldr	r0, [pc, #124]	@ (800105c <setIDSwitch+0xb0>)
 8000fe0:	f001 fe04 	bl	8002bec <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <setIDSwitch+0x42>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e000      	b.n	8000ff0 <setIDSwitch+0x44>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <setIDSwitch+0xac>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <setIDSwitch+0xac>)
 8001000:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID4_GPIO_Port, ID4_Pin)) << 2;
 8001002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f001 fdef 	bl	8002bec <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <setIDSwitch+0x6c>
 8001014:	2304      	movs	r3, #4
 8001016:	e000      	b.n	800101a <setIDSwitch+0x6e>
 8001018:	2300      	movs	r3, #0
 800101a:	b25a      	sxtb	r2, r3
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <setIDSwitch+0xac>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <setIDSwitch+0xac>)
 800102a:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID8_GPIO_Port, ID8_Pin)) << 3;
 800102c:	2110      	movs	r1, #16
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <setIDSwitch+0xb0>)
 8001030:	f001 fddc 	bl	8002bec <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <setIDSwitch+0x92>
 800103a:	2308      	movs	r3, #8
 800103c:	e000      	b.n	8001040 <setIDSwitch+0x94>
 800103e:	2300      	movs	r3, #0
 8001040:	b25a      	sxtb	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <setIDSwitch+0xac>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b02      	ldr	r3, [pc, #8]	@ (8001058 <setIDSwitch+0xac>)
 8001050:	701a      	strb	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000054 	.word	0x20000054
 800105c:	48000400 	.word	0x48000400

08001060 <setColorSwitch>:

void setColorSwitch(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  color = HAL_GPIO_ReadPin(COLOR_GPIO_Port, COLOR_Pin);
 8001064:	2104      	movs	r1, #4
 8001066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106a:	f001 fdbf 	bl	8002bec <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <setColorSwitch+0x24>)
 800107c:	701a      	strb	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000055 	.word	0x20000055

08001088 <setPattern>:

/* 0     4
 *    2
 *  1   3
 */
void setPattern(uint8_t ID, uint8_t color) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
  RGB pattern[5];
  pattern[0] = *(PATTERN_ADDR[ID]->dot0);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <setPattern+0xb0>)
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	8811      	ldrh	r1, [r2, #0]
 80010a8:	7892      	ldrb	r2, [r2, #2]
 80010aa:	8019      	strh	r1, [r3, #0]
 80010ac:	709a      	strb	r2, [r3, #2]
  pattern[1] = *(PATTERN_ADDR[ID]->dot1);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <setPattern+0xb0>)
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	f107 030b 	add.w	r3, r7, #11
 80010bc:	8811      	ldrh	r1, [r2, #0]
 80010be:	7892      	ldrb	r2, [r2, #2]
 80010c0:	8019      	strh	r1, [r3, #0]
 80010c2:	709a      	strb	r2, [r3, #2]
  pattern[3] = *(PATTERN_ADDR[ID]->dot2);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <setPattern+0xb0>)
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f107 0311 	add.w	r3, r7, #17
 80010d2:	8811      	ldrh	r1, [r2, #0]
 80010d4:	7892      	ldrb	r2, [r2, #2]
 80010d6:	8019      	strh	r1, [r3, #0]
 80010d8:	709a      	strb	r2, [r3, #2]
  pattern[4] = *(PATTERN_ADDR[ID]->dot3);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <setPattern+0xb0>)
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	7892      	ldrb	r2, [r2, #2]
 80010ec:	8019      	strh	r1, [r3, #0]
 80010ee:	709a      	strb	r2, [r3, #2]
  if (color == TEAM_COLOR_BLUE) {
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <setPattern+0x7e>
    pattern[2] = color_blue;
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <setPattern+0xb4>)
 80010f8:	f107 030e 	add.w	r3, r7, #14
 80010fc:	8811      	ldrh	r1, [r2, #0]
 80010fe:	7892      	ldrb	r2, [r2, #2]
 8001100:	8019      	strh	r1, [r3, #0]
 8001102:	709a      	strb	r2, [r3, #2]
 8001104:	e006      	b.n	8001114 <setPattern+0x8c>
  } else {
    pattern[2] = color_yellow;
 8001106:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <setPattern+0xb8>)
 8001108:	f107 030e 	add.w	r3, r7, #14
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	7892      	ldrb	r2, [r2, #2]
 8001110:	8019      	strh	r1, [r3, #0]
 8001112:	709a      	strb	r2, [r3, #2]
  }
  /*
   * Since data transfer to the first LED may fail,
   * the same output process is repeated.
   */
  NeoPixel_Send(pattern);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fbd7 	bl	80018cc <NeoPixel_Send>
  HAL_Delay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f000 ff98 	bl	8002054 <HAL_Delay>
  NeoPixel_Send(pattern);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fbcf 	bl	80018cc <NeoPixel_Send>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000010 	.word	0x20000010
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004

08001144 <Uart_Init>:

//--------------------------------------------
// UART

void Uart_Init(UART_HandleTypeDef *huart_arg) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  huart = huart_arg;
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <Uart_Init+0x28>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <Uart_Init+0x28>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2208      	movs	r2, #8
 8001158:	b292      	uxth	r2, r2
 800115a:	4905      	ldr	r1, [pc, #20]	@ (8001170 <Uart_Init+0x2c>)
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fb90 	bl	8005882 <HAL_UART_Receive_IT>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000ec 	.word	0x200000ec
 8001170:	200000f0 	.word	0x200000f0

08001174 <Uart_checkReset>:

void Uart_checkReset() {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  if (getMode() == MODE_UART && !uart_first_received && uwTick > 3000) {
 8001178:	f7ff fef6 	bl	8000f68 <getMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10e      	bne.n	80011a0 <Uart_checkReset+0x2c>
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <Uart_checkReset+0x30>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f083 0301 	eor.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <Uart_checkReset+0x2c>
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <Uart_checkReset+0x34>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <Uart_checkReset+0x2c>
    HAL_NVIC_SystemReset();
 800119c:	f001 f995 	bl	80024ca <HAL_NVIC_SystemReset>
  }
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000e8 	.word	0x200000e8
 80011a8:	200002c0 	.word	0x200002c0

080011ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart_arg) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if (huart_arg == huart && getMode() == MODE_UART) {
 80011b4:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <HAL_UART_RxCpltCallback+0x10c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d16f      	bne.n	800129e <HAL_UART_RxCpltCallback+0xf2>
 80011be:	f7ff fed3 	bl	8000f68 <getMode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d16a      	bne.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    uart_first_received = true;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	@ (80012bc <HAL_UART_RxCpltCallback+0x110>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
    switch (rx_buf[0]) {
 80011ce:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d862      	bhi.n	800129c <HAL_UART_RxCpltCallback+0xf0>
 80011d6:	a201      	add	r2, pc, #4	@ (adr r2, 80011dc <HAL_UART_RxCpltCallback+0x30>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	0800120f 	.word	0x0800120f
 80011e4:	08001229 	.word	0x08001229
 80011e8:	08001243 	.word	0x08001243
 80011ec:	0800125d 	.word	0x0800125d
 80011f0:	08001281 	.word	0x08001281
    case COMMAND_BLUE:
      color_blue.r = rx_buf[1];
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 80011f6:	785a      	ldrb	r2, [r3, #1]
 80011f8:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <HAL_UART_RxCpltCallback+0x118>)
 80011fa:	701a      	strb	r2, [r3, #0]
      color_blue.g = rx_buf[2];
 80011fc:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 80011fe:	789a      	ldrb	r2, [r3, #2]
 8001200:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <HAL_UART_RxCpltCallback+0x118>)
 8001202:	705a      	strb	r2, [r3, #1]
      color_blue.b = rx_buf[3];
 8001204:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001206:	78da      	ldrb	r2, [r3, #3]
 8001208:	4b2e      	ldr	r3, [pc, #184]	@ (80012c4 <HAL_UART_RxCpltCallback+0x118>)
 800120a:	709a      	strb	r2, [r3, #2]
      break;
 800120c:	e047      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_YELLOW:
      color_yellow.r = rx_buf[1];
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001210:	785a      	ldrb	r2, [r3, #1]
 8001212:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_UART_RxCpltCallback+0x11c>)
 8001214:	701a      	strb	r2, [r3, #0]
      color_yellow.g = rx_buf[2];
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001218:	789a      	ldrb	r2, [r3, #2]
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <HAL_UART_RxCpltCallback+0x11c>)
 800121c:	705a      	strb	r2, [r3, #1]
      color_yellow.b = rx_buf[3];
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001220:	78da      	ldrb	r2, [r3, #3]
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <HAL_UART_RxCpltCallback+0x11c>)
 8001224:	709a      	strb	r2, [r3, #2]
      break;
 8001226:	e03a      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_PINK:
      color_pink.r = rx_buf[1];
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 800122a:	785a      	ldrb	r2, [r3, #1]
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_UART_RxCpltCallback+0x120>)
 800122e:	701a      	strb	r2, [r3, #0]
      color_pink.g = rx_buf[2];
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001232:	789a      	ldrb	r2, [r3, #2]
 8001234:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <HAL_UART_RxCpltCallback+0x120>)
 8001236:	705a      	strb	r2, [r3, #1]
      color_pink.b = rx_buf[3];
 8001238:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 800123a:	78da      	ldrb	r2, [r3, #3]
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_UART_RxCpltCallback+0x120>)
 800123e:	709a      	strb	r2, [r3, #2]
      break;
 8001240:	e02d      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_GREEN:
      color_green.r = rx_buf[1];
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001244:	785a      	ldrb	r2, [r3, #1]
 8001246:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <HAL_UART_RxCpltCallback+0x124>)
 8001248:	701a      	strb	r2, [r3, #0]
      color_green.g = rx_buf[2];
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 800124c:	789a      	ldrb	r2, [r3, #2]
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_UART_RxCpltCallback+0x124>)
 8001250:	705a      	strb	r2, [r3, #1]
      color_green.b = rx_buf[3];
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001254:	78da      	ldrb	r2, [r3, #3]
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <HAL_UART_RxCpltCallback+0x124>)
 8001258:	709a      	strb	r2, [r3, #2]
      break;
 800125a:	e020      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_ILLUMINANCE:
      illuminance = 0;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_UART_RxCpltCallback+0x128>)
 800125e:	2200      	movs	r2, #0
 8001260:	801a      	strh	r2, [r3, #0]
      illuminance += (rx_buf[1] << 8) + rx_buf[2];
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b29b      	uxth	r3, r3
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 800126c:	7892      	ldrb	r2, [r2, #2]
 800126e:	4413      	add	r3, r2
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_UART_RxCpltCallback+0x128>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_UART_RxCpltCallback+0x128>)
 800127c:	801a      	strh	r2, [r3, #0]
      break;
 800127e:	e00e      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_ID:
      ID = rx_buf[1];
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 8001282:	785a      	ldrb	r2, [r3, #1]
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_UART_RxCpltCallback+0x12c>)
 8001286:	701a      	strb	r2, [r3, #0]
      color = rx_buf[2];
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 800128a:	789b      	ldrb	r3, [r3, #2]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_UART_RxCpltCallback+0x130>)
 8001298:	701a      	strb	r2, [r3, #0]
      break;
 800129a:	e000      	b.n	800129e <HAL_UART_RxCpltCallback+0xf2>
    default:
      break;
 800129c:	bf00      	nop
    }
  }
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_UART_RxCpltCallback+0x10c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2208      	movs	r2, #8
 80012a4:	b292      	uxth	r2, r2
 80012a6:	4906      	ldr	r1, [pc, #24]	@ (80012c0 <HAL_UART_RxCpltCallback+0x114>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 faea 	bl	8005882 <HAL_UART_Receive_IT>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000ec 	.word	0x200000ec
 80012bc:	200000e8 	.word	0x200000e8
 80012c0:	200000f0 	.word	0x200000f0
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	20000008 	.word	0x20000008
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	200000f8 	.word	0x200000f8
 80012d8:	20000054 	.word	0x20000054
 80012dc:	20000055 	.word	0x20000055

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ID = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
  bool color = TEAM_COLOR_YELLOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ee:	f000 fe4b 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f2:	f000 f899 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f6:	f000 fa19 	bl	800172c <MX_GPIO_Init>
  MX_DMA_Init();
 80012fa:	f000 f9f9 	bl	80016f0 <MX_DMA_Init>
  MX_SPI1_Init();
 80012fe:	f000 f987 	bl	8001610 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001302:	f000 f9c3 	bl	800168c <MX_USART1_UART_Init>
  MX_CAN_Init();
 8001306:	f000 f8f1 	bl	80014ec <MX_CAN_Init>
  MX_I2C1_Init();
 800130a:	f000 f923 	bl	8001554 <MX_I2C1_Init>
  MX_IWDG_Init();
 800130e:	f000 f961 	bl	80015d4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  VEML6030_init(&hi2c1, SENS_ADDR_0);
 8001312:	2190      	movs	r1, #144	@ 0x90
 8001314:	483e      	ldr	r0, [pc, #248]	@ (8001410 <main+0x130>)
 8001316:	f7ff fc33 	bl	8000b80 <VEML6030_init>
//  VEML6030_init(&hi2c1, SENS_ADDR_1);
  NeoPixel_Init(&hspi1);
 800131a:	483e      	ldr	r0, [pc, #248]	@ (8001414 <main+0x134>)
 800131c:	f000 fac6 	bl	80018ac <NeoPixel_Init>
  Uart_Init(&huart1);
 8001320:	483d      	ldr	r0, [pc, #244]	@ (8001418 <main+0x138>)
 8001322:	f7ff ff0f 	bl	8001144 <Uart_Init>
  setColorSwitch();
 8001326:	f7ff fe9b 	bl	8001060 <setColorSwitch>
  setIDSwitch();
 800132a:	f7ff fe3f 	bl	8000fac <setIDSwitch>
//setup cycle
  float *cycle_basis = calloc(CYCLE_LAST, sizeof(float));
 800132e:	2104      	movs	r1, #4
 8001330:	2003      	movs	r0, #3
 8001332:	f005 fbf5 	bl	8006b20 <calloc>
 8001336:	4603      	mov	r3, r0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t *cycle_old = calloc(CYCLE_LAST, sizeof(uint32_t));
 800133a:	2104      	movs	r1, #4
 800133c:	2003      	movs	r0, #3
 800133e:	f005 fbef 	bl	8006b20 <calloc>
 8001342:	4603      	mov	r3, r0
 8001344:	60fb      	str	r3, [r7, #12]
  cycle_basis[CYCLE_MAIN] = 20;
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4a34      	ldr	r2, [pc, #208]	@ (800141c <main+0x13c>)
 800134a:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_PATTERN] = 50;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	3308      	adds	r3, #8
 8001350:	4a33      	ldr	r2, [pc, #204]	@ (8001420 <main+0x140>)
 8001352:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_SENSOR] = VEML6030_getIntTime(SENS_ADDR_0);
 8001354:	2090      	movs	r0, #144	@ 0x90
 8001356:	f7ff fcd3 	bl	8000d00 <VEML6030_getIntTime>
 800135a:	4603      	mov	r3, r0
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	3304      	adds	r3, #4
 8001364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001368:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    ID = getID();
 800136c:	f7ff fe06 	bl	8000f7c <getID>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]
    color = getColor();
 8001374:	f7ff fe0e 	bl	8000f94 <getColor>
 8001378:	4603      	mov	r3, r0
 800137a:	75bb      	strb	r3, [r7, #22]
    if (CycleController(CYCLE_PATTERN, cycle_basis, cycle_old)) {
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	2002      	movs	r0, #2
 8001382:	f000 fd97 	bl	8001eb4 <CycleController>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <main+0xb8>
      setPattern(ID, color);
 800138c:	7dba      	ldrb	r2, [r7, #22]
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe78 	bl	8001088 <setPattern>
    }

    if(CycleController(CYCLE_SENSOR, cycle_basis, cycle_old)){
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	2001      	movs	r0, #1
 800139e:	f000 fd89 	bl	8001eb4 <CycleController>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d021      	beq.n	80013ec <main+0x10c>
      uint16_t lux = (uint16_t)VEML6030_getLux(SENS_ADDR_0);
 80013a8:	2090      	movs	r0, #144	@ 0x90
 80013aa:	f7ff fc09 	bl	8000bc0 <VEML6030_getLux>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b6:	ee17 3a90 	vmov	r3, s15
 80013ba:	817b      	strh	r3, [r7, #10]
      uint8_t data[8] = {};
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
      data[0] = COMMAND_ILLUMINANCE;
 80013c4:	2304      	movs	r3, #4
 80013c6:	703b      	strb	r3, [r7, #0]
      data[1] = lux & 0xFF;
 80013c8:	897b      	ldrh	r3, [r7, #10]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	707b      	strb	r3, [r7, #1]
      data[2] = lux >> 8;
 80013ce:	897b      	ldrh	r3, [r7, #10]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	70bb      	strb	r3, [r7, #2]
      HAL_UART_Transmit(&huart1, data, 8, 10);
 80013d8:	4639      	mov	r1, r7
 80013da:	230a      	movs	r3, #10
 80013dc:	2208      	movs	r2, #8
 80013de:	480e      	ldr	r0, [pc, #56]	@ (8001418 <main+0x138>)
 80013e0:	f004 f9c6 	bl	8005770 <HAL_UART_Transmit>
    }

    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 80013e4:	e002      	b.n	80013ec <main+0x10c>
      HAL_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fe34 	bl	8002054 <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 fd5f 	bl	8001eb4 <CycleController>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f1      	bne.n	80013e6 <main+0x106>
    }
    Uart_checkReset();
 8001402:	f7ff feb7 	bl	8001174 <Uart_checkReset>
    HAL_IWDG_Refresh(&hiwdg);
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <main+0x144>)
 8001408:	f002 fa20 	bl	800384c <HAL_IWDG_Refresh>
    ID = getID();
 800140c:	e7ae      	b.n	800136c <main+0x8c>
 800140e:	bf00      	nop
 8001410:	20000124 	.word	0x20000124
 8001414:	20000188 	.word	0x20000188
 8001418:	20000230 	.word	0x20000230
 800141c:	41a00000 	.word	0x41a00000
 8001420:	42480000 	.word	0x42480000
 8001424:	20000178 	.word	0x20000178

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b096      	sub	sp, #88	@ 0x58
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001432:	2228      	movs	r2, #40	@ 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fc44 	bl	8006cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800145c:	230b      	movs	r3, #11
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 8001466:	2307      	movs	r3, #7
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146e:	2310      	movs	r3, #16
 8001470:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8001480:	f44f 1330 	mov.w	r3, #2883584	@ 0x2c0000
 8001484:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800148a:	4618      	mov	r0, r3
 800148c:	f002 f9ee 	bl	800386c <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001496:	f000 fa03 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2302      	movs	r3, #2
 80014a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fa16 	bl	80048e8 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014c2:	f000 f9ed 	bl	80018a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80014c6:	2321      	movs	r3, #33	@ 0x21
 80014c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fc3f 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80014e0:	f000 f9de 	bl	80018a0 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3758      	adds	r7, #88	@ 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <MX_CAN_Init+0x60>)
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <MX_CAN_Init+0x64>)
 80014f4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_CAN_Init+0x60>)
 80014f8:	2210      	movs	r2, #16
 80014fa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <MX_CAN_Init+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_CAN_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_CAN_Init+0x60>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_CAN_Init+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <MX_CAN_Init+0x60>)
 8001516:	2200      	movs	r2, #0
 8001518:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_CAN_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_CAN_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_CAN_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <MX_CAN_Init+0x60>)
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_CAN_Init+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_CAN_Init+0x60>)
 800153a:	f000 fdaf 	bl	800209c <HAL_CAN_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001544:	f000 f9ac 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000fc 	.word	0x200000fc
 8001550:	40006400 	.word	0x40006400

08001554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <MX_I2C1_Init+0x74>)
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <MX_I2C1_Init+0x78>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001560:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <MX_I2C1_Init+0x7c>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_I2C1_Init+0x74>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158e:	480e      	ldr	r0, [pc, #56]	@ (80015c8 <MX_I2C1_Init+0x74>)
 8001590:	f001 fb74 	bl	8002c7c <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 f981 	bl	80018a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <MX_I2C1_Init+0x74>)
 80015a2:	f002 f86d 	bl	8003680 <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 f978 	bl	80018a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_I2C1_Init+0x74>)
 80015b4:	f002 f8af 	bl	8003716 <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 f96f 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000124 	.word	0x20000124
 80015cc:	40005400 	.word	0x40005400
 80015d0:	00101d7c 	.word	0x00101d7c

080015d4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_IWDG_Init+0x34>)
 80015da:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <MX_IWDG_Init+0x38>)
 80015dc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_IWDG_Init+0x34>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_IWDG_Init+0x34>)
 80015e6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015ea:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_IWDG_Init+0x34>)
 80015ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_IWDG_Init+0x34>)
 80015f6:	f002 f8da 	bl	80037ae <HAL_IWDG_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001600:	f000 f94e 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000178 	.word	0x20000178
 800160c:	40003000 	.word	0x40003000

08001610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <MX_SPI1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_SPI1_Init+0x74>)
 800161c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001624:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001628:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_SPI1_Init+0x74>)
 800162c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_SPI1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001648:	2210      	movs	r2, #16
 800164a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <MX_SPI1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_SPI1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001660:	2207      	movs	r2, #7
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_SPI1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_SPI1_Init+0x74>)
 8001672:	f003 fc97 	bl	8004fa4 <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800167c:	f000 f910 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000188 	.word	0x20000188
 8001688:	40013000 	.word	0x40013000

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 8001692:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <MX_USART1_UART_Init+0x60>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016ae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016d4:	f003 fffe 	bl	80056d4 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80016de:	f000 f8df 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000230 	.word	0x20000230
 80016ec:	40013800 	.word	0x40013800

080016f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_DMA_Init+0x38>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <MX_DMA_Init+0x38>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_DMA_Init+0x38>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200d      	movs	r0, #13
 8001714:	f000 feaf 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001718:	200d      	movs	r0, #13
 800171a:	f000 fec8 	bl	80024ae <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001748:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <MX_GPIO_Init+0x16c>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a4e      	ldr	r2, [pc, #312]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a48      	ldr	r2, [pc, #288]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <MX_GPIO_Init+0x16c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2102      	movs	r1, #2
 800178e:	4843      	ldr	r0, [pc, #268]	@ (800189c <MX_GPIO_Init+0x170>)
 8001790:	f001 fa44 	bl	8002c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin ID4_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ID4_Pin;
 8001794:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f001 f8ac 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLOR_Pin */
  GPIO_InitStruct.Pin = COLOR_Pin;
 80017b0:	2304      	movs	r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80017b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COLOR_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c8:	f001 f89e 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 80017cc:	2308      	movs	r3, #8
 80017ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e2:	f001 f891 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BTN1_Pin USER_BTN2_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin|USER_BTN2_Pin;
 80017e6:	2350      	movs	r3, #80	@ 0x50
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f001 f883 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001802:	2302      	movs	r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4820      	ldr	r0, [pc, #128]	@ (800189c <MX_GPIO_Init+0x170>)
 800181a:	f001 f875 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin|ID2_Pin;
 800181e:	2328      	movs	r3, #40	@ 0x28
 8001820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001822:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4619      	mov	r1, r3
 8001832:	481a      	ldr	r0, [pc, #104]	@ (800189c <MX_GPIO_Init+0x170>)
 8001834:	f001 f868 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ID8_Pin */
  GPIO_InitStruct.Pin = ID8_Pin;
 8001838:	2310      	movs	r3, #16
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ID8_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	4814      	ldr	r0, [pc, #80]	@ (800189c <MX_GPIO_Init+0x170>)
 800184c:	f001 f85c 	bl	8002908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2008      	movs	r0, #8
 8001856:	f000 fe0e 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800185a:	2008      	movs	r0, #8
 800185c:	f000 fe27 	bl	80024ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2009      	movs	r0, #9
 8001866:	f000 fe06 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800186a:	2009      	movs	r0, #9
 800186c:	f000 fe1f 	bl	80024ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	200a      	movs	r0, #10
 8001876:	f000 fdfe 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800187a:	200a      	movs	r0, #10
 800187c:	f000 fe17 	bl	80024ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2017      	movs	r0, #23
 8001886:	f000 fdf6 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800188a:	2017      	movs	r0, #23
 800188c:	f000 fe0f 	bl	80024ae <HAL_NVIC_EnableIRQ>

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <NeoPixel_Init+0x1c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200002b8 	.word	0x200002b8

080018cc <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB RGB_buf[]) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(sizeof(uint8_t), N * 24 + 1);
 80018d4:	2179      	movs	r1, #121	@ 0x79
 80018d6:	2001      	movs	r0, #1
 80018d8:	f005 f922 	bl	8006b20 <calloc>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf+1);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f832 	bl	8001950 <NeoPixel_Serialize>
  NeoPixel_Reset();
 80018ec:	f000 f814 	bl	8001918 <NeoPixel_Reset>
  HAL_Delay(10);
 80018f0:	200a      	movs	r0, #10
 80018f2:	f000 fbaf 	bl	8002054 <HAL_Delay>
  HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24);
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <NeoPixel_Send+0x48>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2278      	movs	r2, #120	@ 0x78
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fbf4 	bl	80050ec <HAL_SPI_Transmit_DMA>
  free(send_buf);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f005 f927 	bl	8006b58 <free>
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002b8 	.word	0x200002b8

08001918 <NeoPixel_Reset>:

void NeoPixel_Reset() {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	e009      	b.n	800193c <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <NeoPixel_Reset+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1cf9      	adds	r1, r7, #3
 800192e:	2201      	movs	r2, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fbdb 	bl	80050ec <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b63      	cmp	r3, #99	@ 0x63
 8001940:	ddf2      	ble.n	8001928 <NeoPixel_Reset+0x10>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200002b8 	.word	0x200002b8

08001950 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e090      	b.n	8001a82 <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	e086      	b.n	8001a74 <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f1c3 0307 	rsb	r3, r3, #7
 800197c:	fa42 f303 	asr.w	r3, r2, r3
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4413      	add	r3, r2
 800199e:	22f0      	movs	r2, #240	@ 0xf0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e00c      	b.n	80019be <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	461a      	mov	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	22c0      	movs	r2, #192	@ 0xc0
 80019bc:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f1c3 0307 	rsb	r3, r3, #7
 80019d4:	fa42 f303 	asr.w	r3, r2, r3
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	3308      	adds	r3, #8
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	22f0      	movs	r2, #240	@ 0xf0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e00c      	b.n	8001a16 <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	22c0      	movs	r2, #192	@ 0xc0
 8001a14:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f1c3 0307 	rsb	r3, r3, #7
 8001a2c:	fa42 f303 	asr.w	r3, r2, r3
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	3310      	adds	r3, #16
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	22f0      	movs	r2, #240	@ 0xf0
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e00c      	b.n	8001a6e <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	3310      	adds	r3, #16
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	22c0      	movs	r2, #192	@ 0xc0
 8001a6c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	f77f af75 	ble.w	8001966 <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	f77f af6b 	ble.w	8001960 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x44>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_MspInit+0x44>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MspInit+0x44>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <HAL_CAN_MspInit+0x80>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d129      	bne.n	8001b56 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_CAN_MspInit+0x84>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001b44:	2309      	movs	r3, #9
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b52:	f000 fed9 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40006400 	.word	0x40006400
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	@ 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_I2C_MspInit+0x7c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d127      	bne.n	8001bda <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23c0      	movs	r3, #192	@ 0xc0
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <HAL_I2C_MspInit+0x84>)
 8001bbe:	f000 fea3 	bl	8002908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_I2C_MspInit+0x80>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40005400 	.word	0x40005400
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000400 	.word	0x48000400

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb8 <HAL_SPI_MspInit+0xc8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d14e      	bne.n	8001cb0 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c12:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a23      	ldr	r2, [pc, #140]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_SPI_MspInit+0xcc>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c42:	23a0      	movs	r3, #160	@ 0xa0
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c52:	2305      	movs	r3, #5
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f000 fe52 	bl	8002908 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c66:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <HAL_SPI_MspInit+0xd4>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001c96:	f000 fc28 	bl	80024ea <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001ca0:	f7ff fdfe 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001ca8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <HAL_SPI_MspInit+0xd0>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	@ 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40013000 	.word	0x40013000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	200001ec 	.word	0x200001ec
 8001cc4:	40020030 	.word	0x40020030

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <HAL_UART_MspInit+0x90>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d131      	bne.n	8001d4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a15      	ldr	r2, [pc, #84]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_UART_MspInit+0x94>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3a:	f000 fde5 	bl	8002908 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2025      	movs	r0, #37	@ 0x25
 8001d44:	f000 fb97 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d48:	2025      	movs	r0, #37	@ 0x25
 8001d4a:	f000 fbb0 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40021000 	.word	0x40021000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 f92d 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and touch sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLOR_Pin);
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f000 ff42 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID1_Pin);
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f000 ff3b 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN1_Pin);
 8001dde:	2010      	movs	r0, #16
 8001de0:	f000 ff34 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <DMA1_Channel3_IRQHandler+0x10>)
 8001dee:	f000 fc99 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200001ec 	.word	0x200001ec

08001dfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID2_Pin);
 8001e00:	2020      	movs	r0, #32
 8001e02:	f000 ff23 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BTN2_Pin);
 8001e06:	2040      	movs	r0, #64	@ 0x40
 8001e08:	f000 ff20 	bl	8002c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <USART1_IRQHandler+0x10>)
 8001e16:	f003 fd79 	bl	800590c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000230 	.word	0x20000230

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f004 ff4e 	bl	8006cf4 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20003000 	.word	0x20003000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200002bc 	.word	0x200002bc
 8001e8c:	20000410 	.word	0x20000410

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <CycleController+0x2a>
    old[data] = HAL_GetTick();
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	18d4      	adds	r4, r2, r3
 8001ed6:	f000 f8b1 	bl	800203c <HAL_GetTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 8001ede:	f000 f8ad 	bl	800203c <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]
  if (current - (float)old[data] > basis[data]) {
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd07      	ble.n	8001f2a <CycleController+0x76>
    old[data] = current;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
    return 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <CycleController+0x78>
  } else {
    return 0;
 8001f2a:	2300      	movs	r3, #0
  }
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}

08001f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f38:	f7ff ffaa 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <LoopForever+0xe>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f54:	4c0a      	ldr	r4, [pc, #40]	@ (8001f80 <LoopForever+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f004 fecd 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f66:	f7ff f9bb 	bl	80012e0 <main>

08001f6a <LoopForever>:

LoopForever:
    b LoopForever
 8001f6a:	e7fe      	b.n	8001f6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001f78:	08007e38 	.word	0x08007e38
  ldr r2, =_sbss
 8001f7c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001f80:	2000040c 	.word	0x2000040c

08001f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>
	...

08001f88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_Init+0x28>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <HAL_Init+0x28>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 fa61 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fd78 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fa7d 	bl	80024d2 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 fa41 	bl	8002476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000058 	.word	0x20000058
 800200c:	20000060 	.word	0x20000060
 8002010:	2000005c 	.word	0x2000005c

08002014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000060 	.word	0x20000060
 8002038:	200002c0 	.word	0x200002c0

0800203c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200002c0 	.word	0x200002c0

08002054 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000060 	.word	0x20000060

0800209c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0ed      	b.n	800228a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fd10 	bl	8001ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d0:	f7ff ffb4 	bl	800203c <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020d6:	e012      	b.n	80020fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d8:	f7ff ffb0 	bl	800203c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d90b      	bls.n	80020fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0c5      	b.n	800228a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0e5      	beq.n	80020d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0202 	bic.w	r2, r2, #2
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff ff8e 	bl	800203c <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002122:	e012      	b.n	800214a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002124:	f7ff ff8a 	bl	800203c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d90b      	bls.n	800214a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e09f      	b.n	800228a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e5      	bne.n	8002124 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e007      	b.n	8002182 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e007      	b.n	80021ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e9b      	ldrb	r3, [r3, #26]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0220 	bic.w	r2, r2, #32
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7edb      	ldrb	r3, [r3, #27]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0210 	bic.w	r2, r2, #16
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e007      	b.n	8002200 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0210 	orr.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7f1b      	ldrb	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e007      	b.n	800222a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0208 	bic.w	r2, r2, #8
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0204 	orr.w	r2, r2, #4
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	ea42 0103 	orr.w	r1, r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	@ (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	@ (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	@ 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	@ 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023f4:	f3bf 8f4f 	dsb	sy
}
 80023f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <__NVIC_SystemReset+0x24>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002402:	4904      	ldr	r1, [pc, #16]	@ (8002414 <__NVIC_SystemReset+0x24>)
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_SystemReset+0x28>)
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800240a:	f3bf 8f4f 	dsb	sy
}
 800240e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <__NVIC_SystemReset+0x20>
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	05fa0004 	.word	0x05fa0004

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff78 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	@ (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff13 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff28 	bl	80022dc <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff78 	bl	8002388 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff47 	bl	8002334 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff1b 	bl	80022f8 <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80024ce:	f7ff ff8f 	bl	80023f0 <__NVIC_SystemReset>

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff9e 	bl	800241c <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e037      	b.n	8002570 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002516:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800251a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9b8 	bl	80028c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}  
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Start_IT+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e04a      	b.n	800262e <HAL_DMA_Start_IT+0xb6>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d13a      	bne.n	8002620 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f94b 	bl	800286a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 020e 	orr.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e00f      	b.n	800260e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 020a 	orr.w	r2, r2, #10
 80025fc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0204 	bic.w	r2, r2, #4
 800260c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e005      	b.n	800262c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800262c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002644:	2b02      	cmp	r3, #2
 8002646:	d008      	beq.n	800265a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e020      	b.n	800269c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 020e 	bic.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d005      	beq.n	80026ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2204      	movs	r2, #4
 80026c2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e027      	b.n	800271a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020e 	bic.w	r2, r2, #14
 80026d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
    } 
  }
  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d024      	beq.n	8002796 <HAL_DMA_IRQHandler+0x72>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01f      	beq.n	8002796 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	2104      	movs	r1, #4
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d06a      	beq.n	8002862 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002794:	e065      	b.n	8002862 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2202      	movs	r2, #2
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d02c      	beq.n	8002800 <HAL_DMA_IRQHandler+0xdc>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d027      	beq.n	8002800 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 020a 	bic.w	r2, r2, #10
 80027cc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	2102      	movs	r1, #2
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d035      	beq.n	8002862 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80027fe:	e030      	b.n	8002862 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d028      	beq.n	8002862 <HAL_DMA_IRQHandler+0x13e>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 020e 	bic.w	r2, r2, #14
 8002828:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    }
  }
}  
 8002860:	e7ff      	b.n	8002862 <HAL_DMA_IRQHandler+0x13e>
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d108      	bne.n	80028aa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a8:	e007      	b.n	80028ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	60da      	str	r2, [r3, #12]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <DMA_CalcBaseAndBitshift+0x34>)
 80028d8:	4413      	add	r3, r2
 80028da:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <DMA_CalcBaseAndBitshift+0x38>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	009a      	lsls	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a06      	ldr	r2, [pc, #24]	@ (8002904 <DMA_CalcBaseAndBitshift+0x3c>)
 80028ec:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	bffdfff8 	.word	0xbffdfff8
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002916:	e14e      	b.n	8002bb6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8140 	beq.w	8002bb0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d005      	beq.n	8002948 <HAL_GPIO_Init+0x40>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d130      	bne.n	80029aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297e:	2201      	movs	r2, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 0201 	and.w	r2, r3, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d017      	beq.n	80029e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d123      	bne.n	8002a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	6939      	ldr	r1, [r7, #16]
 8002a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 809a 	beq.w	8002bb0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7c:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <HAL_GPIO_Init+0x2cc>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a54      	ldr	r2, [pc, #336]	@ (8002bd4 <HAL_GPIO_Init+0x2cc>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <HAL_GPIO_Init+0x2cc>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a94:	4a50      	ldr	r2, [pc, #320]	@ (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002abe:	d013      	beq.n	8002ae8 <HAL_GPIO_Init+0x1e0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a46      	ldr	r2, [pc, #280]	@ (8002bdc <HAL_GPIO_Init+0x2d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_GPIO_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a45      	ldr	r2, [pc, #276]	@ (8002be0 <HAL_GPIO_Init+0x2d8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <HAL_GPIO_Init+0x1d8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a44      	ldr	r2, [pc, #272]	@ (8002be4 <HAL_GPIO_Init+0x2dc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_GPIO_Init+0x1d4>
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x1e2>
 8002adc:	2305      	movs	r3, #5
 8002ade:	e004      	b.n	8002aea <HAL_GPIO_Init+0x1e2>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x1e2>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_GPIO_Init+0x1e2>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	f002 0203 	and.w	r2, r2, #3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4093      	lsls	r3, r2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002afa:	4937      	ldr	r1, [pc, #220]	@ (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b08:	4b37      	ldr	r3, [pc, #220]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b56:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b5c:	4b22      	ldr	r3, [pc, #136]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b80:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002baa:	4a0f      	ldr	r2, [pc, #60]	@ (8002be8 <HAL_GPIO_Init+0x2e0>)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f aea9 	bne.w	8002918 <HAL_GPIO_Init+0x10>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	48000800 	.word	0x48000800
 8002be4:	48000c00 	.word	0x48000c00
 8002be8:	40010400 	.word	0x40010400

08002bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e001      	b.n	8002c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c62:	4a05      	ldr	r2, [pc, #20]	@ (8002c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f8fa 	bl	8000e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e081      	b.n	8002d92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe ff60 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ccc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e006      	b.n	8002d04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d104      	bne.n	8002d16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	817b      	strh	r3, [r7, #10]
 8002dac:	4613      	mov	r3, r2
 8002dae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 80da 	bne.w	8002f72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2C_Master_Transmit+0x30>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0d3      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f932 	bl	800203c <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2319      	movs	r3, #25
 8002de0:	2201      	movs	r2, #1
 8002de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa5e 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0be      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	@ 0x21
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2210      	movs	r2, #16
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2bff      	cmp	r3, #255	@ 0xff
 8002e26:	d90e      	bls.n	8002e46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	22ff      	movs	r2, #255	@ 0xff
 8002e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	4b51      	ldr	r3, [pc, #324]	@ (8002f7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fbec 	bl	800361c <I2C_TransferConfig>
 8002e44:	e06c      	b.n	8002f20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	4b48      	ldr	r3, [pc, #288]	@ (8002f7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fbdb 	bl	800361c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e66:	e05b      	b.n	8002f20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6a39      	ldr	r1, [r7, #32]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa6a 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e07b      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d034      	beq.n	8002f20 <HAL_I2C_Master_Transmit+0x184>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d130      	bne.n	8002f20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2180      	movs	r1, #128	@ 0x80
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9ed 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e04d      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2bff      	cmp	r3, #255	@ 0xff
 8002ee0:	d90e      	bls.n	8002f00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	22ff      	movs	r2, #255	@ 0xff
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fb8f 	bl	800361c <I2C_TransferConfig>
 8002efe:	e00f      	b.n	8002f20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb7e 	bl	800361c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d19e      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa50 	bl	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e01a      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	80002000 	.word	0x80002000
 8002f80:	fe00e800 	.word	0xfe00e800

08002f84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	460b      	mov	r3, r1
 8002f98:	813b      	strh	r3, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	f040 80fd 	bne.w	80031a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x34>
 8002fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0f1      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x4e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0ea      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fda:	f7ff f82f 	bl	800203c <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2319      	movs	r3, #25
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f95b 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d5      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2222      	movs	r2, #34	@ 0x22
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2240      	movs	r2, #64	@ 0x40
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800301c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003024:	88f8      	ldrh	r0, [r7, #6]
 8003026:	893a      	ldrh	r2, [r7, #8]
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4603      	mov	r3, r0
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f8bf 	bl	80031b8 <I2C_RequestMemoryRead>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ad      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2bff      	cmp	r3, #255	@ 0xff
 8003054:	d90e      	bls.n	8003074 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	@ 0xff
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	4b52      	ldr	r3, [pc, #328]	@ (80031b0 <HAL_I2C_Mem_Read+0x22c>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fad5 	bl	800361c <I2C_TransferConfig>
 8003072:	e00f      	b.n	8003094 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	b2da      	uxtb	r2, r3
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_I2C_Mem_Read+0x22c>)
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fac4 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309a:	2200      	movs	r2, #0
 800309c:	2104      	movs	r1, #4
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f902 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07c      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d034      	beq.n	8003154 <HAL_I2C_Mem_Read+0x1d0>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d130      	bne.n	8003154 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	@ 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f8d3 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04d      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	@ 0xff
 8003114:	d90e      	bls.n	8003134 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	@ 0xff
 800311a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	2300      	movs	r3, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fa75 	bl	800361c <I2C_TransferConfig>
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa64 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d19a      	bne.n	8003094 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f936 	bl	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e01a      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_I2C_Mem_Read+0x230>)
 8003186:	400b      	ands	r3, r1
 8003188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	80002400 	.word	0x80002400
 80031b4:	fe00e800 	.word	0xfe00e800

080031b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <I2C_RequestMemoryRead+0xa4>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa1c 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	69b9      	ldr	r1, [r7, #24]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f8ac 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e02c      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031fe:	893b      	ldrh	r3, [r7, #8]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
 8003208:	e015      	b.n	8003236 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800320a:	893b      	ldrh	r3, [r7, #8]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	b29b      	uxth	r3, r3
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f892 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e012      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	@ 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f831 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	80002000 	.word	0x80002000

08003260 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d103      	bne.n	800327e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	619a      	str	r2, [r3, #24]
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b8:	e031      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d02d      	beq.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe febb 	bl	800203c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d122      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d113      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d0be      	beq.n	80032ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003352:	e033      	b.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f87f 	bl	800345c <I2C_IsErrorOccurred>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e031      	b.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d025      	beq.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe fe64 	bl	800203c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11a      	bne.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d013      	beq.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e007      	b.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d1c4      	bne.n	8003354 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e0:	e02f      	b.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f838 	bl	800345c <I2C_IsErrorOccurred>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e02d      	b.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fe21 	bl	800203c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11a      	bne.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d013      	beq.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d1c8      	bne.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d068      	beq.n	800355a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003490:	e049      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d045      	beq.n	8003526 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fdcf 	bl	800203c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_IsErrorOccurred+0x54>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d13a      	bne.n	8003526 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d2:	d121      	bne.n	8003518 <I2C_IsErrorOccurred+0xbc>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034da:	d01d      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d01a      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f2:	f7fe fda3 	bl	800203c <HAL_GetTick>
 80034f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f8:	e00e      	b.n	8003518 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fa:	f7fe fd9f 	bl	800203c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b19      	cmp	r3, #25
 8003506:	d907      	bls.n	8003518 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003516:	e006      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d1e9      	bne.n	80034fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d003      	beq.n	800353c <I2C_IsErrorOccurred+0xe0>
 8003534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0aa      	beq.n	8003492 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800357c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800359e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fe45 	bl	8003260 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <I2C_IsErrorOccurred+0x1bc>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800360a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	@ 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003634:	7a7b      	ldrb	r3, [r7, #9]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	4313      	orrs	r3, r2
 8003646:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800364a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <I2C_TransferConfig+0x60>)
 800365c:	430b      	orrs	r3, r1
 800365e:	43db      	mvns	r3, r3
 8003660:	ea02 0103 	and.w	r1, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	03ff63ff 	.word	0x03ff63ff

08003680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d138      	bne.n	8003708 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e032      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	@ 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d139      	bne.n	80037a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003736:	2302      	movs	r3, #2
 8003738:	e033      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	@ 0x24
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003768:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e041      	b.n	8003844 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80037c8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f245 5255 	movw	r2, #21845	@ 0x5555
 80037d2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6852      	ldr	r2, [r2, #4]
 80037dc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80037e8:	f7fe fc28 	bl	800203c <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80037ee:	e00f      	b.n	8003810 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80037f0:	f7fe fc24 	bl	800203c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b27      	cmp	r3, #39	@ 0x27
 80037fc:	d908      	bls.n	8003810 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e019      	b.n	8003844 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e8      	bne.n	80037f0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d005      	beq.n	8003838 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e004      	b.n	8003842 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800385c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003872:	af00      	add	r7, sp, #0
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f001 b823 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 817d 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038a8:	4bbc      	ldr	r3, [pc, #752]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d00c      	beq.n	80038ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b4:	4bb9      	ldr	r3, [pc, #740]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d15c      	bne.n	800397a <HAL_RCC_OscConfig+0x10e>
 80038c0:	4bb6      	ldr	r3, [pc, #728]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d155      	bne.n	800397a <HAL_RCC_OscConfig+0x10e>
 80038ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0x94>
 80038fa:	4ba8      	ldr	r3, [pc, #672]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e015      	b.n	800392c <HAL_RCC_OscConfig+0xc0>
 8003900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003904:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003914:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003918:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800391c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003928:	4b9c      	ldr	r3, [pc, #624]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003930:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003934:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003940:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f002 021f 	and.w	r2, r2, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 811f 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x334>
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8116 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f000 bfaf 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x12e>
 800398c:	4b83      	ldr	r3, [pc, #524]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a82      	ldr	r2, [pc, #520]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e036      	b.n	8003a08 <HAL_RCC_OscConfig+0x19c>
 800399a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x158>
 80039aa:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7b      	ldr	r2, [pc, #492]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a78      	ldr	r2, [pc, #480]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e021      	b.n	8003a08 <HAL_RCC_OscConfig+0x19c>
 80039c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x184>
 80039d6:	4b71      	ldr	r3, [pc, #452]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a70      	ldr	r2, [pc, #448]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0x19c>
 80039f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a69      	ldr	r2, [pc, #420]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b67      	ldr	r3, [pc, #412]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a66      	ldr	r2, [pc, #408]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	f023 020f 	bic.w	r2, r3, #15
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	495f      	ldr	r1, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d059      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fe fb03 	bl	800203c <HAL_GetTick>
 8003a36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fafe 	bl	800203c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	@ 0x64
 8003a4a:	d902      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f000 bf43 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 8003a52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a56:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003a66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_OscConfig+0x218>
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e015      	b.n	8003ab0 <HAL_RCC_OscConfig+0x244>
 8003a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a88:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003aa0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003aac:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ab4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003ab8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003abc:	fa92 f2a2 	rbit	r2, r2
 8003ac0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003ac4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	f042 0220 	orr.w	r2, r2, #32
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f002 021f 	and.w	r2, r2, #31
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ab      	beq.n	8003a3c <HAL_RCC_OscConfig+0x1d0>
 8003ae4:	e05d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe faa9 	bl	800203c <HAL_GetTick>
 8003aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fe faa4 	bl	800203c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	@ 0x64
 8003afe:	d902      	bls.n	8003b06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	f000 bee9 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 8003b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b0a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003b1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2cc>
 8003b32:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_OscConfig+0x2f8>
 8003b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b50:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003b54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003b60:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <HAL_RCC_OscConfig+0x330>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b68:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003b6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003b78:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003b7c:	fab2 f282 	clz	r2, r2
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	f042 0220 	orr.w	r2, r2, #32
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	f002 021f 	and.w	r2, r2, #31
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ab      	bne.n	8003af0 <HAL_RCC_OscConfig+0x284>
 8003b98:	e003      	b.n	8003ba2 <HAL_RCC_OscConfig+0x336>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 817d 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bb8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d172      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x44a>
 8003bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d16c      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x44a>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003bee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x3a0>
 8003c06:	4b93      	ldr	r3, [pc, #588]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e013      	b.n	8003c34 <HAL_RCC_OscConfig+0x3c8>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003c30:	4b88      	ldr	r3, [pc, #544]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	2202      	movs	r2, #2
 8003c36:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003c3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003c3e:	fa92 f2a2 	rbit	r2, r2
 8003c42:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003c46:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCC_OscConfig+0x410>
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f000 be2e 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	21f8      	movs	r1, #248	@ 0xf8
 8003c92:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003c9a:	fa91 f1a1 	rbit	r1, r1
 8003c9e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003ca2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003ca6:	fab1 f181 	clz	r1, r1
 8003caa:	b2c9      	uxtb	r1, r1
 8003cac:	408b      	lsls	r3, r1
 8003cae:	4969      	ldr	r1, [pc, #420]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb4:	e0fd      	b.n	8003eb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8088 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x56c>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003cda:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ce8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f9a2 	bl	800203c <HAL_GetTick>
 8003cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe f99d 	bl	800203c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f000 bde2 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003d26:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4d8>
 8003d3e:	4b45      	ldr	r3, [pc, #276]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e013      	b.n	8003d6c <HAL_RCC_OscConfig+0x500>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003d56:	2302      	movs	r3, #2
 8003d58:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003d5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003d68:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003d72:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003d7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f042 0220 	orr.w	r2, r2, #32
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f002 021f 	and.w	r2, r2, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f202 	lsl.w	r2, r1, r2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0af      	beq.n	8003cfe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	21f8      	movs	r1, #248	@ 0xf8
 8003db4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003dbc:	fa91 f1a1 	rbit	r1, r1
 8003dc0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003dc4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003dc8:	fab1 f181 	clz	r1, r1
 8003dcc:	b2c9      	uxtb	r1, r1
 8003dce:	408b      	lsls	r3, r1
 8003dd0:	4920      	ldr	r1, [pc, #128]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
 8003dd6:	e06c      	b.n	8003eb2 <HAL_RCC_OscConfig+0x646>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003df8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2300      	movs	r3, #0
 8003e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe f91a 	bl	800203c <HAL_GetTick>
 8003e08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fe f915 	bl	800203c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	f000 bd5a 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d104      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5ec>
 8003e4e:	4b01      	ldr	r3, [pc, #4]	@ (8003e54 <HAL_RCC_OscConfig+0x5e8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	e015      	b.n	8003e80 <HAL_RCC_OscConfig+0x614>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003e70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003e7c:	4bc8      	ldr	r3, [pc, #800]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	2202      	movs	r2, #2
 8003e82:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003e86:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003e8a:	fa92 f2a2 	rbit	r2, r2
 8003e8e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003e92:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003e96:	fab2 f282 	clz	r2, r2
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f042 0220 	orr.w	r2, r2, #32
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	f002 021f 	and.w	r2, r2, #31
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ad      	bne.n	8003e0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8110 	beq.w	80040e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d079      	beq.n	8003fcc <HAL_RCC_OscConfig+0x760>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4bab      	ldr	r3, [pc, #684]	@ (80041a4 <HAL_RCC_OscConfig+0x938>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	461a      	mov	r2, r3
 8003efe:	2301      	movs	r3, #1
 8003f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe f89b 	bl	800203c <HAL_GetTick>
 8003f06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe f896 	bl	800203c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	f000 bcdb 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 8003f22:	2302      	movs	r3, #2
 8003f24:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f60:	2202      	movs	r2, #2
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7c:	4b88      	ldr	r3, [pc, #544]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8003f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f88:	2102      	movs	r1, #2
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f1a3 	rbit	r1, r3
 8003f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fa2:	6019      	str	r1, [r3, #0]
  return result;
 8003fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0a0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x6a0>
 8003fca:	e08d      	b.n	80040e8 <HAL_RCC_OscConfig+0x87c>
 8003fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fdc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f2a3 	rbit	r2, r3
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003fee:	601a      	str	r2, [r3, #0]
  return result;
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ff8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	4b68      	ldr	r3, [pc, #416]	@ (80041a4 <HAL_RCC_OscConfig+0x938>)
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fe f815 	bl	800203c <HAL_GetTick>
 8004012:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004016:	e00a      	b.n	800402e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004018:	f7fe f810 	bl	800203c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d902      	bls.n	800402e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f000 bc55 	b.w	80048d8 <HAL_RCC_OscConfig+0x106c>
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004036:	2202      	movs	r2, #2
 8004038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004056:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004062:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	fa93 f2a3 	rbit	r2, r3
 800406c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004070:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800407e:	2202      	movs	r2, #2
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004086:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004098:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 800409c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040a6:	2102      	movs	r1, #2
 80040a8:	6019      	str	r1, [r3, #0]
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	fa93 f1a3 	rbit	r1, r3
 80040b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040c0:	6019      	str	r1, [r3, #0]
  return result;
 80040c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d197      	bne.n	8004018 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 81a1 	beq.w	8004440 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004104:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004132:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004136:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_RCC_OscConfig+0x93c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11a      	bne.n	8004180 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414a:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <HAL_RCC_OscConfig+0x93c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_RCC_OscConfig+0x93c>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004154:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004156:	f7fd ff71 	bl	800203c <HAL_GetTick>
 800415a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	e009      	b.n	8004174 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd ff6c 	bl	800203c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b64      	cmp	r3, #100	@ 0x64
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e3b1      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <HAL_RCC_OscConfig+0x93c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ef      	beq.n	8004160 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10d      	bne.n	80041ac <HAL_RCC_OscConfig+0x940>
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4a02      	ldr	r2, [pc, #8]	@ (80041a0 <HAL_RCC_OscConfig+0x934>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6213      	str	r3, [r2, #32]
 800419c:	e03c      	b.n	8004218 <HAL_RCC_OscConfig+0x9ac>
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	10908120 	.word	0x10908120
 80041a8:	40007000 	.word	0x40007000
 80041ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCC_OscConfig+0x96a>
 80041bc:	4bc1      	ldr	r3, [pc, #772]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4ac0      	ldr	r2, [pc, #768]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6213      	str	r3, [r2, #32]
 80041c8:	4bbe      	ldr	r3, [pc, #760]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4abd      	ldr	r2, [pc, #756]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6213      	str	r3, [r2, #32]
 80041d4:	e020      	b.n	8004218 <HAL_RCC_OscConfig+0x9ac>
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x994>
 80041e6:	4bb7      	ldr	r3, [pc, #732]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4ab6      	ldr	r2, [pc, #728]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6213      	str	r3, [r2, #32]
 80041f2:	4bb4      	ldr	r3, [pc, #720]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4ab3      	ldr	r2, [pc, #716]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0x9ac>
 8004200:	4bb0      	ldr	r3, [pc, #704]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4aaf      	ldr	r2, [pc, #700]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6213      	str	r3, [r2, #32]
 800420c:	4bad      	ldr	r3, [pc, #692]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4aac      	ldr	r2, [pc, #688]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8081 	beq.w	800432c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422a:	f7fd ff07 	bl	800203c <HAL_GetTick>
 800422e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7fd ff02 	bl	800203c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e345      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
 800424c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004250:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004254:	2202      	movs	r2, #2
 8004256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fa93 f2a3 	rbit	r2, r3
 8004266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004278:	2202      	movs	r2, #2
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004280:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	fa93 f2a3 	rbit	r2, r3
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004292:	601a      	str	r2, [r3, #0]
  return result;
 8004294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004298:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800429c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_OscConfig+0xa4c>
 80042b2:	4b84      	ldr	r3, [pc, #528]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	e013      	b.n	80042e0 <HAL_RCC_OscConfig+0xa74>
 80042b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	fa93 f2a3 	rbit	r2, r3
 80042d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	4b79      	ldr	r3, [pc, #484]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80042e8:	2102      	movs	r1, #2
 80042ea:	6011      	str	r1, [r2, #0]
 80042ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	fa92 f1a2 	rbit	r1, r2
 80042fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004302:	6011      	str	r1, [r2, #0]
  return result;
 8004304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004308:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	fab2 f282 	clz	r2, r2
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	f002 021f 	and.w	r2, r2, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d084      	beq.n	8004234 <HAL_RCC_OscConfig+0x9c8>
 800432a:	e07f      	b.n	800442c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432c:	f7fd fe86 	bl	800203c <HAL_GetTick>
 8004330:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	e00b      	b.n	800434e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fd fe81 	bl	800203c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e2c4      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
 800434e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004352:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004356:	2202      	movs	r2, #2
 8004358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	fa93 f2a3 	rbit	r2, r3
 8004368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800437a:	2202      	movs	r2, #2
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	fa93 f2a3 	rbit	r2, r3
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004394:	601a      	str	r2, [r3, #0]
  return result;
 8004396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800439e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f043 0302 	orr.w	r3, r3, #2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d102      	bne.n	80043ba <HAL_RCC_OscConfig+0xb4e>
 80043b4:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	e013      	b.n	80043e2 <HAL_RCC_OscConfig+0xb76>
 80043ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043c2:	2202      	movs	r2, #2
 80043c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	4b39      	ldr	r3, [pc, #228]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80043ea:	2102      	movs	r1, #2
 80043ec:	6011      	str	r1, [r2, #0]
 80043ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	fa92 f1a2 	rbit	r1, r2
 80043fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004400:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004404:	6011      	str	r1, [r2, #0]
  return result;
 8004406:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800440a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	f002 021f 	and.w	r2, r2, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f202 	lsl.w	r2, r1, r2
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d184      	bne.n	8004336 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800442c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004434:	4b23      	ldr	r3, [pc, #140]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4a22      	ldr	r2, [pc, #136]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8242 	beq.w	80048d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <HAL_RCC_OscConfig+0xc58>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	f000 8213 	beq.w	8004886 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b02      	cmp	r3, #2
 800446e:	f040 8162 	bne.w	8004736 <HAL_RCC_OscConfig+0xeca>
 8004472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004476:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800447a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800447e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004484:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	fa93 f2a3 	rbit	r2, r3
 800448e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004492:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004496:	601a      	str	r2, [r3, #0]
  return result;
 8004498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fdc0 	bl	800203c <HAL_GetTick>
 80044bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	e00c      	b.n	80044dc <HAL_RCC_OscConfig+0xc70>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fd fdb8 	bl	800203c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1fd      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
 80044dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	fa93 f2a3 	rbit	r2, r3
 80044f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004500:	601a      	str	r2, [r3, #0]
  return result;
 8004502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004506:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800450a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	fab3 f383 	clz	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_RCC_OscConfig+0xcba>
 8004520:	4bb0      	ldr	r3, [pc, #704]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	e027      	b.n	8004576 <HAL_RCC_OscConfig+0xd0a>
 8004526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800452e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004538:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004546:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004550:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	fa93 f2a3 	rbit	r2, r3
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	4b9c      	ldr	r3, [pc, #624]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800457a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800457e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004582:	6011      	str	r1, [r2, #0]
 8004584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004588:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	fa92 f1a2 	rbit	r1, r2
 8004592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004596:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800459a:	6011      	str	r1, [r2, #0]
  return result;
 800459c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045a0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	fab2 f282 	clz	r2, r2
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	f042 0220 	orr.w	r2, r2, #32
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	f002 021f 	and.w	r2, r2, #31
 80045b6:	2101      	movs	r1, #1
 80045b8:	fa01 f202 	lsl.w	r2, r1, r2
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d182      	bne.n	80044c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c2:	4b88      	ldr	r3, [pc, #544]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	430b      	orrs	r3, r1
 80045e4:	497f      	ldr	r1, [pc, #508]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
 80045ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80045f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800460e:	601a      	str	r2, [r3, #0]
  return result;
 8004610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004614:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004618:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004624:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	2301      	movs	r3, #1
 800462e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fd fd04 	bl	800203c <HAL_GetTick>
 8004634:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004638:	e009      	b.n	800464e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fcff 	bl	800203c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e144      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
 800464e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004652:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004656:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800465a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004660:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	fa93 f2a3 	rbit	r2, r3
 800466a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004672:	601a      	str	r2, [r3, #0]
  return result;
 8004674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004678:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800467c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_RCC_OscConfig+0xe2c>
 8004692:	4b54      	ldr	r3, [pc, #336]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e027      	b.n	80046e8 <HAL_RCC_OscConfig+0xe7c>
 8004698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	fa93 f2a3 	rbit	r2, r3
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	fa93 f2a3 	rbit	r2, r3
 80046da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80046f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046fa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	fa92 f1a2 	rbit	r1, r2
 8004704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004708:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800470c:	6011      	str	r1, [r2, #0]
  return result;
 800470e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004712:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	fab2 f282 	clz	r2, r2
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	f042 0220 	orr.w	r2, r2, #32
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	f002 021f 	and.w	r2, r2, #31
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f202 	lsl.w	r2, r1, r2
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d082      	beq.n	800463a <HAL_RCC_OscConfig+0xdce>
 8004734:	e0cf      	b.n	80048d6 <HAL_RCC_OscConfig+0x106a>
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800473e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004748:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	fa93 f2a3 	rbit	r2, r3
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800475a:	601a      	str	r2, [r3, #0]
  return result;
 800475c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004760:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004764:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004770:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd fc5e 	bl	800203c <HAL_GetTick>
 8004780:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004784:	e009      	b.n	800479a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd fc59 	bl	800203c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e09e      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
 800479a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047be:	601a      	str	r2, [r3, #0]
  return result;
 80047c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d104      	bne.n	80047e8 <HAL_RCC_OscConfig+0xf7c>
 80047de:	4b01      	ldr	r3, [pc, #4]	@ (80047e4 <HAL_RCC_OscConfig+0xf78>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	e029      	b.n	8004838 <HAL_RCC_OscConfig+0xfcc>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80047f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	fa93 f2a3 	rbit	r2, r3
 8004804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004808:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004812:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004816:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004820:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	fa93 f2a3 	rbit	r2, r3
 800482a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <HAL_RCC_OscConfig+0x1078>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800483c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004840:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800484a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	fa92 f1a2 	rbit	r1, r2
 8004854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004858:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800485c:	6011      	str	r1, [r2, #0]
  return result;
 800485e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004862:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	fab2 f282 	clz	r2, r2
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f002 021f 	and.w	r2, r2, #31
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d180      	bne.n	8004786 <HAL_RCC_OscConfig+0xf1a>
 8004884:	e027      	b.n	80048d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e01e      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800489a:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <HAL_RCC_OscConfig+0x1078>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80048a6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d10b      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80048be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000

080048e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b09e      	sub	sp, #120	@ 0x78
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e162      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b90      	ldr	r3, [pc, #576]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d910      	bls.n	8004930 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 0207 	bic.w	r2, r3, #7
 8004916:	498b      	ldr	r1, [pc, #556]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b89      	ldr	r3, [pc, #548]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e14a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b82      	ldr	r3, [pc, #520]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	497f      	ldr	r1, [pc, #508]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80dc 	beq.w	8004b14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d13c      	bne.n	80049de <HAL_RCC_ClockConfig+0xf6>
 8004964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004968:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d102      	bne.n	800498e <HAL_RCC_ClockConfig+0xa6>
 8004988:	4b6f      	ldr	r3, [pc, #444]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e00f      	b.n	80049ae <HAL_RCC_ClockConfig+0xc6>
 800498e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	667b      	str	r3, [r7, #100]	@ 0x64
 800499c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049aa:	4b67      	ldr	r3, [pc, #412]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80049bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f042 0220 	orr.w	r2, r2, #32
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f002 021f 	and.w	r2, r2, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f202 	lsl.w	r2, r1, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d17b      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0f3      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d13c      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x178>
 80049e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80049f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d102      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x128>
 8004a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCC_ClockConfig+0x148>
 8004a10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2c:	4b46      	ldr	r3, [pc, #280]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a34:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a38:	fa92 f2a2 	rbit	r2, r2
 8004a3c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a40:	fab2 f282 	clz	r2, r2
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	f042 0220 	orr.w	r2, r2, #32
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	f002 021f 	and.w	r2, r2, #31
 8004a50:	2101      	movs	r1, #1
 8004a52:	fa01 f202 	lsl.w	r2, r1, r2
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13a      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0b2      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
 8004a60:	2302      	movs	r3, #2
 8004a62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x1a0>
 8004a82:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	e00d      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x1bc>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	4b29      	ldr	r3, [pc, #164]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	61ba      	str	r2, [r7, #24]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	617a      	str	r2, [r7, #20]
  return result;
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f042 0220 	orr.w	r2, r2, #32
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f002 021f 	and.w	r2, r2, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e079      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	491a      	ldr	r1, [pc, #104]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd faaa 	bl	800203c <HAL_GetTick>
 8004ae8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fd faa6 	bl	800203c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e061      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_RCC_ClockConfig+0x260>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d214      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0207 	bic.w	r2, r3, #7
 8004b2a:	4906      	ldr	r1, [pc, #24]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <HAL_RCC_ClockConfig+0x25c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e040      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x2de>
 8004b44:	40022000 	.word	0x40022000
 8004b48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	491a      	ldr	r1, [pc, #104]	@ (8004bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b16      	ldr	r3, [pc, #88]	@ (8004bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4912      	ldr	r1, [pc, #72]	@ (8004bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b8a:	f000 f829 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4601      	mov	r1, r0
 8004b90:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b98:	22f0      	movs	r2, #240	@ 0xf0
 8004b9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	fa92 f2a2 	rbit	r2, r2
 8004ba2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	fab2 f282 	clz	r2, r2
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	40d3      	lsrs	r3, r2
 8004bae:	4a09      	ldr	r2, [pc, #36]	@ (8004bd4 <HAL_RCC_ClockConfig+0x2ec>)
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bb6:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <HAL_RCC_ClockConfig+0x2f0>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bba:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <HAL_RCC_ClockConfig+0x2f4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd f9f8 	bl	8001fb4 <HAL_InitTick>
  
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3778      	adds	r7, #120	@ 0x78
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	08007dc8 	.word	0x08007dc8
 8004bd8:	20000058 	.word	0x20000058
 8004bdc:	2000005c 	.word	0x2000005c

08004be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b08b      	sub	sp, #44	@ 0x2c
 8004be4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004bfa:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d002      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x30>
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x36>
 8004c0e:	e03c      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c10:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c12:	623b      	str	r3, [r7, #32]
      break;
 8004c14:	e03c      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004c1c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004c20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	fa92 f2a2 	rbit	r2, r2
 8004c28:	607a      	str	r2, [r7, #4]
  return result;
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	fab2 f282 	clz	r2, r2
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	40d3      	lsrs	r3, r2
 8004c34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	220f      	movs	r2, #15
 8004c44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	fa92 f2a2 	rbit	r2, r2
 8004c4c:	60fa      	str	r2, [r7, #12]
  return result;
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fab2 f282 	clz	r2, r2
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	40d3      	lsrs	r3, r2
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c78:	e004      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	623b      	str	r3, [r7, #32]
      break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c8c:	623b      	str	r3, [r7, #32]
      break;
 8004c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	372c      	adds	r7, #44	@ 0x2c
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	01e84800 	.word	0x01e84800
 8004ca8:	08007de0 	.word	0x08007de0
 8004cac:	08007df0 	.word	0x08007df0
 8004cb0:	003d0900 	.word	0x003d0900
 8004cb4:	007a1200 	.word	0x007a1200

08004cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000058 	.word	0x20000058

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cd6:	f7ff ffef 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004cda:	4601      	mov	r1, r0
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ce8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	fa92 f2a2 	rbit	r2, r2
 8004cf0:	603a      	str	r2, [r7, #0]
  return result;
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	fab2 f282 	clz	r2, r2
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	40d3      	lsrs	r3, r2
 8004cfc:	4a04      	ldr	r2, [pc, #16]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004cfe:	5cd3      	ldrb	r3, [r2, r3]
 8004d00:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08007dd8 	.word	0x08007dd8

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d1a:	f7ff ffcd 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d28:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	fa92 f2a2 	rbit	r2, r2
 8004d34:	603a      	str	r2, [r7, #0]
  return result;
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	fab2 f282 	clz	r2, r2
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	40d3      	lsrs	r3, r2
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	08007dd8 	.word	0x08007dd8

08004d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b092      	sub	sp, #72	@ 0x48
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80cd 	beq.w	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7c:	4b86      	ldr	r3, [pc, #536]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10e      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d88:	4b83      	ldr	r3, [pc, #524]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4a82      	ldr	r2, [pc, #520]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	61d3      	str	r3, [r2, #28]
 8004d94:	4b80      	ldr	r3, [pc, #512]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da6:	4b7d      	ldr	r3, [pc, #500]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d118      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db2:	4b7a      	ldr	r3, [pc, #488]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a79      	ldr	r2, [pc, #484]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbe:	f7fd f93d 	bl	800203c <HAL_GetTick>
 8004dc2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc6:	f7fd f939 	bl	800203c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b64      	cmp	r3, #100	@ 0x64
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0db      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd8:	4b70      	ldr	r3, [pc, #448]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d07d      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d076      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e02:	4b65      	ldr	r3, [pc, #404]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e10:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1c:	fab3 f383 	clz	r3, r3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b5e      	ldr	r3, [pc, #376]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b55      	ldr	r3, [pc, #340]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2300      	movs	r3, #0
 8004e52:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e54:	4a50      	ldr	r2, [pc, #320]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e58:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d045      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd f8ea 	bl	800203c <HAL_GetTick>
 8004e68:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fd f8e6 	bl	800203c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e086      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004e82:	2302      	movs	r3, #2
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8e:	2302      	movs	r3, #2
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	61fb      	str	r3, [r7, #28]
  return result;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004eb0:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	e007      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	fa93 f3a3 	rbit	r3, r3
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	4b35      	ldr	r3, [pc, #212]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	613a      	str	r2, [r7, #16]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	fa92 f2a2 	rbit	r2, r2
 8004ed0:	60fa      	str	r2, [r7, #12]
  return result;
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	fab2 f282 	clz	r2, r2
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	f002 021f 	and.w	r2, r2, #31
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0bd      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ef0:	4b29      	ldr	r3, [pc, #164]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4926      	ldr	r1, [pc, #152]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d105      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0a:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4a22      	ldr	r2, [pc, #136]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f14:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f22:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	f023 0203 	bic.w	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	491a      	ldr	r1, [pc, #104]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f40:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4912      	ldr	r1, [pc, #72]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	490b      	ldr	r1, [pc, #44]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3748      	adds	r7, #72	@ 0x48
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	10908100 	.word	0x10908100

08004fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e095      	b.n	80050e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc6:	d009      	beq.n	8004fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
 8004fce:	e005      	b.n	8004fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fdfa 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800501c:	d902      	bls.n	8005024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e002      	b.n	800502a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005032:	d007      	beq.n	8005044 <HAL_SPI_Init+0xa0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800503c:	d002      	beq.n	8005044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	ea42 0103 	orr.w	r1, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 0204 	and.w	r2, r3, #4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050c0:	ea42 0103 	orr.w	r1, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_SPI_Transmit_DMA+0x20>
 8005108:	2302      	movs	r3, #2
 800510a:	e0d4      	b.n	80052b6 <HAL_SPI_Transmit_DMA+0x1ca>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005124:	e0c2      	b.n	80052ac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_SPI_Transmit_DMA+0x46>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005136:	e0b9      	b.n	80052ac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2203      	movs	r2, #3
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005182:	d10f      	bne.n	80051a4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a8:	4a45      	ldr	r2, [pc, #276]	@ (80052c0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	4a44      	ldr	r2, [pc, #272]	@ (80052c4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b8:	4a43      	ldr	r2, [pc, #268]	@ (80052c8 <HAL_SPI_Transmit_DMA+0x1dc>)
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	2200      	movs	r2, #0
 80051c2:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051d2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051dc:	d82d      	bhi.n	800523a <HAL_SPI_Transmit_DMA+0x14e>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e8:	d127      	bne.n	800523a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10f      	bne.n	8005218 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005206:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005216:	e010      	b.n	800523a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005226:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	3301      	adds	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	4619      	mov	r1, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005250:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005252:	f7fd f991 	bl	8002578 <HAL_DMA_Start_IT>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800526c:	e01e      	b.n	80052ac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	d007      	beq.n	800528c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800528a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0220 	orr.w	r2, r2, #32
 800529a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0202 	orr.w	r2, r2, #2
 80052aa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	080053af 	.word	0x080053af
 80052c4:	08005309 	.word	0x08005309
 80052c8:	080053cb 	.word	0x080053cb

080052cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005316:	f7fc fe91 	bl	800203c <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d03b      	beq.n	80053a2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0220 	bic.w	r2, r2, #32
 8005338:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0202 	bic.w	r2, r2, #2
 8005348:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	2164      	movs	r1, #100	@ 0x64
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f000 f97a 	bl	8005648 <SPI_EndRxTxTransaction>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2200      	movs	r2, #0
 8005388:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7ff ffaa 	bl	80052f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053a0:	e002      	b.n	80053a8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80053a2:	6978      	ldr	r0, [r7, #20]
 80053a4:	f7ff ff92 	bl	80052cc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff8f 	bl	80052e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0203 	bic.w	r2, r2, #3
 80053e6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ec:	f043 0210 	orr.w	r2, r3, #16
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff ff79 	bl	80052f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800541c:	f7fc fe0e 	bl	800203c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4413      	add	r3, r2
 800542a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800542c:	f7fc fe06 	bl	800203c <HAL_GetTick>
 8005430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005432:	4b39      	ldr	r3, [pc, #228]	@ (8005518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	015b      	lsls	r3, r3, #5
 8005438:	0d1b      	lsrs	r3, r3, #20
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005442:	e054      	b.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d050      	beq.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800544c:	f7fc fdf6 	bl	800203c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	429a      	cmp	r2, r3
 800545a:	d902      	bls.n	8005462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13d      	bne.n	80054de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800547a:	d111      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005484:	d004      	beq.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548e:	d107      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800549e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a8:	d10f      	bne.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e017      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d19b      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000058 	.word	0x20000058

0800551c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800552e:	f7fc fd85 	bl	800203c <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	4413      	add	r3, r2
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800553e:	f7fc fd7d 	bl	800203c <HAL_GetTick>
 8005542:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800554c:	4b3d      	ldr	r3, [pc, #244]	@ (8005644 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00da      	lsls	r2, r3, #3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	0d1b      	lsrs	r3, r3, #20
 800555c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005564:	e060      	b.n	8005628 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800556c:	d107      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0x62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800557c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d050      	beq.n	8005628 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005586:	f7fc fd59 	bl	800203c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005592:	429a      	cmp	r2, r3
 8005594:	d902      	bls.n	800559c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d13d      	bne.n	8005618 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055b4:	d111      	bne.n	80055da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055be:	d004      	beq.n	80055ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c8:	d107      	bne.n	80055da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e2:	d10f      	bne.n	8005604 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005602:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e010      	b.n	800563a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	3b01      	subs	r3, #1
 8005626:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d196      	bne.n	8005566 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3728      	adds	r7, #40	@ 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000058 	.word	0x20000058

08005648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff ff5b 	bl	800551c <SPI_WaitFifoStateUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e027      	b.n	80056cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	@ 0x80
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff fec0 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e014      	b.n	80056cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff34 	bl	800551c <SPI_WaitFifoStateUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e000      	b.n	80056cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e040      	b.n	8005768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fae6 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	@ 0x24
 8005700:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fc00 	bl	8005f18 <UART_SetConfig>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e022      	b.n	8005768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fd2a 	bl	8006184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800573e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800574e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fdb1 	bl	80062c8 <UART_CheckIdleState>
 8005766:	4603      	mov	r3, r0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005784:	2b20      	cmp	r3, #32
 8005786:	d177      	bne.n	8005878 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_UART_Transmit+0x24>
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e070      	b.n	800587a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2221      	movs	r2, #33	@ 0x21
 80057a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a6:	f7fc fc49 	bl	800203c <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c4:	d108      	bne.n	80057d8 <HAL_UART_Transmit+0x68>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e003      	b.n	80057e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057e0:	e02f      	b.n	8005842 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fe13 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e03b      	b.n	800587a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005814:	b292      	uxth	r2, r2
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3302      	adds	r3, #2
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e007      	b.n	8005830 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3301      	adds	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1c9      	bne.n	80057e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2140      	movs	r1, #64	@ 0x40
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fddd 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e005      	b.n	800587a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	@ 0x28
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005896:	2b20      	cmp	r3, #32
 8005898:	d132      	bne.n	8005900 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_UART_Receive_IT+0x24>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02b      	b.n	8005902 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fdf6 	bl	80064e8 <UART_Start_Receive_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	e000      	b.n	8005902 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3728      	adds	r7, #40	@ 0x28
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b0ba      	sub	sp, #232	@ 0xe8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005936:	f640 030f 	movw	r3, #2063	@ 0x80f
 800593a:	4013      	ands	r3, r2
 800593c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d115      	bne.n	8005974 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00f      	beq.n	8005974 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 82ab 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
      }
      return;
 8005972:	e2a5      	b.n	8005ec0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8117 	beq.w	8005bac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800598a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800598e:	4b85      	ldr	r3, [pc, #532]	@ (8005ba4 <HAL_UART_IRQHandler+0x298>)
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 810a 	beq.w	8005bac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <HAL_UART_IRQHandler+0xbc>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d011      	beq.n	80059f8 <HAL_UART_IRQHandler+0xec>
 80059d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2202      	movs	r2, #2
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d011      	beq.n	8005a28 <HAL_UART_IRQHandler+0x11c>
 8005a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2204      	movs	r2, #4
 8005a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1e:	f043 0202 	orr.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d017      	beq.n	8005a64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2208      	movs	r2, #8
 8005a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a5a:	f043 0208 	orr.w	r2, r3, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <HAL_UART_IRQHandler+0x18a>
 8005a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8211 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04f      	beq.n	8005b8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fdc0 	bl	8006674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d141      	bne.n	8005b86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d9      	bne.n	8005b02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <HAL_UART_IRQHandler+0x29c>)
 8005b5c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fc fda0 	bl	80026a8 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00f      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9b4 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00b      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9b0 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e007      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9ac 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b9c:	e192      	b.n	8005ec4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9e:	bf00      	nop
    return;
 8005ba0:	e190      	b.n	8005ec4 <HAL_UART_IRQHandler+0x5b8>
 8005ba2:	bf00      	nop
 8005ba4:	04000120 	.word	0x04000120
 8005ba8:	0800673d 	.word	0x0800673d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f040 814b 	bne.w	8005e4c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8144 	beq.w	8005e4c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 813d 	beq.w	8005e4c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b40      	cmp	r3, #64	@ 0x40
 8005be6:	f040 80b5 	bne.w	8005d54 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8164 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	f080 815c 	bcs.w	8005ec8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	f000 8086 	beq.w	8005d32 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1da      	bne.n	8005c26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e1      	bne.n	8005c70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e3      	bne.n	8005cac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e4      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc fc82 	bl	8002636 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f8d7 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d52:	e0b9      	b.n	8005ec8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80ab 	beq.w	8005ecc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80a6 	beq.w	8005ecc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e4      	bne.n	8005d80 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e3      	bne.n	8005db6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	69b9      	ldr	r1, [r7, #24]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	617b      	str	r3, [r7, #20]
   return(result);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e4      	bne.n	8005e02 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f85b 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e4a:	e03f      	b.n	8005ecc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <HAL_UART_IRQHandler+0x56a>
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fe4c 	bl	8006b0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e74:	e02d      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00e      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01c      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
    }
    return;
 8005e9e:	e017      	b.n	8005ed0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d012      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc55 	bl	8006768 <UART_EndTransmit_IT>
    return;
 8005ebe:	e008      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ec0:	bf00      	nop
 8005ec2:	e006      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005ec4:	bf00      	nop
 8005ec6:	e004      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ec8:	bf00      	nop
 8005eca:	e002      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005ed0:	bf00      	nop
  }

}
 8005ed2:	37e8      	adds	r7, #232	@ 0xe8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8a      	ldr	r3, [pc, #552]	@ (800616c <UART_SetConfig+0x254>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a78      	ldr	r2, [pc, #480]	@ (8006170 <UART_SetConfig+0x258>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d120      	bne.n	8005fd6 <UART_SetConfig+0xbe>
 8005f94:	4b77      	ldr	r3, [pc, #476]	@ (8006174 <UART_SetConfig+0x25c>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d817      	bhi.n	8005fd0 <UART_SetConfig+0xb8>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x90>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcb 	.word	0x08005fcb
 8005fb4:	08005fbf 	.word	0x08005fbf
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e01d      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e01a      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e017      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e014      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e011      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a67      	ldr	r2, [pc, #412]	@ (8006178 <UART_SetConfig+0x260>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d102      	bne.n	8005fe6 <UART_SetConfig+0xce>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e009      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a64      	ldr	r2, [pc, #400]	@ (800617c <UART_SetConfig+0x264>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d102      	bne.n	8005ff6 <UART_SetConfig+0xde>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e001      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006002:	d15a      	bne.n	80060ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006004:	7ffb      	ldrb	r3, [r7, #31]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d827      	bhi.n	800605a <UART_SetConfig+0x142>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0xf8>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603d 	.word	0x0800603d
 8006018:	08006045 	.word	0x08006045
 800601c:	0800605b 	.word	0x0800605b
 8006020:	0800604b 	.word	0x0800604b
 8006024:	0800605b 	.word	0x0800605b
 8006028:	0800605b 	.word	0x0800605b
 800602c:	0800605b 	.word	0x0800605b
 8006030:	08006053 	.word	0x08006053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7fe fe4c 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8006038:	61b8      	str	r0, [r7, #24]
        break;
 800603a:	e013      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fe fe6a 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e00f      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006044:	4b4e      	ldr	r3, [pc, #312]	@ (8006180 <UART_SetConfig+0x268>)
 8006046:	61bb      	str	r3, [r7, #24]
        break;
 8006048:	e00c      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604a:	f7fe fdc9 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 800604e:	61b8      	str	r0, [r7, #24]
        break;
 8006050:	e008      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	61bb      	str	r3, [r7, #24]
        break;
 8006058:	e004      	b.n	8006064 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	77bb      	strb	r3, [r7, #30]
        break;
 8006062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d074      	beq.n	8006154 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	005a      	lsls	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b0f      	cmp	r3, #15
 8006084:	d916      	bls.n	80060b4 <UART_SetConfig+0x19c>
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800608c:	d212      	bcs.n	80060b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f023 030f 	bic.w	r3, r3, #15
 8006096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	b29b      	uxth	r3, r3
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	89fa      	ldrh	r2, [r7, #14]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	e04f      	b.n	8006154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77bb      	strb	r3, [r7, #30]
 80060b8:	e04c      	b.n	8006154 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d828      	bhi.n	8006112 <UART_SetConfig+0x1fa>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <UART_SetConfig+0x1b0>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006113 	.word	0x08006113
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006113 	.word	0x08006113
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
 80060e8:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe fdf0 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 80060f0:	61b8      	str	r0, [r7, #24]
        break;
 80060f2:	e013      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe fe0e 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80060f8:	61b8      	str	r0, [r7, #24]
        break;
 80060fa:	e00f      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <UART_SetConfig+0x268>)
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e00c      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fe fd6d 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8006106:	61b8      	str	r0, [r7, #24]
        break;
 8006108:	e008      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610e:	61bb      	str	r3, [r7, #24]
        break;
 8006110:	e004      	b.n	800611c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	77bb      	strb	r3, [r7, #30]
        break;
 800611a:	bf00      	nop
    }

    if (pclk != 0U)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d018      	beq.n	8006154 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085a      	lsrs	r2, r3, #1
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	441a      	add	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b0f      	cmp	r3, #15
 800613a:	d909      	bls.n	8006150 <UART_SetConfig+0x238>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006142:	d205      	bcs.n	8006150 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	b29a      	uxth	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e001      	b.n	8006154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006160:	7fbb      	ldrb	r3, [r7, #30]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	efff69f3 	.word	0xefff69f3
 8006170:	40013800 	.word	0x40013800
 8006174:	40021000 	.word	0x40021000
 8006178:	40004400 	.word	0x40004400
 800617c:	40004800 	.word	0x40004800
 8006180:	007a1200 	.word	0x007a1200

08006184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006282:	d10a      	bne.n	800629a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b098      	sub	sp, #96	@ 0x60
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d8:	f7fb feb0 	bl	800203c <HAL_GetTick>
 80062dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d12e      	bne.n	800634a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f88c 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d021      	beq.n	800634a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	653b      	str	r3, [r7, #80]	@ 0x50
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006324:	647b      	str	r3, [r7, #68]	@ 0x44
 8006326:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800632a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e062      	b.n	8006410 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b04      	cmp	r3, #4
 8006356:	d149      	bne.n	80063ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	2200      	movs	r2, #0
 8006362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f856 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d03c      	beq.n	80063ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	623b      	str	r3, [r7, #32]
   return(result);
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
 8006392:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	617b      	str	r3, [r7, #20]
   return(result);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e011      	b.n	8006410 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3758      	adds	r7, #88	@ 0x58
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006428:	e049      	b.n	80064be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d045      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fb fe03 	bl	800203c <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <UART_WaitOnFlagUntilTimeout+0x30>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e048      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d031      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d110      	bne.n	800648a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2208      	movs	r2, #8
 800646e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f8ff 	bl	8006674 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2208      	movs	r2, #8
 800647a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e029      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006498:	d111      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f8e5 	bl	8006674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e00f      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4013      	ands	r3, r2
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d0a6      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b097      	sub	sp, #92	@ 0x5c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d10e      	bne.n	800653a <UART_Start_Receive_IT+0x52>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <UART_Start_Receive_IT+0x48>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800652a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800652e:	e02d      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	22ff      	movs	r2, #255	@ 0xff
 8006534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006538:	e028      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <UART_Start_Receive_IT+0x76>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <UART_Start_Receive_IT+0x6c>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006552:	e01b      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	227f      	movs	r2, #127	@ 0x7f
 8006558:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800655c:	e016      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006566:	d10d      	bne.n	8006584 <UART_Start_Receive_IT+0x9c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <UART_Start_Receive_IT+0x92>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	227f      	movs	r2, #127	@ 0x7f
 8006574:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006578:	e008      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	223f      	movs	r2, #63	@ 0x3f
 800657e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006582:	e003      	b.n	800658c <UART_Start_Receive_IT+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2222      	movs	r2, #34	@ 0x22
 8006598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d107      	bne.n	80065ea <UART_Start_Receive_IT+0x102>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a21      	ldr	r2, [pc, #132]	@ (800666c <UART_Start_Receive_IT+0x184>)
 80065e6:	669a      	str	r2, [r3, #104]	@ 0x68
 80065e8:	e002      	b.n	80065f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <UART_Start_Receive_IT+0x188>)
 80065ee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d019      	beq.n	800662c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800660c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e6      	bne.n	80065f8 <UART_Start_Receive_IT+0x110>
 800662a:	e018      	b.n	800665e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	653b      	str	r3, [r7, #80]	@ 0x50
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69f9      	ldr	r1, [r7, #28]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	61bb      	str	r3, [r7, #24]
   return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	375c      	adds	r7, #92	@ 0x5c
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	08006965 	.word	0x08006965
 8006670:	080067bd 	.word	0x080067bd

08006674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b095      	sub	sp, #84	@ 0x54
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40
 800669c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d118      	bne.n	800671c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006730:	bf00      	nop
 8006732:	3754      	adds	r7, #84	@ 0x54
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff fbc6 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	60bb      	str	r3, [r7, #8]
   return(result);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	613b      	str	r3, [r7, #16]
   return(result);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fb92 	bl	8005ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b4:	bf00      	nop
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b09c      	sub	sp, #112	@ 0x70
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d4:	2b22      	cmp	r3, #34	@ 0x22
 80067d6:	f040 80b9 	bne.w	800694c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067e8:	b2d9      	uxtb	r1, r3
 80067ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f4:	400a      	ands	r2, r1
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 809c 	bne.w	800695c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006842:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006844:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	667b      	str	r3, [r7, #100]	@ 0x64
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006876:	647a      	str	r2, [r7, #68]	@ 0x44
 8006878:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800687c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d018      	beq.n	80068de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80068cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d12e      	bne.n	8006944 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0310 	bic.w	r3, r3, #16
 8006900:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69b9      	ldr	r1, [r7, #24]
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	617b      	str	r3, [r7, #20]
   return(result);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e6      	bne.n	80068ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b10      	cmp	r3, #16
 800692a:	d103      	bne.n	8006934 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2210      	movs	r2, #16
 8006932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fadf 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006942:	e00b      	b.n	800695c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fa fc31 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 800694a:	e007      	b.n	800695c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	619a      	str	r2, [r3, #24]
}
 800695c:	bf00      	nop
 800695e:	3770      	adds	r7, #112	@ 0x70
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b09c      	sub	sp, #112	@ 0x70
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006972:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697c:	2b22      	cmp	r3, #34	@ 0x22
 800697e:	f040 80b9 	bne.w	8006af4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006988:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006990:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006992:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006996:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800699a:	4013      	ands	r3, r2
 800699c:	b29a      	uxth	r2, r3
 800699e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 809c 	bne.w	8006b04 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e6      	bne.n	80069cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3308      	adds	r3, #8
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e5      	bne.n	80069fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a74:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d12e      	bne.n	8006aec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 0310 	bic.w	r3, r3, #16
 8006aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d103      	bne.n	8006adc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2210      	movs	r2, #16
 8006ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fa0b 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aea:	e00b      	b.n	8006b04 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fa fb5d 	bl	80011ac <HAL_UART_RxCpltCallback>
}
 8006af2:	e007      	b.n	8006b04 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0208 	orr.w	r2, r2, #8
 8006b02:	619a      	str	r2, [r3, #24]
}
 8006b04:	bf00      	nop
 8006b06:	3770      	adds	r7, #112	@ 0x70
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <calloc>:
 8006b20:	4b02      	ldr	r3, [pc, #8]	@ (8006b2c <calloc+0xc>)
 8006b22:	460a      	mov	r2, r1
 8006b24:	4601      	mov	r1, r0
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	f000 b802 	b.w	8006b30 <_calloc_r>
 8006b2c:	20000064 	.word	0x20000064

08006b30 <_calloc_r>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	fba1 5402 	umull	r5, r4, r1, r2
 8006b36:	b93c      	cbnz	r4, 8006b48 <_calloc_r+0x18>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f000 f837 	bl	8006bac <_malloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	b928      	cbnz	r0, 8006b4e <_calloc_r+0x1e>
 8006b42:	2600      	movs	r6, #0
 8006b44:	4630      	mov	r0, r6
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	220c      	movs	r2, #12
 8006b4a:	6002      	str	r2, [r0, #0]
 8006b4c:	e7f9      	b.n	8006b42 <_calloc_r+0x12>
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	f000 f8b7 	bl	8006cc4 <memset>
 8006b56:	e7f5      	b.n	8006b44 <_calloc_r+0x14>

08006b58 <free>:
 8006b58:	4b02      	ldr	r3, [pc, #8]	@ (8006b64 <free+0xc>)
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f000 b8f5 	b.w	8006d4c <_free_r>
 8006b62:	bf00      	nop
 8006b64:	20000064 	.word	0x20000064

08006b68 <sbrk_aligned>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba8 <sbrk_aligned+0x40>)
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6831      	ldr	r1, [r6, #0]
 8006b70:	4605      	mov	r5, r0
 8006b72:	b911      	cbnz	r1, 8006b7a <sbrk_aligned+0x12>
 8006b74:	f000 f8ae 	bl	8006cd4 <_sbrk_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f8a9 	bl	8006cd4 <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d103      	bne.n	8006b8e <sbrk_aligned+0x26>
 8006b86:	f04f 34ff 	mov.w	r4, #4294967295
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	1cc4      	adds	r4, r0, #3
 8006b90:	f024 0403 	bic.w	r4, r4, #3
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d0f8      	beq.n	8006b8a <sbrk_aligned+0x22>
 8006b98:	1a21      	subs	r1, r4, r0
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f89a 	bl	8006cd4 <_sbrk_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d1f2      	bne.n	8006b8a <sbrk_aligned+0x22>
 8006ba4:	e7ef      	b.n	8006b86 <sbrk_aligned+0x1e>
 8006ba6:	bf00      	nop
 8006ba8:	200002c4 	.word	0x200002c4

08006bac <_malloc_r>:
 8006bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb0:	1ccd      	adds	r5, r1, #3
 8006bb2:	f025 0503 	bic.w	r5, r5, #3
 8006bb6:	3508      	adds	r5, #8
 8006bb8:	2d0c      	cmp	r5, #12
 8006bba:	bf38      	it	cc
 8006bbc:	250c      	movcc	r5, #12
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	db01      	blt.n	8006bc8 <_malloc_r+0x1c>
 8006bc4:	42a9      	cmp	r1, r5
 8006bc6:	d904      	bls.n	8006bd2 <_malloc_r+0x26>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	6033      	str	r3, [r6, #0]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca8 <_malloc_r+0xfc>
 8006bd6:	f000 f869 	bl	8006cac <__malloc_lock>
 8006bda:	f8d8 3000 	ldr.w	r3, [r8]
 8006bde:	461c      	mov	r4, r3
 8006be0:	bb44      	cbnz	r4, 8006c34 <_malloc_r+0x88>
 8006be2:	4629      	mov	r1, r5
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff ffbf 	bl	8006b68 <sbrk_aligned>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	4604      	mov	r4, r0
 8006bee:	d158      	bne.n	8006ca2 <_malloc_r+0xf6>
 8006bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf4:	4627      	mov	r7, r4
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d143      	bne.n	8006c82 <_malloc_r+0xd6>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	d04b      	beq.n	8006c96 <_malloc_r+0xea>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	4639      	mov	r1, r7
 8006c02:	4630      	mov	r0, r6
 8006c04:	eb04 0903 	add.w	r9, r4, r3
 8006c08:	f000 f864 	bl	8006cd4 <_sbrk_r>
 8006c0c:	4581      	cmp	r9, r0
 8006c0e:	d142      	bne.n	8006c96 <_malloc_r+0xea>
 8006c10:	6821      	ldr	r1, [r4, #0]
 8006c12:	1a6d      	subs	r5, r5, r1
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff ffa6 	bl	8006b68 <sbrk_aligned>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d03a      	beq.n	8006c96 <_malloc_r+0xea>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	442b      	add	r3, r5
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	bb62      	cbnz	r2, 8006c88 <_malloc_r+0xdc>
 8006c2e:	f8c8 7000 	str.w	r7, [r8]
 8006c32:	e00f      	b.n	8006c54 <_malloc_r+0xa8>
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	1b52      	subs	r2, r2, r5
 8006c38:	d420      	bmi.n	8006c7c <_malloc_r+0xd0>
 8006c3a:	2a0b      	cmp	r2, #11
 8006c3c:	d917      	bls.n	8006c6e <_malloc_r+0xc2>
 8006c3e:	1961      	adds	r1, r4, r5
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	6025      	str	r5, [r4, #0]
 8006c44:	bf18      	it	ne
 8006c46:	6059      	strne	r1, [r3, #4]
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	bf08      	it	eq
 8006c4c:	f8c8 1000 	streq.w	r1, [r8]
 8006c50:	5162      	str	r2, [r4, r5]
 8006c52:	604b      	str	r3, [r1, #4]
 8006c54:	4630      	mov	r0, r6
 8006c56:	f000 f82f 	bl	8006cb8 <__malloc_unlock>
 8006c5a:	f104 000b 	add.w	r0, r4, #11
 8006c5e:	1d23      	adds	r3, r4, #4
 8006c60:	f020 0007 	bic.w	r0, r0, #7
 8006c64:	1ac2      	subs	r2, r0, r3
 8006c66:	bf1c      	itt	ne
 8006c68:	1a1b      	subne	r3, r3, r0
 8006c6a:	50a3      	strne	r3, [r4, r2]
 8006c6c:	e7af      	b.n	8006bce <_malloc_r+0x22>
 8006c6e:	6862      	ldr	r2, [r4, #4]
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	bf0c      	ite	eq
 8006c74:	f8c8 2000 	streq.w	r2, [r8]
 8006c78:	605a      	strne	r2, [r3, #4]
 8006c7a:	e7eb      	b.n	8006c54 <_malloc_r+0xa8>
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	6864      	ldr	r4, [r4, #4]
 8006c80:	e7ae      	b.n	8006be0 <_malloc_r+0x34>
 8006c82:	463c      	mov	r4, r7
 8006c84:	687f      	ldr	r7, [r7, #4]
 8006c86:	e7b6      	b.n	8006bf6 <_malloc_r+0x4a>
 8006c88:	461a      	mov	r2, r3
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d1fb      	bne.n	8006c88 <_malloc_r+0xdc>
 8006c90:	2300      	movs	r3, #0
 8006c92:	6053      	str	r3, [r2, #4]
 8006c94:	e7de      	b.n	8006c54 <_malloc_r+0xa8>
 8006c96:	230c      	movs	r3, #12
 8006c98:	6033      	str	r3, [r6, #0]
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f000 f80c 	bl	8006cb8 <__malloc_unlock>
 8006ca0:	e794      	b.n	8006bcc <_malloc_r+0x20>
 8006ca2:	6005      	str	r5, [r0, #0]
 8006ca4:	e7d6      	b.n	8006c54 <_malloc_r+0xa8>
 8006ca6:	bf00      	nop
 8006ca8:	200002c8 	.word	0x200002c8

08006cac <__malloc_lock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__malloc_lock+0x8>)
 8006cae:	f000 b84b 	b.w	8006d48 <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000408 	.word	0x20000408

08006cb8 <__malloc_unlock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__malloc_unlock+0x8>)
 8006cba:	f000 b846 	b.w	8006d4a <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000408 	.word	0x20000408

08006cc4 <memset>:
 8006cc4:	4402      	add	r2, r0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d100      	bne.n	8006cce <memset+0xa>
 8006ccc:	4770      	bx	lr
 8006cce:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd2:	e7f9      	b.n	8006cc8 <memset+0x4>

08006cd4 <_sbrk_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d06      	ldr	r5, [pc, #24]	@ (8006cf0 <_sbrk_r+0x1c>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7fb f8a0 	bl	8001e24 <_sbrk>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_sbrk_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_sbrk_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000404 	.word	0x20000404

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	@ (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000064 	.word	0x20000064

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4d0d      	ldr	r5, [pc, #52]	@ (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	@ (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4d0b      	ldr	r5, [pc, #44]	@ (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	@ (8006d44 <__libc_init_array+0x44>)
 8006d14:	f000 ffc2 	bl	8007c9c <_init>
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d28:	4798      	blx	r3
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d32:	4798      	blx	r3
 8006d34:	3601      	adds	r6, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	08007e30 	.word	0x08007e30
 8006d3c:	08007e30 	.word	0x08007e30
 8006d40:	08007e30 	.word	0x08007e30
 8006d44:	08007e34 	.word	0x08007e34

08006d48 <__retarget_lock_acquire_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <__retarget_lock_release_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <_free_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4605      	mov	r5, r0
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d041      	beq.n	8006dd8 <_free_r+0x8c>
 8006d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d58:	1f0c      	subs	r4, r1, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfb8      	it	lt
 8006d5e:	18e4      	addlt	r4, r4, r3
 8006d60:	f7ff ffa4 	bl	8006cac <__malloc_lock>
 8006d64:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <_free_r+0x90>)
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	b933      	cbnz	r3, 8006d78 <_free_r+0x2c>
 8006d6a:	6063      	str	r3, [r4, #4]
 8006d6c:	6014      	str	r4, [r2, #0]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d74:	f7ff bfa0 	b.w	8006cb8 <__malloc_unlock>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d908      	bls.n	8006d8e <_free_r+0x42>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	1821      	adds	r1, r4, r0
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf01      	itttt	eq
 8006d84:	6819      	ldreq	r1, [r3, #0]
 8006d86:	685b      	ldreq	r3, [r3, #4]
 8006d88:	1809      	addeq	r1, r1, r0
 8006d8a:	6021      	streq	r1, [r4, #0]
 8006d8c:	e7ed      	b.n	8006d6a <_free_r+0x1e>
 8006d8e:	461a      	mov	r2, r3
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b10b      	cbz	r3, 8006d98 <_free_r+0x4c>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d9fa      	bls.n	8006d8e <_free_r+0x42>
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	1850      	adds	r0, r2, r1
 8006d9c:	42a0      	cmp	r0, r4
 8006d9e:	d10b      	bne.n	8006db8 <_free_r+0x6c>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	4401      	add	r1, r0
 8006da4:	1850      	adds	r0, r2, r1
 8006da6:	4283      	cmp	r3, r0
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	d1e0      	bne.n	8006d6e <_free_r+0x22>
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	6053      	str	r3, [r2, #4]
 8006db2:	4408      	add	r0, r1
 8006db4:	6010      	str	r0, [r2, #0]
 8006db6:	e7da      	b.n	8006d6e <_free_r+0x22>
 8006db8:	d902      	bls.n	8006dc0 <_free_r+0x74>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	e7d6      	b.n	8006d6e <_free_r+0x22>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	1821      	adds	r1, r4, r0
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf04      	itt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	bf04      	itt	eq
 8006dd0:	1809      	addeq	r1, r1, r0
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	6054      	str	r4, [r2, #4]
 8006dd6:	e7ca      	b.n	8006d6e <_free_r+0x22>
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	200002c8 	.word	0x200002c8

08006de0 <pow>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	ed2d 8b02 	vpush	{d8}
 8006de6:	eeb0 8a40 	vmov.f32	s16, s0
 8006dea:	eef0 8a60 	vmov.f32	s17, s1
 8006dee:	ec55 4b11 	vmov	r4, r5, d1
 8006df2:	f000 f871 	bl	8006ed8 <__ieee754_pow>
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	ec57 6b10 	vmov	r6, r7, d0
 8006e02:	f7f9 fe37 	bl	8000a74 <__aeabi_dcmpun>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d13b      	bne.n	8006e82 <pow+0xa2>
 8006e0a:	ec51 0b18 	vmov	r0, r1, d8
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2300      	movs	r3, #0
 8006e12:	f7f9 fdfd 	bl	8000a10 <__aeabi_dcmpeq>
 8006e16:	b1b8      	cbz	r0, 8006e48 <pow+0x68>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fdf6 	bl	8000a10 <__aeabi_dcmpeq>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d146      	bne.n	8006eb6 <pow+0xd6>
 8006e28:	ec45 4b10 	vmov	d0, r4, r5
 8006e2c:	f000 f848 	bl	8006ec0 <finite>
 8006e30:	b338      	cbz	r0, 8006e82 <pow+0xa2>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 fdf3 	bl	8000a24 <__aeabi_dcmplt>
 8006e3e:	b300      	cbz	r0, 8006e82 <pow+0xa2>
 8006e40:	f7ff ff58 	bl	8006cf4 <__errno>
 8006e44:	2322      	movs	r3, #34	@ 0x22
 8006e46:	e01b      	b.n	8006e80 <pow+0xa0>
 8006e48:	ec47 6b10 	vmov	d0, r6, r7
 8006e4c:	f000 f838 	bl	8006ec0 <finite>
 8006e50:	b9e0      	cbnz	r0, 8006e8c <pow+0xac>
 8006e52:	eeb0 0a48 	vmov.f32	s0, s16
 8006e56:	eef0 0a68 	vmov.f32	s1, s17
 8006e5a:	f000 f831 	bl	8006ec0 <finite>
 8006e5e:	b1a8      	cbz	r0, 8006e8c <pow+0xac>
 8006e60:	ec45 4b10 	vmov	d0, r4, r5
 8006e64:	f000 f82c 	bl	8006ec0 <finite>
 8006e68:	b180      	cbz	r0, 8006e8c <pow+0xac>
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fdff 	bl	8000a74 <__aeabi_dcmpun>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d0e2      	beq.n	8006e40 <pow+0x60>
 8006e7a:	f7ff ff3b 	bl	8006cf4 <__errno>
 8006e7e:	2321      	movs	r3, #33	@ 0x21
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	ecbd 8b02 	vpop	{d8}
 8006e86:	ec47 6b10 	vmov	d0, r6, r7
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fdbc 	bl	8000a10 <__aeabi_dcmpeq>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0f2      	beq.n	8006e82 <pow+0xa2>
 8006e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8006ea0:	eef0 0a68 	vmov.f32	s1, s17
 8006ea4:	f000 f80c 	bl	8006ec0 <finite>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0ea      	beq.n	8006e82 <pow+0xa2>
 8006eac:	ec45 4b10 	vmov	d0, r4, r5
 8006eb0:	f000 f806 	bl	8006ec0 <finite>
 8006eb4:	e7c3      	b.n	8006e3e <pow+0x5e>
 8006eb6:	4f01      	ldr	r7, [pc, #4]	@ (8006ebc <pow+0xdc>)
 8006eb8:	2600      	movs	r6, #0
 8006eba:	e7e2      	b.n	8006e82 <pow+0xa2>
 8006ebc:	3ff00000 	.word	0x3ff00000

08006ec0 <finite>:
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	ed8d 0b00 	vstr	d0, [sp]
 8006ec6:	9801      	ldr	r0, [sp, #4]
 8006ec8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006ecc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006ed0:	0fc0      	lsrs	r0, r0, #31
 8006ed2:	b002      	add	sp, #8
 8006ed4:	4770      	bx	lr
	...

08006ed8 <__ieee754_pow>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	b091      	sub	sp, #68	@ 0x44
 8006ede:	ed8d 1b00 	vstr	d1, [sp]
 8006ee2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006ee6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006eea:	ea5a 0001 	orrs.w	r0, sl, r1
 8006eee:	ec57 6b10 	vmov	r6, r7, d0
 8006ef2:	d113      	bne.n	8006f1c <__ieee754_pow+0x44>
 8006ef4:	19b3      	adds	r3, r6, r6
 8006ef6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006efa:	4152      	adcs	r2, r2
 8006efc:	4298      	cmp	r0, r3
 8006efe:	4b98      	ldr	r3, [pc, #608]	@ (8007160 <__ieee754_pow+0x288>)
 8006f00:	4193      	sbcs	r3, r2
 8006f02:	f080 84ea 	bcs.w	80078da <__ieee754_pow+0xa02>
 8006f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7f9 f961 	bl	80001d4 <__adddf3>
 8006f12:	ec41 0b10 	vmov	d0, r0, r1
 8006f16:	b011      	add	sp, #68	@ 0x44
 8006f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	4a91      	ldr	r2, [pc, #580]	@ (8007164 <__ieee754_pow+0x28c>)
 8006f1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006f22:	4590      	cmp	r8, r2
 8006f24:	463d      	mov	r5, r7
 8006f26:	4633      	mov	r3, r6
 8006f28:	d806      	bhi.n	8006f38 <__ieee754_pow+0x60>
 8006f2a:	d101      	bne.n	8006f30 <__ieee754_pow+0x58>
 8006f2c:	2e00      	cmp	r6, #0
 8006f2e:	d1ea      	bne.n	8006f06 <__ieee754_pow+0x2e>
 8006f30:	4592      	cmp	sl, r2
 8006f32:	d801      	bhi.n	8006f38 <__ieee754_pow+0x60>
 8006f34:	d10e      	bne.n	8006f54 <__ieee754_pow+0x7c>
 8006f36:	b169      	cbz	r1, 8006f54 <__ieee754_pow+0x7c>
 8006f38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006f3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006f40:	431d      	orrs	r5, r3
 8006f42:	d1e0      	bne.n	8006f06 <__ieee754_pow+0x2e>
 8006f44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f48:	18db      	adds	r3, r3, r3
 8006f4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006f4e:	4152      	adcs	r2, r2
 8006f50:	429d      	cmp	r5, r3
 8006f52:	e7d4      	b.n	8006efe <__ieee754_pow+0x26>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	46c3      	mov	fp, r8
 8006f58:	da3a      	bge.n	8006fd0 <__ieee754_pow+0xf8>
 8006f5a:	4a83      	ldr	r2, [pc, #524]	@ (8007168 <__ieee754_pow+0x290>)
 8006f5c:	4592      	cmp	sl, r2
 8006f5e:	d84d      	bhi.n	8006ffc <__ieee754_pow+0x124>
 8006f60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006f64:	4592      	cmp	sl, r2
 8006f66:	f240 84c7 	bls.w	80078f8 <__ieee754_pow+0xa20>
 8006f6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006f6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006f72:	2a14      	cmp	r2, #20
 8006f74:	dd0f      	ble.n	8006f96 <__ieee754_pow+0xbe>
 8006f76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006f7a:	fa21 f402 	lsr.w	r4, r1, r2
 8006f7e:	fa04 f202 	lsl.w	r2, r4, r2
 8006f82:	428a      	cmp	r2, r1
 8006f84:	f040 84b8 	bne.w	80078f8 <__ieee754_pow+0xa20>
 8006f88:	f004 0401 	and.w	r4, r4, #1
 8006f8c:	f1c4 0402 	rsb	r4, r4, #2
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d158      	bne.n	8007046 <__ieee754_pow+0x16e>
 8006f94:	e00e      	b.n	8006fb4 <__ieee754_pow+0xdc>
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d154      	bne.n	8007044 <__ieee754_pow+0x16c>
 8006f9a:	f1c2 0214 	rsb	r2, r2, #20
 8006f9e:	fa4a f402 	asr.w	r4, sl, r2
 8006fa2:	fa04 f202 	lsl.w	r2, r4, r2
 8006fa6:	4552      	cmp	r2, sl
 8006fa8:	f040 84a3 	bne.w	80078f2 <__ieee754_pow+0xa1a>
 8006fac:	f004 0401 	and.w	r4, r4, #1
 8006fb0:	f1c4 0402 	rsb	r4, r4, #2
 8006fb4:	4a6d      	ldr	r2, [pc, #436]	@ (800716c <__ieee754_pow+0x294>)
 8006fb6:	4592      	cmp	sl, r2
 8006fb8:	d12e      	bne.n	8007018 <__ieee754_pow+0x140>
 8006fba:	f1b9 0f00 	cmp.w	r9, #0
 8006fbe:	f280 8494 	bge.w	80078ea <__ieee754_pow+0xa12>
 8006fc2:	496a      	ldr	r1, [pc, #424]	@ (800716c <__ieee754_pow+0x294>)
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f7f9 fbe3 	bl	8000794 <__aeabi_ddiv>
 8006fce:	e7a0      	b.n	8006f12 <__ieee754_pow+0x3a>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	bbc1      	cbnz	r1, 8007046 <__ieee754_pow+0x16e>
 8006fd4:	4a63      	ldr	r2, [pc, #396]	@ (8007164 <__ieee754_pow+0x28c>)
 8006fd6:	4592      	cmp	sl, r2
 8006fd8:	d1ec      	bne.n	8006fb4 <__ieee754_pow+0xdc>
 8006fda:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006fde:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	f000 8479 	beq.w	80078da <__ieee754_pow+0xa02>
 8006fe8:	4b61      	ldr	r3, [pc, #388]	@ (8007170 <__ieee754_pow+0x298>)
 8006fea:	4598      	cmp	r8, r3
 8006fec:	d908      	bls.n	8007000 <__ieee754_pow+0x128>
 8006fee:	f1b9 0f00 	cmp.w	r9, #0
 8006ff2:	f2c0 8476 	blt.w	80078e2 <__ieee754_pow+0xa0a>
 8006ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ffa:	e78a      	b.n	8006f12 <__ieee754_pow+0x3a>
 8006ffc:	2402      	movs	r4, #2
 8006ffe:	e7e8      	b.n	8006fd2 <__ieee754_pow+0xfa>
 8007000:	f1b9 0f00 	cmp.w	r9, #0
 8007004:	f04f 0000 	mov.w	r0, #0
 8007008:	f04f 0100 	mov.w	r1, #0
 800700c:	da81      	bge.n	8006f12 <__ieee754_pow+0x3a>
 800700e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007012:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007016:	e77c      	b.n	8006f12 <__ieee754_pow+0x3a>
 8007018:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800701c:	d106      	bne.n	800702c <__ieee754_pow+0x154>
 800701e:	4632      	mov	r2, r6
 8007020:	463b      	mov	r3, r7
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 fa8b 	bl	8000540 <__aeabi_dmul>
 800702a:	e772      	b.n	8006f12 <__ieee754_pow+0x3a>
 800702c:	4a51      	ldr	r2, [pc, #324]	@ (8007174 <__ieee754_pow+0x29c>)
 800702e:	4591      	cmp	r9, r2
 8007030:	d109      	bne.n	8007046 <__ieee754_pow+0x16e>
 8007032:	2d00      	cmp	r5, #0
 8007034:	db07      	blt.n	8007046 <__ieee754_pow+0x16e>
 8007036:	ec47 6b10 	vmov	d0, r6, r7
 800703a:	b011      	add	sp, #68	@ 0x44
 800703c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	f000 bd52 	b.w	8007ae8 <__ieee754_sqrt>
 8007044:	2400      	movs	r4, #0
 8007046:	ec47 6b10 	vmov	d0, r6, r7
 800704a:	9302      	str	r3, [sp, #8]
 800704c:	f000 fc88 	bl	8007960 <fabs>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	ec51 0b10 	vmov	r0, r1, d0
 8007056:	bb53      	cbnz	r3, 80070ae <__ieee754_pow+0x1d6>
 8007058:	4b44      	ldr	r3, [pc, #272]	@ (800716c <__ieee754_pow+0x294>)
 800705a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800705e:	429a      	cmp	r2, r3
 8007060:	d002      	beq.n	8007068 <__ieee754_pow+0x190>
 8007062:	f1b8 0f00 	cmp.w	r8, #0
 8007066:	d122      	bne.n	80070ae <__ieee754_pow+0x1d6>
 8007068:	f1b9 0f00 	cmp.w	r9, #0
 800706c:	da05      	bge.n	800707a <__ieee754_pow+0x1a2>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	2000      	movs	r0, #0
 8007074:	493d      	ldr	r1, [pc, #244]	@ (800716c <__ieee754_pow+0x294>)
 8007076:	f7f9 fb8d 	bl	8000794 <__aeabi_ddiv>
 800707a:	2d00      	cmp	r5, #0
 800707c:	f6bf af49 	bge.w	8006f12 <__ieee754_pow+0x3a>
 8007080:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007084:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007088:	ea58 0804 	orrs.w	r8, r8, r4
 800708c:	d108      	bne.n	80070a0 <__ieee754_pow+0x1c8>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4610      	mov	r0, r2
 8007094:	4619      	mov	r1, r3
 8007096:	f7f9 f89b 	bl	80001d0 <__aeabi_dsub>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	e794      	b.n	8006fca <__ieee754_pow+0xf2>
 80070a0:	2c01      	cmp	r4, #1
 80070a2:	f47f af36 	bne.w	8006f12 <__ieee754_pow+0x3a>
 80070a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070aa:	4619      	mov	r1, r3
 80070ac:	e731      	b.n	8006f12 <__ieee754_pow+0x3a>
 80070ae:	0feb      	lsrs	r3, r5, #31
 80070b0:	3b01      	subs	r3, #1
 80070b2:	ea53 0204 	orrs.w	r2, r3, r4
 80070b6:	d102      	bne.n	80070be <__ieee754_pow+0x1e6>
 80070b8:	4632      	mov	r2, r6
 80070ba:	463b      	mov	r3, r7
 80070bc:	e7e9      	b.n	8007092 <__ieee754_pow+0x1ba>
 80070be:	3c01      	subs	r4, #1
 80070c0:	431c      	orrs	r4, r3
 80070c2:	d016      	beq.n	80070f2 <__ieee754_pow+0x21a>
 80070c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007150 <__ieee754_pow+0x278>
 80070c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80070cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070d0:	f240 8112 	bls.w	80072f8 <__ieee754_pow+0x420>
 80070d4:	4b28      	ldr	r3, [pc, #160]	@ (8007178 <__ieee754_pow+0x2a0>)
 80070d6:	459a      	cmp	sl, r3
 80070d8:	4b25      	ldr	r3, [pc, #148]	@ (8007170 <__ieee754_pow+0x298>)
 80070da:	d916      	bls.n	800710a <__ieee754_pow+0x232>
 80070dc:	4598      	cmp	r8, r3
 80070de:	d80b      	bhi.n	80070f8 <__ieee754_pow+0x220>
 80070e0:	f1b9 0f00 	cmp.w	r9, #0
 80070e4:	da0b      	bge.n	80070fe <__ieee754_pow+0x226>
 80070e6:	2000      	movs	r0, #0
 80070e8:	b011      	add	sp, #68	@ 0x44
 80070ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ee:	f000 bcf3 	b.w	8007ad8 <__math_oflow>
 80070f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007158 <__ieee754_pow+0x280>
 80070f6:	e7e7      	b.n	80070c8 <__ieee754_pow+0x1f0>
 80070f8:	f1b9 0f00 	cmp.w	r9, #0
 80070fc:	dcf3      	bgt.n	80070e6 <__ieee754_pow+0x20e>
 80070fe:	2000      	movs	r0, #0
 8007100:	b011      	add	sp, #68	@ 0x44
 8007102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	f000 bcdf 	b.w	8007ac8 <__math_uflow>
 800710a:	4598      	cmp	r8, r3
 800710c:	d20c      	bcs.n	8007128 <__ieee754_pow+0x250>
 800710e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	f7f9 fc85 	bl	8000a24 <__aeabi_dcmplt>
 800711a:	3800      	subs	r0, #0
 800711c:	bf18      	it	ne
 800711e:	2001      	movne	r0, #1
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	daec      	bge.n	8007100 <__ieee754_pow+0x228>
 8007126:	e7df      	b.n	80070e8 <__ieee754_pow+0x210>
 8007128:	4b10      	ldr	r3, [pc, #64]	@ (800716c <__ieee754_pow+0x294>)
 800712a:	4598      	cmp	r8, r3
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	d924      	bls.n	800717c <__ieee754_pow+0x2a4>
 8007132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007136:	2300      	movs	r3, #0
 8007138:	f7f9 fc74 	bl	8000a24 <__aeabi_dcmplt>
 800713c:	3800      	subs	r0, #0
 800713e:	bf18      	it	ne
 8007140:	2001      	movne	r0, #1
 8007142:	f1b9 0f00 	cmp.w	r9, #0
 8007146:	dccf      	bgt.n	80070e8 <__ieee754_pow+0x210>
 8007148:	e7da      	b.n	8007100 <__ieee754_pow+0x228>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	00000000 	.word	0x00000000
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	00000000 	.word	0x00000000
 800715c:	bff00000 	.word	0xbff00000
 8007160:	fff00000 	.word	0xfff00000
 8007164:	7ff00000 	.word	0x7ff00000
 8007168:	433fffff 	.word	0x433fffff
 800716c:	3ff00000 	.word	0x3ff00000
 8007170:	3fefffff 	.word	0x3fefffff
 8007174:	3fe00000 	.word	0x3fe00000
 8007178:	43f00000 	.word	0x43f00000
 800717c:	4b5a      	ldr	r3, [pc, #360]	@ (80072e8 <__ieee754_pow+0x410>)
 800717e:	f7f9 f827 	bl	80001d0 <__aeabi_dsub>
 8007182:	a351      	add	r3, pc, #324	@ (adr r3, 80072c8 <__ieee754_pow+0x3f0>)
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 f9d8 	bl	8000540 <__aeabi_dmul>
 8007190:	a34f      	add	r3, pc, #316	@ (adr r3, 80072d0 <__ieee754_pow+0x3f8>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	f7f9 f9cf 	bl	8000540 <__aeabi_dmul>
 80071a2:	4b52      	ldr	r3, [pc, #328]	@ (80072ec <__ieee754_pow+0x414>)
 80071a4:	4682      	mov	sl, r0
 80071a6:	468b      	mov	fp, r1
 80071a8:	2200      	movs	r2, #0
 80071aa:	4620      	mov	r0, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	f7f9 f9c7 	bl	8000540 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	a148      	add	r1, pc, #288	@ (adr r1, 80072d8 <__ieee754_pow+0x400>)
 80071b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071bc:	f7f9 f808 	bl	80001d0 <__aeabi_dsub>
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	f7f9 f9bc 	bl	8000540 <__aeabi_dmul>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	2000      	movs	r0, #0
 80071ce:	4948      	ldr	r1, [pc, #288]	@ (80072f0 <__ieee754_pow+0x418>)
 80071d0:	f7f8 fffe 	bl	80001d0 <__aeabi_dsub>
 80071d4:	4622      	mov	r2, r4
 80071d6:	4680      	mov	r8, r0
 80071d8:	4689      	mov	r9, r1
 80071da:	462b      	mov	r3, r5
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 f9ae 	bl	8000540 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4640      	mov	r0, r8
 80071ea:	4649      	mov	r1, r9
 80071ec:	f7f9 f9a8 	bl	8000540 <__aeabi_dmul>
 80071f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80072e0 <__ieee754_pow+0x408>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f9a3 	bl	8000540 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4650      	mov	r0, sl
 8007200:	4659      	mov	r1, fp
 8007202:	f7f8 ffe5 	bl	80001d0 <__aeabi_dsub>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4680      	mov	r8, r0
 800720c:	4689      	mov	r9, r1
 800720e:	4630      	mov	r0, r6
 8007210:	4639      	mov	r1, r7
 8007212:	f7f8 ffdf 	bl	80001d4 <__adddf3>
 8007216:	2400      	movs	r4, #0
 8007218:	4632      	mov	r2, r6
 800721a:	463b      	mov	r3, r7
 800721c:	4620      	mov	r0, r4
 800721e:	460d      	mov	r5, r1
 8007220:	f7f8 ffd6 	bl	80001d0 <__aeabi_dsub>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f8 ffd0 	bl	80001d0 <__aeabi_dsub>
 8007230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
 8007244:	4652      	mov	r2, sl
 8007246:	465b      	mov	r3, fp
 8007248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800724c:	f7f8 ffc0 	bl	80001d0 <__aeabi_dsub>
 8007250:	4622      	mov	r2, r4
 8007252:	462b      	mov	r3, r5
 8007254:	f7f9 f974 	bl	8000540 <__aeabi_dmul>
 8007258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 f96c 	bl	8000540 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f8 ffb0 	bl	80001d4 <__adddf3>
 8007274:	4652      	mov	r2, sl
 8007276:	465b      	mov	r3, fp
 8007278:	4606      	mov	r6, r0
 800727a:	460f      	mov	r7, r1
 800727c:	4620      	mov	r0, r4
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 f95e 	bl	8000540 <__aeabi_dmul>
 8007284:	460b      	mov	r3, r1
 8007286:	4602      	mov	r2, r0
 8007288:	4680      	mov	r8, r0
 800728a:	4689      	mov	r9, r1
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	f7f8 ffa0 	bl	80001d4 <__adddf3>
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <__ieee754_pow+0x41c>)
 8007296:	4299      	cmp	r1, r3
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	468a      	mov	sl, r1
 800729e:	468b      	mov	fp, r1
 80072a0:	f340 82ef 	ble.w	8007882 <__ieee754_pow+0x9aa>
 80072a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80072a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80072ac:	4303      	orrs	r3, r0
 80072ae:	f000 81e8 	beq.w	8007682 <__ieee754_pow+0x7aa>
 80072b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	2300      	movs	r3, #0
 80072ba:	f7f9 fbb3 	bl	8000a24 <__aeabi_dcmplt>
 80072be:	3800      	subs	r0, #0
 80072c0:	bf18      	it	ne
 80072c2:	2001      	movne	r0, #1
 80072c4:	e710      	b.n	80070e8 <__ieee754_pow+0x210>
 80072c6:	bf00      	nop
 80072c8:	60000000 	.word	0x60000000
 80072cc:	3ff71547 	.word	0x3ff71547
 80072d0:	f85ddf44 	.word	0xf85ddf44
 80072d4:	3e54ae0b 	.word	0x3e54ae0b
 80072d8:	55555555 	.word	0x55555555
 80072dc:	3fd55555 	.word	0x3fd55555
 80072e0:	652b82fe 	.word	0x652b82fe
 80072e4:	3ff71547 	.word	0x3ff71547
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	3fd00000 	.word	0x3fd00000
 80072f0:	3fe00000 	.word	0x3fe00000
 80072f4:	408fffff 	.word	0x408fffff
 80072f8:	4bd5      	ldr	r3, [pc, #852]	@ (8007650 <__ieee754_pow+0x778>)
 80072fa:	402b      	ands	r3, r5
 80072fc:	2200      	movs	r2, #0
 80072fe:	b92b      	cbnz	r3, 800730c <__ieee754_pow+0x434>
 8007300:	4bd4      	ldr	r3, [pc, #848]	@ (8007654 <__ieee754_pow+0x77c>)
 8007302:	f7f9 f91d 	bl	8000540 <__aeabi_dmul>
 8007306:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800730a:	468b      	mov	fp, r1
 800730c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007310:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007314:	4413      	add	r3, r2
 8007316:	930a      	str	r3, [sp, #40]	@ 0x28
 8007318:	4bcf      	ldr	r3, [pc, #828]	@ (8007658 <__ieee754_pow+0x780>)
 800731a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800731e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007322:	459b      	cmp	fp, r3
 8007324:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007328:	dd08      	ble.n	800733c <__ieee754_pow+0x464>
 800732a:	4bcc      	ldr	r3, [pc, #816]	@ (800765c <__ieee754_pow+0x784>)
 800732c:	459b      	cmp	fp, r3
 800732e:	f340 81a5 	ble.w	800767c <__ieee754_pow+0x7a4>
 8007332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007334:	3301      	adds	r3, #1
 8007336:	930a      	str	r3, [sp, #40]	@ 0x28
 8007338:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800733c:	f04f 0a00 	mov.w	sl, #0
 8007340:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007344:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007346:	4bc6      	ldr	r3, [pc, #792]	@ (8007660 <__ieee754_pow+0x788>)
 8007348:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800734c:	ed93 7b00 	vldr	d7, [r3]
 8007350:	4629      	mov	r1, r5
 8007352:	ec53 2b17 	vmov	r2, r3, d7
 8007356:	ed8d 7b06 	vstr	d7, [sp, #24]
 800735a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800735e:	f7f8 ff37 	bl	80001d0 <__aeabi_dsub>
 8007362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800736e:	f7f8 ff31 	bl	80001d4 <__adddf3>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	2000      	movs	r0, #0
 8007378:	49ba      	ldr	r1, [pc, #744]	@ (8007664 <__ieee754_pow+0x78c>)
 800737a:	f7f9 fa0b 	bl	8000794 <__aeabi_ddiv>
 800737e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4630      	mov	r0, r6
 8007388:	4639      	mov	r1, r7
 800738a:	f7f9 f8d9 	bl	8000540 <__aeabi_dmul>
 800738e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007392:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007396:	106d      	asrs	r5, r5, #1
 8007398:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800739c:	f04f 0b00 	mov.w	fp, #0
 80073a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80073a4:	4661      	mov	r1, ip
 80073a6:	2200      	movs	r2, #0
 80073a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80073ac:	4658      	mov	r0, fp
 80073ae:	46e1      	mov	r9, ip
 80073b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80073b4:	4614      	mov	r4, r2
 80073b6:	461d      	mov	r5, r3
 80073b8:	f7f9 f8c2 	bl	8000540 <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f8 ff04 	bl	80001d0 <__aeabi_dsub>
 80073c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f8 fefc 	bl	80001d0 <__aeabi_dsub>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073e0:	f7f8 fef6 	bl	80001d0 <__aeabi_dsub>
 80073e4:	465a      	mov	r2, fp
 80073e6:	464b      	mov	r3, r9
 80073e8:	f7f9 f8aa 	bl	8000540 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f8 feec 	bl	80001d0 <__aeabi_dsub>
 80073f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073fc:	f7f9 f8a0 	bl	8000540 <__aeabi_dmul>
 8007400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	f7f9 f898 	bl	8000540 <__aeabi_dmul>
 8007410:	a37d      	add	r3, pc, #500	@ (adr r3, 8007608 <__ieee754_pow+0x730>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	f7f9 f891 	bl	8000540 <__aeabi_dmul>
 800741e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007610 <__ieee754_pow+0x738>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f8 fed6 	bl	80001d4 <__adddf3>
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	f7f9 f888 	bl	8000540 <__aeabi_dmul>
 8007430:	a379      	add	r3, pc, #484	@ (adr r3, 8007618 <__ieee754_pow+0x740>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f8 fecd 	bl	80001d4 <__adddf3>
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f7f9 f87f 	bl	8000540 <__aeabi_dmul>
 8007442:	a377      	add	r3, pc, #476	@ (adr r3, 8007620 <__ieee754_pow+0x748>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 fec4 	bl	80001d4 <__adddf3>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f9 f876 	bl	8000540 <__aeabi_dmul>
 8007454:	a374      	add	r3, pc, #464	@ (adr r3, 8007628 <__ieee754_pow+0x750>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 febb 	bl	80001d4 <__adddf3>
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f7f9 f86d 	bl	8000540 <__aeabi_dmul>
 8007466:	a372      	add	r3, pc, #456	@ (adr r3, 8007630 <__ieee754_pow+0x758>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 feb2 	bl	80001d4 <__adddf3>
 8007470:	4622      	mov	r2, r4
 8007472:	4606      	mov	r6, r0
 8007474:	460f      	mov	r7, r1
 8007476:	462b      	mov	r3, r5
 8007478:	4620      	mov	r0, r4
 800747a:	4629      	mov	r1, r5
 800747c:	f7f9 f860 	bl	8000540 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f9 f85a 	bl	8000540 <__aeabi_dmul>
 800748c:	465a      	mov	r2, fp
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	464b      	mov	r3, r9
 8007494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007498:	f7f8 fe9c 	bl	80001d4 <__adddf3>
 800749c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074a0:	f7f9 f84e 	bl	8000540 <__aeabi_dmul>
 80074a4:	4622      	mov	r2, r4
 80074a6:	462b      	mov	r3, r5
 80074a8:	f7f8 fe94 	bl	80001d4 <__adddf3>
 80074ac:	465a      	mov	r2, fp
 80074ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074b2:	464b      	mov	r3, r9
 80074b4:	4658      	mov	r0, fp
 80074b6:	4649      	mov	r1, r9
 80074b8:	f7f9 f842 	bl	8000540 <__aeabi_dmul>
 80074bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007668 <__ieee754_pow+0x790>)
 80074be:	2200      	movs	r2, #0
 80074c0:	4606      	mov	r6, r0
 80074c2:	460f      	mov	r7, r1
 80074c4:	f7f8 fe86 	bl	80001d4 <__adddf3>
 80074c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074cc:	f7f8 fe82 	bl	80001d4 <__adddf3>
 80074d0:	46d8      	mov	r8, fp
 80074d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80074d6:	460d      	mov	r5, r1
 80074d8:	465a      	mov	r2, fp
 80074da:	460b      	mov	r3, r1
 80074dc:	4640      	mov	r0, r8
 80074de:	4649      	mov	r1, r9
 80074e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80074e4:	f7f9 f82c 	bl	8000540 <__aeabi_dmul>
 80074e8:	465c      	mov	r4, fp
 80074ea:	4680      	mov	r8, r0
 80074ec:	4689      	mov	r9, r1
 80074ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007668 <__ieee754_pow+0x790>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f8 fe6b 	bl	80001d0 <__aeabi_dsub>
 80074fa:	4632      	mov	r2, r6
 80074fc:	463b      	mov	r3, r7
 80074fe:	f7f8 fe67 	bl	80001d0 <__aeabi_dsub>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800750a:	f7f8 fe61 	bl	80001d0 <__aeabi_dsub>
 800750e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007512:	f7f9 f815 	bl	8000540 <__aeabi_dmul>
 8007516:	4622      	mov	r2, r4
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	462b      	mov	r3, r5
 800751e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007522:	f7f9 f80d 	bl	8000540 <__aeabi_dmul>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f8 fe51 	bl	80001d4 <__adddf3>
 8007532:	4606      	mov	r6, r0
 8007534:	460f      	mov	r7, r1
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f8 fe49 	bl	80001d4 <__adddf3>
 8007542:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007546:	a33c      	add	r3, pc, #240	@ (adr r3, 8007638 <__ieee754_pow+0x760>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	4658      	mov	r0, fp
 800754e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007552:	460d      	mov	r5, r1
 8007554:	f7f8 fff4 	bl	8000540 <__aeabi_dmul>
 8007558:	465c      	mov	r4, fp
 800755a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800755e:	4642      	mov	r2, r8
 8007560:	464b      	mov	r3, r9
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 fe33 	bl	80001d0 <__aeabi_dsub>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4630      	mov	r0, r6
 8007570:	4639      	mov	r1, r7
 8007572:	f7f8 fe2d 	bl	80001d0 <__aeabi_dsub>
 8007576:	a332      	add	r3, pc, #200	@ (adr r3, 8007640 <__ieee754_pow+0x768>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 ffe0 	bl	8000540 <__aeabi_dmul>
 8007580:	a331      	add	r3, pc, #196	@ (adr r3, 8007648 <__ieee754_pow+0x770>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f8 ffd7 	bl	8000540 <__aeabi_dmul>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f8 fe1b 	bl	80001d4 <__adddf3>
 800759e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075a0:	4b32      	ldr	r3, [pc, #200]	@ (800766c <__ieee754_pow+0x794>)
 80075a2:	4413      	add	r3, r2
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f8 fe14 	bl	80001d4 <__adddf3>
 80075ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075b2:	f7f8 ff5b 	bl	800046c <__aeabi_i2d>
 80075b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007670 <__ieee754_pow+0x798>)
 80075ba:	4413      	add	r3, r2
 80075bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075c0:	4606      	mov	r6, r0
 80075c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075c6:	460f      	mov	r7, r1
 80075c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075cc:	f7f8 fe02 	bl	80001d4 <__adddf3>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f8 fdfe 	bl	80001d4 <__adddf3>
 80075d8:	4632      	mov	r2, r6
 80075da:	463b      	mov	r3, r7
 80075dc:	f7f8 fdfa 	bl	80001d4 <__adddf3>
 80075e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	4658      	mov	r0, fp
 80075ea:	460d      	mov	r5, r1
 80075ec:	f7f8 fdf0 	bl	80001d0 <__aeabi_dsub>
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	f7f8 fdec 	bl	80001d0 <__aeabi_dsub>
 80075f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075fc:	f7f8 fde8 	bl	80001d0 <__aeabi_dsub>
 8007600:	465c      	mov	r4, fp
 8007602:	4602      	mov	r2, r0
 8007604:	e036      	b.n	8007674 <__ieee754_pow+0x79c>
 8007606:	bf00      	nop
 8007608:	4a454eef 	.word	0x4a454eef
 800760c:	3fca7e28 	.word	0x3fca7e28
 8007610:	93c9db65 	.word	0x93c9db65
 8007614:	3fcd864a 	.word	0x3fcd864a
 8007618:	a91d4101 	.word	0xa91d4101
 800761c:	3fd17460 	.word	0x3fd17460
 8007620:	518f264d 	.word	0x518f264d
 8007624:	3fd55555 	.word	0x3fd55555
 8007628:	db6fabff 	.word	0xdb6fabff
 800762c:	3fdb6db6 	.word	0x3fdb6db6
 8007630:	33333303 	.word	0x33333303
 8007634:	3fe33333 	.word	0x3fe33333
 8007638:	e0000000 	.word	0xe0000000
 800763c:	3feec709 	.word	0x3feec709
 8007640:	dc3a03fd 	.word	0xdc3a03fd
 8007644:	3feec709 	.word	0x3feec709
 8007648:	145b01f5 	.word	0x145b01f5
 800764c:	be3e2fe0 	.word	0xbe3e2fe0
 8007650:	7ff00000 	.word	0x7ff00000
 8007654:	43400000 	.word	0x43400000
 8007658:	0003988e 	.word	0x0003988e
 800765c:	000bb679 	.word	0x000bb679
 8007660:	08007e20 	.word	0x08007e20
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	40080000 	.word	0x40080000
 800766c:	08007e00 	.word	0x08007e00
 8007670:	08007e10 	.word	0x08007e10
 8007674:	460b      	mov	r3, r1
 8007676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800767a:	e5d7      	b.n	800722c <__ieee754_pow+0x354>
 800767c:	f04f 0a01 	mov.w	sl, #1
 8007680:	e65e      	b.n	8007340 <__ieee754_pow+0x468>
 8007682:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007954 <__ieee754_pow+0xa7c>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f8 fda2 	bl	80001d4 <__adddf3>
 8007690:	4642      	mov	r2, r8
 8007692:	e9cd 0100 	strd	r0, r1, [sp]
 8007696:	464b      	mov	r3, r9
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 fd98 	bl	80001d0 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076a8:	f7f9 f9da 	bl	8000a60 <__aeabi_dcmpgt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f47f ae00 	bne.w	80072b2 <__ieee754_pow+0x3da>
 80076b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80076b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80076ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80076be:	fa43 fa0a 	asr.w	sl, r3, sl
 80076c2:	44da      	add	sl, fp
 80076c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80076c8:	489d      	ldr	r0, [pc, #628]	@ (8007940 <__ieee754_pow+0xa68>)
 80076ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80076ce:	4108      	asrs	r0, r1
 80076d0:	ea00 030a 	and.w	r3, r0, sl
 80076d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80076d8:	f1c1 0114 	rsb	r1, r1, #20
 80076dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80076e0:	fa4a fa01 	asr.w	sl, sl, r1
 80076e4:	f1bb 0f00 	cmp.w	fp, #0
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	bfb8      	it	lt
 80076f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80076f6:	f7f8 fd6b 	bl	80001d0 <__aeabi_dsub>
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	4632      	mov	r2, r6
 8007700:	463b      	mov	r3, r7
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f8 fd65 	bl	80001d4 <__adddf3>
 800770a:	2400      	movs	r4, #0
 800770c:	a37c      	add	r3, pc, #496	@ (adr r3, 8007900 <__ieee754_pow+0xa28>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	4620      	mov	r0, r4
 8007714:	460d      	mov	r5, r1
 8007716:	f7f8 ff13 	bl	8000540 <__aeabi_dmul>
 800771a:	4642      	mov	r2, r8
 800771c:	e9cd 0100 	strd	r0, r1, [sp]
 8007720:	464b      	mov	r3, r9
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fd53 	bl	80001d0 <__aeabi_dsub>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f8 fd4d 	bl	80001d0 <__aeabi_dsub>
 8007736:	a374      	add	r3, pc, #464	@ (adr r3, 8007908 <__ieee754_pow+0xa30>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f7f8 ff00 	bl	8000540 <__aeabi_dmul>
 8007740:	a373      	add	r3, pc, #460	@ (adr r3, 8007910 <__ieee754_pow+0xa38>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	4680      	mov	r8, r0
 8007748:	4689      	mov	r9, r1
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f8 fef7 	bl	8000540 <__aeabi_dmul>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 fd3b 	bl	80001d4 <__adddf3>
 800775e:	4604      	mov	r4, r0
 8007760:	460d      	mov	r5, r1
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800776a:	f7f8 fd33 	bl	80001d4 <__adddf3>
 800776e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007772:	4680      	mov	r8, r0
 8007774:	4689      	mov	r9, r1
 8007776:	f7f8 fd2b 	bl	80001d0 <__aeabi_dsub>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 fd25 	bl	80001d0 <__aeabi_dsub>
 8007786:	4642      	mov	r2, r8
 8007788:	4606      	mov	r6, r0
 800778a:	460f      	mov	r7, r1
 800778c:	464b      	mov	r3, r9
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f8 fed5 	bl	8000540 <__aeabi_dmul>
 8007796:	a360      	add	r3, pc, #384	@ (adr r3, 8007918 <__ieee754_pow+0xa40>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	4604      	mov	r4, r0
 800779e:	460d      	mov	r5, r1
 80077a0:	f7f8 fece 	bl	8000540 <__aeabi_dmul>
 80077a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007920 <__ieee754_pow+0xa48>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	f7f8 fd11 	bl	80001d0 <__aeabi_dsub>
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	f7f8 fec5 	bl	8000540 <__aeabi_dmul>
 80077b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007928 <__ieee754_pow+0xa50>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fd0a 	bl	80001d4 <__adddf3>
 80077c0:	4622      	mov	r2, r4
 80077c2:	462b      	mov	r3, r5
 80077c4:	f7f8 febc 	bl	8000540 <__aeabi_dmul>
 80077c8:	a359      	add	r3, pc, #356	@ (adr r3, 8007930 <__ieee754_pow+0xa58>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 fcff 	bl	80001d0 <__aeabi_dsub>
 80077d2:	4622      	mov	r2, r4
 80077d4:	462b      	mov	r3, r5
 80077d6:	f7f8 feb3 	bl	8000540 <__aeabi_dmul>
 80077da:	a357      	add	r3, pc, #348	@ (adr r3, 8007938 <__ieee754_pow+0xa60>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 fcf8 	bl	80001d4 <__adddf3>
 80077e4:	4622      	mov	r2, r4
 80077e6:	462b      	mov	r3, r5
 80077e8:	f7f8 feaa 	bl	8000540 <__aeabi_dmul>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4640      	mov	r0, r8
 80077f2:	4649      	mov	r1, r9
 80077f4:	f7f8 fcec 	bl	80001d0 <__aeabi_dsub>
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4640      	mov	r0, r8
 8007802:	4649      	mov	r1, r9
 8007804:	f7f8 fe9c 	bl	8000540 <__aeabi_dmul>
 8007808:	2200      	movs	r2, #0
 800780a:	e9cd 0100 	strd	r0, r1, [sp]
 800780e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007812:	4620      	mov	r0, r4
 8007814:	4629      	mov	r1, r5
 8007816:	f7f8 fcdb 	bl	80001d0 <__aeabi_dsub>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007822:	f7f8 ffb7 	bl	8000794 <__aeabi_ddiv>
 8007826:	4632      	mov	r2, r6
 8007828:	4604      	mov	r4, r0
 800782a:	460d      	mov	r5, r1
 800782c:	463b      	mov	r3, r7
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fe85 	bl	8000540 <__aeabi_dmul>
 8007836:	4632      	mov	r2, r6
 8007838:	463b      	mov	r3, r7
 800783a:	f7f8 fccb 	bl	80001d4 <__adddf3>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4620      	mov	r0, r4
 8007844:	4629      	mov	r1, r5
 8007846:	f7f8 fcc3 	bl	80001d0 <__aeabi_dsub>
 800784a:	4642      	mov	r2, r8
 800784c:	464b      	mov	r3, r9
 800784e:	f7f8 fcbf 	bl	80001d0 <__aeabi_dsub>
 8007852:	460b      	mov	r3, r1
 8007854:	4602      	mov	r2, r0
 8007856:	493b      	ldr	r1, [pc, #236]	@ (8007944 <__ieee754_pow+0xa6c>)
 8007858:	2000      	movs	r0, #0
 800785a:	f7f8 fcb9 	bl	80001d0 <__aeabi_dsub>
 800785e:	ec41 0b10 	vmov	d0, r0, r1
 8007862:	ee10 3a90 	vmov	r3, s1
 8007866:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800786e:	da30      	bge.n	80078d2 <__ieee754_pow+0x9fa>
 8007870:	4650      	mov	r0, sl
 8007872:	f000 f87d 	bl	8007970 <scalbn>
 8007876:	ec51 0b10 	vmov	r0, r1, d0
 800787a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800787e:	f7ff bbd2 	b.w	8007026 <__ieee754_pow+0x14e>
 8007882:	4c31      	ldr	r4, [pc, #196]	@ (8007948 <__ieee754_pow+0xa70>)
 8007884:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007888:	42a3      	cmp	r3, r4
 800788a:	d91a      	bls.n	80078c2 <__ieee754_pow+0x9ea>
 800788c:	4b2f      	ldr	r3, [pc, #188]	@ (800794c <__ieee754_pow+0xa74>)
 800788e:	440b      	add	r3, r1
 8007890:	4303      	orrs	r3, r0
 8007892:	d009      	beq.n	80078a8 <__ieee754_pow+0x9d0>
 8007894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	2300      	movs	r3, #0
 800789c:	f7f9 f8c2 	bl	8000a24 <__aeabi_dcmplt>
 80078a0:	3800      	subs	r0, #0
 80078a2:	bf18      	it	ne
 80078a4:	2001      	movne	r0, #1
 80078a6:	e42b      	b.n	8007100 <__ieee754_pow+0x228>
 80078a8:	4642      	mov	r2, r8
 80078aa:	464b      	mov	r3, r9
 80078ac:	f7f8 fc90 	bl	80001d0 <__aeabi_dsub>
 80078b0:	4632      	mov	r2, r6
 80078b2:	463b      	mov	r3, r7
 80078b4:	f7f9 f8ca 	bl	8000a4c <__aeabi_dcmpge>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d1eb      	bne.n	8007894 <__ieee754_pow+0x9bc>
 80078bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800795c <__ieee754_pow+0xa84>
 80078c0:	e6f7      	b.n	80076b2 <__ieee754_pow+0x7da>
 80078c2:	469a      	mov	sl, r3
 80078c4:	4b22      	ldr	r3, [pc, #136]	@ (8007950 <__ieee754_pow+0xa78>)
 80078c6:	459a      	cmp	sl, r3
 80078c8:	f63f aef3 	bhi.w	80076b2 <__ieee754_pow+0x7da>
 80078cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80078d0:	e715      	b.n	80076fe <__ieee754_pow+0x826>
 80078d2:	ec51 0b10 	vmov	r0, r1, d0
 80078d6:	4619      	mov	r1, r3
 80078d8:	e7cf      	b.n	800787a <__ieee754_pow+0x9a2>
 80078da:	491a      	ldr	r1, [pc, #104]	@ (8007944 <__ieee754_pow+0xa6c>)
 80078dc:	2000      	movs	r0, #0
 80078de:	f7ff bb18 	b.w	8006f12 <__ieee754_pow+0x3a>
 80078e2:	2000      	movs	r0, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	f7ff bb14 	b.w	8006f12 <__ieee754_pow+0x3a>
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7ff bb10 	b.w	8006f12 <__ieee754_pow+0x3a>
 80078f2:	460c      	mov	r4, r1
 80078f4:	f7ff bb5e 	b.w	8006fb4 <__ieee754_pow+0xdc>
 80078f8:	2400      	movs	r4, #0
 80078fa:	f7ff bb49 	b.w	8006f90 <__ieee754_pow+0xb8>
 80078fe:	bf00      	nop
 8007900:	00000000 	.word	0x00000000
 8007904:	3fe62e43 	.word	0x3fe62e43
 8007908:	fefa39ef 	.word	0xfefa39ef
 800790c:	3fe62e42 	.word	0x3fe62e42
 8007910:	0ca86c39 	.word	0x0ca86c39
 8007914:	be205c61 	.word	0xbe205c61
 8007918:	72bea4d0 	.word	0x72bea4d0
 800791c:	3e663769 	.word	0x3e663769
 8007920:	c5d26bf1 	.word	0xc5d26bf1
 8007924:	3ebbbd41 	.word	0x3ebbbd41
 8007928:	af25de2c 	.word	0xaf25de2c
 800792c:	3f11566a 	.word	0x3f11566a
 8007930:	16bebd93 	.word	0x16bebd93
 8007934:	3f66c16c 	.word	0x3f66c16c
 8007938:	5555553e 	.word	0x5555553e
 800793c:	3fc55555 	.word	0x3fc55555
 8007940:	fff00000 	.word	0xfff00000
 8007944:	3ff00000 	.word	0x3ff00000
 8007948:	4090cbff 	.word	0x4090cbff
 800794c:	3f6f3400 	.word	0x3f6f3400
 8007950:	3fe00000 	.word	0x3fe00000
 8007954:	652b82fe 	.word	0x652b82fe
 8007958:	3c971547 	.word	0x3c971547
 800795c:	4090cc00 	.word	0x4090cc00

08007960 <fabs>:
 8007960:	ec51 0b10 	vmov	r0, r1, d0
 8007964:	4602      	mov	r2, r0
 8007966:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800796a:	ec43 2b10 	vmov	d0, r2, r3
 800796e:	4770      	bx	lr

08007970 <scalbn>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	ec55 4b10 	vmov	r4, r5, d0
 8007976:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800797a:	4606      	mov	r6, r0
 800797c:	462b      	mov	r3, r5
 800797e:	b991      	cbnz	r1, 80079a6 <scalbn+0x36>
 8007980:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007984:	4323      	orrs	r3, r4
 8007986:	d03d      	beq.n	8007a04 <scalbn+0x94>
 8007988:	4b35      	ldr	r3, [pc, #212]	@ (8007a60 <scalbn+0xf0>)
 800798a:	4620      	mov	r0, r4
 800798c:	4629      	mov	r1, r5
 800798e:	2200      	movs	r2, #0
 8007990:	f7f8 fdd6 	bl	8000540 <__aeabi_dmul>
 8007994:	4b33      	ldr	r3, [pc, #204]	@ (8007a64 <scalbn+0xf4>)
 8007996:	429e      	cmp	r6, r3
 8007998:	4604      	mov	r4, r0
 800799a:	460d      	mov	r5, r1
 800799c:	da0f      	bge.n	80079be <scalbn+0x4e>
 800799e:	a328      	add	r3, pc, #160	@ (adr r3, 8007a40 <scalbn+0xd0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	e01e      	b.n	80079e4 <scalbn+0x74>
 80079a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80079aa:	4291      	cmp	r1, r2
 80079ac:	d10b      	bne.n	80079c6 <scalbn+0x56>
 80079ae:	4622      	mov	r2, r4
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fc0e 	bl	80001d4 <__adddf3>
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	e022      	b.n	8007a04 <scalbn+0x94>
 80079be:	460b      	mov	r3, r1
 80079c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80079c4:	3936      	subs	r1, #54	@ 0x36
 80079c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80079ca:	4296      	cmp	r6, r2
 80079cc:	dd0d      	ble.n	80079ea <scalbn+0x7a>
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007a48 <scalbn+0xd8>)
 80079d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d6:	da02      	bge.n	80079de <scalbn+0x6e>
 80079d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007a50 <scalbn+0xe0>)
 80079da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079de:	a31a      	add	r3, pc, #104	@ (adr r3, 8007a48 <scalbn+0xd8>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fdac 	bl	8000540 <__aeabi_dmul>
 80079e8:	e7e6      	b.n	80079b8 <scalbn+0x48>
 80079ea:	1872      	adds	r2, r6, r1
 80079ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80079f0:	428a      	cmp	r2, r1
 80079f2:	dcec      	bgt.n	80079ce <scalbn+0x5e>
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	dd08      	ble.n	8007a0a <scalbn+0x9a>
 80079f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80079fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007a00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a04:	ec45 4b10 	vmov	d0, r4, r5
 8007a08:	bd70      	pop	{r4, r5, r6, pc}
 8007a0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007a0e:	da08      	bge.n	8007a22 <scalbn+0xb2>
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	a10b      	add	r1, pc, #44	@ (adr r1, 8007a40 <scalbn+0xd0>)
 8007a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a18:	dac1      	bge.n	800799e <scalbn+0x2e>
 8007a1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007a58 <scalbn+0xe8>)
 8007a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a20:	e7bd      	b.n	800799e <scalbn+0x2e>
 8007a22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007a26:	3236      	adds	r2, #54	@ 0x36
 8007a28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007a2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a30:	4620      	mov	r0, r4
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <scalbn+0xf8>)
 8007a34:	4629      	mov	r1, r5
 8007a36:	2200      	movs	r2, #0
 8007a38:	e7d4      	b.n	80079e4 <scalbn+0x74>
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w
 8007a40:	c2f8f359 	.word	0xc2f8f359
 8007a44:	01a56e1f 	.word	0x01a56e1f
 8007a48:	8800759c 	.word	0x8800759c
 8007a4c:	7e37e43c 	.word	0x7e37e43c
 8007a50:	8800759c 	.word	0x8800759c
 8007a54:	fe37e43c 	.word	0xfe37e43c
 8007a58:	c2f8f359 	.word	0xc2f8f359
 8007a5c:	81a56e1f 	.word	0x81a56e1f
 8007a60:	43500000 	.word	0x43500000
 8007a64:	ffff3cb0 	.word	0xffff3cb0
 8007a68:	3c900000 	.word	0x3c900000

08007a6c <with_errno>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	ed2d 8b02 	vpush	{d8}
 8007a72:	eeb0 8a40 	vmov.f32	s16, s0
 8007a76:	eef0 8a60 	vmov.f32	s17, s1
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	f7ff f93a 	bl	8006cf4 <__errno>
 8007a80:	eeb0 0a48 	vmov.f32	s0, s16
 8007a84:	eef0 0a68 	vmov.f32	s1, s17
 8007a88:	ecbd 8b02 	vpop	{d8}
 8007a8c:	6004      	str	r4, [r0, #0]
 8007a8e:	bd10      	pop	{r4, pc}

08007a90 <xflow>:
 8007a90:	4603      	mov	r3, r0
 8007a92:	b507      	push	{r0, r1, r2, lr}
 8007a94:	ec51 0b10 	vmov	r0, r1, d0
 8007a98:	b183      	cbz	r3, 8007abc <xflow+0x2c>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8007aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aa8:	f7f8 fd4a 	bl	8000540 <__aeabi_dmul>
 8007aac:	ec41 0b10 	vmov	d0, r0, r1
 8007ab0:	2022      	movs	r0, #34	@ 0x22
 8007ab2:	b003      	add	sp, #12
 8007ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ab8:	f7ff bfd8 	b.w	8007a6c <with_errno>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	e7ee      	b.n	8007aa0 <xflow+0x10>
 8007ac2:	0000      	movs	r0, r0
 8007ac4:	0000      	movs	r0, r0
	...

08007ac8 <__math_uflow>:
 8007ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ad0 <__math_uflow+0x8>
 8007acc:	f7ff bfe0 	b.w	8007a90 <xflow>
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	10000000 	.word	0x10000000

08007ad8 <__math_oflow>:
 8007ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ae0 <__math_oflow+0x8>
 8007adc:	f7ff bfd8 	b.w	8007a90 <xflow>
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	70000000 	.word	0x70000000

08007ae8 <__ieee754_sqrt>:
 8007ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	4a68      	ldr	r2, [pc, #416]	@ (8007c90 <__ieee754_sqrt+0x1a8>)
 8007aee:	ec55 4b10 	vmov	r4, r5, d0
 8007af2:	43aa      	bics	r2, r5
 8007af4:	462b      	mov	r3, r5
 8007af6:	4621      	mov	r1, r4
 8007af8:	d110      	bne.n	8007b1c <__ieee754_sqrt+0x34>
 8007afa:	4622      	mov	r2, r4
 8007afc:	4620      	mov	r0, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	f7f8 fd1e 	bl	8000540 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 fb62 	bl	80001d4 <__adddf3>
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	ec45 4b10 	vmov	d0, r4, r5
 8007b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	dc0e      	bgt.n	8007b3e <__ieee754_sqrt+0x56>
 8007b20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007b24:	4322      	orrs	r2, r4
 8007b26:	d0f5      	beq.n	8007b14 <__ieee754_sqrt+0x2c>
 8007b28:	b19d      	cbz	r5, 8007b52 <__ieee754_sqrt+0x6a>
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 fb4e 	bl	80001d0 <__aeabi_dsub>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	f7f8 fe2c 	bl	8000794 <__aeabi_ddiv>
 8007b3c:	e7e8      	b.n	8007b10 <__ieee754_sqrt+0x28>
 8007b3e:	152a      	asrs	r2, r5, #20
 8007b40:	d115      	bne.n	8007b6e <__ieee754_sqrt+0x86>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e009      	b.n	8007b5a <__ieee754_sqrt+0x72>
 8007b46:	0acb      	lsrs	r3, r1, #11
 8007b48:	3a15      	subs	r2, #21
 8007b4a:	0549      	lsls	r1, r1, #21
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0fa      	beq.n	8007b46 <__ieee754_sqrt+0x5e>
 8007b50:	e7f7      	b.n	8007b42 <__ieee754_sqrt+0x5a>
 8007b52:	462a      	mov	r2, r5
 8007b54:	e7fa      	b.n	8007b4c <__ieee754_sqrt+0x64>
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	3001      	adds	r0, #1
 8007b5a:	02dc      	lsls	r4, r3, #11
 8007b5c:	d5fb      	bpl.n	8007b56 <__ieee754_sqrt+0x6e>
 8007b5e:	1e44      	subs	r4, r0, #1
 8007b60:	1b12      	subs	r2, r2, r4
 8007b62:	f1c0 0420 	rsb	r4, r0, #32
 8007b66:	fa21 f404 	lsr.w	r4, r1, r4
 8007b6a:	4323      	orrs	r3, r4
 8007b6c:	4081      	lsls	r1, r0
 8007b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b72:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b7a:	07d2      	lsls	r2, r2, #31
 8007b7c:	bf5c      	itt	pl
 8007b7e:	005b      	lslpl	r3, r3, #1
 8007b80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b88:	bf58      	it	pl
 8007b8a:	0049      	lslpl	r1, r1, #1
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007b92:	106d      	asrs	r5, r5, #1
 8007b94:	0049      	lsls	r1, r1, #1
 8007b96:	2016      	movs	r0, #22
 8007b98:	4632      	mov	r2, r6
 8007b9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007b9e:	1917      	adds	r7, r2, r4
 8007ba0:	429f      	cmp	r7, r3
 8007ba2:	bfde      	ittt	le
 8007ba4:	193a      	addle	r2, r7, r4
 8007ba6:	1bdb      	suble	r3, r3, r7
 8007ba8:	1936      	addle	r6, r6, r4
 8007baa:	0fcf      	lsrs	r7, r1, #31
 8007bac:	3801      	subs	r0, #1
 8007bae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007bb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007bba:	d1f0      	bne.n	8007b9e <__ieee754_sqrt+0xb6>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2720      	movs	r7, #32
 8007bc0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	eb00 0e0c 	add.w	lr, r0, ip
 8007bca:	db02      	blt.n	8007bd2 <__ieee754_sqrt+0xea>
 8007bcc:	d113      	bne.n	8007bf6 <__ieee754_sqrt+0x10e>
 8007bce:	458e      	cmp	lr, r1
 8007bd0:	d811      	bhi.n	8007bf6 <__ieee754_sqrt+0x10e>
 8007bd2:	f1be 0f00 	cmp.w	lr, #0
 8007bd6:	eb0e 000c 	add.w	r0, lr, ip
 8007bda:	da42      	bge.n	8007c62 <__ieee754_sqrt+0x17a>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	db40      	blt.n	8007c62 <__ieee754_sqrt+0x17a>
 8007be0:	f102 0801 	add.w	r8, r2, #1
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	458e      	cmp	lr, r1
 8007be8:	bf88      	it	hi
 8007bea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007bee:	eba1 010e 	sub.w	r1, r1, lr
 8007bf2:	4464      	add	r4, ip
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007bfa:	3f01      	subs	r7, #1
 8007bfc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007c00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007c04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007c08:	d1dc      	bne.n	8007bc4 <__ieee754_sqrt+0xdc>
 8007c0a:	4319      	orrs	r1, r3
 8007c0c:	d01b      	beq.n	8007c46 <__ieee754_sqrt+0x15e>
 8007c0e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007c94 <__ieee754_sqrt+0x1ac>
 8007c12:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007c98 <__ieee754_sqrt+0x1b0>
 8007c16:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c1e:	f7f8 fad7 	bl	80001d0 <__aeabi_dsub>
 8007c22:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 ff03 	bl	8000a38 <__aeabi_dcmple>
 8007c32:	b140      	cbz	r0, 8007c46 <__ieee754_sqrt+0x15e>
 8007c34:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007c38:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c40:	d111      	bne.n	8007c66 <__ieee754_sqrt+0x17e>
 8007c42:	3601      	adds	r6, #1
 8007c44:	463c      	mov	r4, r7
 8007c46:	1072      	asrs	r2, r6, #1
 8007c48:	0863      	lsrs	r3, r4, #1
 8007c4a:	07f1      	lsls	r1, r6, #31
 8007c4c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007c50:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007c54:	bf48      	it	mi
 8007c56:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007c5a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007c5e:	4618      	mov	r0, r3
 8007c60:	e756      	b.n	8007b10 <__ieee754_sqrt+0x28>
 8007c62:	4690      	mov	r8, r2
 8007c64:	e7be      	b.n	8007be4 <__ieee754_sqrt+0xfc>
 8007c66:	f7f8 fab5 	bl	80001d4 <__adddf3>
 8007c6a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fed5 	bl	8000a24 <__aeabi_dcmplt>
 8007c7a:	b120      	cbz	r0, 8007c86 <__ieee754_sqrt+0x19e>
 8007c7c:	1ca0      	adds	r0, r4, #2
 8007c7e:	bf08      	it	eq
 8007c80:	3601      	addeq	r6, #1
 8007c82:	3402      	adds	r4, #2
 8007c84:	e7df      	b.n	8007c46 <__ieee754_sqrt+0x15e>
 8007c86:	1c63      	adds	r3, r4, #1
 8007c88:	f023 0401 	bic.w	r4, r3, #1
 8007c8c:	e7db      	b.n	8007c46 <__ieee754_sqrt+0x15e>
 8007c8e:	bf00      	nop
 8007c90:	7ff00000 	.word	0x7ff00000
 8007c94:	200000c0 	.word	0x200000c0
 8007c98:	200000b8 	.word	0x200000b8

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
