
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006494  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006620  08006620  00016620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006750  08006750  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08006750  08006750  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006750  08006750  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000001e8  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a84  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002850  00000000  00000000  00031b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c474  00000000  00000000  00035ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013758  00000000  00000000  00052354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0bf1  00000000  00000000  00065aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010669d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004120  00000000  00000000  001066f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006604 	.word	0x08006604

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08006604 	.word	0x08006604

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <VEML6030_init+0x38>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00};
 8000af2:	2300      	movs	r3, #0
 8000af4:	81bb      	strh	r3, [r7, #12]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 2, 100);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <VEML6030_init+0x38>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	b299      	uxth	r1, r3
 8000afe:	f107 020c 	add.w	r2, r7, #12
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2302      	movs	r3, #2
 8000b08:	f001 fd34 	bl	8002574 <HAL_I2C_Master_Transmit>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000cc 	.word	0x200000cc
 8000b1c:	00000000 	.word	0x00000000

08000b20 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f858 	bl	8000be4 <VEML6030_readWord>
 8000b34:	4603      	mov	r3, r0
 8000b36:	81fb      	strh	r3, [r7, #14]
  uint8_t x2x1 = (config >> 6) & 0x03;
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	099b      	lsrs	r3, r3, #6
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	737b      	strb	r3, [r7, #13]
  uint8_t x3 = VEML6030_readBit(config, 8);
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f874 	bl	8000c38 <VEML6030_readBit>
 8000b50:	4603      	mov	r3, r0
 8000b52:	733b      	strb	r3, [r7, #12]
  uint8_t x4 = VEML6030_readBit(config, 9);
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	2109      	movs	r1, #9
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f86d 	bl	8000c38 <VEML6030_readBit>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	72fb      	strb	r3, [r7, #11]
  uint16_t IntTime = 100 *pow(2,x2x1)/ pow(2,(x3 + x4));
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc71 	bl	800044c <__aeabi_ui2d>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	ec43 2b11 	vmov	d1, r2, r3
 8000b72:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000bd8 <VEML6030_getIntTime+0xb8>
 8000b76:	f004 fe2b 	bl	80057d0 <pow>
 8000b7a:	ec51 0b10 	vmov	r0, r1, d0
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <VEML6030_getIntTime+0xc0>)
 8000b84:	f7ff fcdc 	bl	8000540 <__aeabi_dmul>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	461d      	mov	r5, r3
 8000b90:	7b3a      	ldrb	r2, [r7, #12]
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	4413      	add	r3, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc68 	bl	800046c <__aeabi_i2d>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	ec43 2b11 	vmov	d1, r2, r3
 8000ba4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8000bd8 <VEML6030_getIntTime+0xb8>
 8000ba8:	f004 fe12 	bl	80057d0 <pow>
 8000bac:	ec53 2b10 	vmov	r2, r3, d0
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	f7ff fdee 	bl	8000794 <__aeabi_ddiv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff ff6e 	bl	8000aa0 <__aeabi_d2uiz>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	813b      	strh	r3, [r7, #8]
  return IntTime;
 8000bc8:	893b      	ldrh	r3, [r7, #8]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40000000 	.word	0x40000000
 8000be0:	40590000 	.word	0x40590000

08000be4 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = { };
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <VEML6030_readWord+0x50>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	f001 fda2 	bl	800275c <HAL_I2C_Mem_Read>
  uint16_t data = (buf[1] << 8) + buf[0];
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7b3b      	ldrb	r3, [r7, #12]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	81fb      	strh	r3, [r7, #14]
  return data;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000cc 	.word	0x200000cc

08000c38 <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	4613      	mov	r3, r2
 8000c46:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <getID_Rotary>:
const DotPattern* PATTERN_ADDR[16] =
  { &PATTERN_0, &PATTERN_1, &PATTERN_2, &PATTERN_3, &PATTERN_4, &PATTERN_5,
      &PATTERN_6, &PATTERN_7, &PATTERN_8, &PATTERN_9, &PATTERN_10, &PATTERN_11,
      &PATTERN_12, &PATTERN_13, &PATTERN_14, &PATTERN_15 };

uint8_t getID_Rotary(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  uint8_t ID = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin)) << 0;
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4822      	ldr	r0, [pc, #136]	; (8000cfc <getID_Rotary+0x98>)
 8000c72:	f001 fbbf 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin)) << 1;
 8000c8e:	2120      	movs	r1, #32
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <getID_Rotary+0x98>)
 8000c92:	f001 fbaf 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <getID_Rotary+0x3c>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e000      	b.n	8000ca2 <getID_Rotary+0x3e>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	b25a      	sxtb	r2, r3
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID4_GPIO_Port, ID4_Pin)) << 2;
 8000cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f001 fb9d 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <getID_Rotary+0x60>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e000      	b.n	8000cc6 <getID_Rotary+0x62>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	b25a      	sxtb	r2, r3
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID8_GPIO_Port, ID8_Pin)) << 3;
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <getID_Rotary+0x98>)
 8000cd6:	f001 fb8d 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <getID_Rotary+0x80>
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	e000      	b.n	8000ce6 <getID_Rotary+0x82>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
  return ID;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	48000400 	.word	0x48000400

08000d00 <getColor>:

uint8_t getColor(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(COLOR_GPIO_Port, COLOR_Pin);
 8000d04:	2104      	movs	r1, #4
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f001 fb73 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <setPattern>:

void setPattern(uint8_t ID,uint8_t color) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
  RGB pattern[5];
  pattern[0] = PATTERN_ADDR[ID]->dot0;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <setPattern+0xa0>)
 8000d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	8811      	ldrh	r1, [r2, #0]
 8000d32:	7892      	ldrb	r2, [r2, #2]
 8000d34:	8019      	strh	r1, [r3, #0]
 8000d36:	709a      	strb	r2, [r3, #2]
  pattern[1] = PATTERN_ADDR[ID]->dot1;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <setPattern+0xa0>)
 8000d3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d40:	f107 030b 	add.w	r3, r7, #11
 8000d44:	3203      	adds	r2, #3
 8000d46:	8811      	ldrh	r1, [r2, #0]
 8000d48:	7892      	ldrb	r2, [r2, #2]
 8000d4a:	8019      	strh	r1, [r3, #0]
 8000d4c:	709a      	strb	r2, [r3, #2]
  pattern[2] = PATTERN_ADDR[ID]->dot2;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <setPattern+0xa0>)
 8000d52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d56:	f107 030e 	add.w	r3, r7, #14
 8000d5a:	3206      	adds	r2, #6
 8000d5c:	8811      	ldrh	r1, [r2, #0]
 8000d5e:	7892      	ldrb	r2, [r2, #2]
 8000d60:	8019      	strh	r1, [r3, #0]
 8000d62:	709a      	strb	r2, [r3, #2]
  pattern[3] = PATTERN_ADDR[ID]->dot3;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <setPattern+0xa0>)
 8000d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6c:	f107 0311 	add.w	r3, r7, #17
 8000d70:	3209      	adds	r2, #9
 8000d72:	8811      	ldrh	r1, [r2, #0]
 8000d74:	7892      	ldrb	r2, [r2, #2]
 8000d76:	8019      	strh	r1, [r3, #0]
 8000d78:	709a      	strb	r2, [r3, #2]
  if(color == BLUE){
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d106      	bne.n	8000d8e <setPattern+0x7a>
    pattern[4] = COLOR_BLUE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	753b      	strb	r3, [r7, #20]
 8000d84:	2300      	movs	r3, #0
 8000d86:	757b      	strb	r3, [r7, #21]
 8000d88:	23ff      	movs	r3, #255	; 0xff
 8000d8a:	75bb      	strb	r3, [r7, #22]
 8000d8c:	e008      	b.n	8000da0 <setPattern+0x8c>
  }else{
    pattern[4] = COLOR_YELLOW;
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <setPattern+0xa4>)
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	4611      	mov	r1, r2
 8000d98:	8019      	strh	r1, [r3, #0]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	0c12      	lsrs	r2, r2, #16
 8000d9e:	701a      	strb	r2, [r3, #0]
  }
  NeoPixel_Send(pattern);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fa5d 	bl	8001264 <NeoPixel_Send>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000000 	.word	0x20000000
 8000db8:	08006620 	.word	0x08006620

08000dbc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fd77 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f865 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 f9c3 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dce:	f000 f9a3 	bl	8001118 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dd2:	f000 f933 	bl	800103c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000dd6:	f000 f96f 	bl	80010b8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000dda:	f000 f8bb 	bl	8000f54 <MX_CAN_Init>
  MX_I2C1_Init();
 8000dde:	f000 f8ed 	bl	8000fbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  VEML6030_init(&hi2c1, SENS_ADDR_0);
 8000de2:	2190      	movs	r1, #144	; 0x90
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <main+0xd0>)
 8000de6:	f7ff fe7b 	bl	8000ae0 <VEML6030_init>
  VEML6030_init(&hi2c1, SENS_ADDR_1);
 8000dea:	2120      	movs	r1, #32
 8000dec:	4827      	ldr	r0, [pc, #156]	; (8000e8c <main+0xd0>)
 8000dee:	f7ff fe77 	bl	8000ae0 <VEML6030_init>
  NeoPixel_Init(&hspi1);
 8000df2:	4827      	ldr	r0, [pc, #156]	; (8000e90 <main+0xd4>)
 8000df4:	f000 fa26 	bl	8001244 <NeoPixel_Init>

  uint8_t ID, ID_past = 0xFF;
 8000df8:	23ff      	movs	r3, #255	; 0xff
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t color, color_past = 0xFF;
 8000dfc:	23ff      	movs	r3, #255	; 0xff
 8000dfe:	73bb      	strb	r3, [r7, #14]
  //setup cycle
  float *cycle_basis = calloc(CYCLE_LAST, sizeof(float));
 8000e00:	2104      	movs	r1, #4
 8000e02:	2002      	movs	r0, #2
 8000e04:	f004 fb8e 	bl	8005524 <calloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
  uint32_t *cycle_old = calloc(CYCLE_LAST, sizeof(uint32_t));
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f004 fb88 	bl	8005524 <calloc>
 8000e14:	4603      	mov	r3, r0
 8000e16:	607b      	str	r3, [r7, #4]
  cycle_basis[CYCLE_MAIN] = 1000 / 60;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000e1e:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_SENSOR] = VEML6030_getIntTime(SENS_ADDR_0);
 8000e20:	2090      	movs	r0, #144	; 0x90
 8000e22:	f7ff fe7d 	bl	8000b20 <VEML6030_getIntTime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e34:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // NeoPixel_FullBright();
    ID = getID_Rotary();
 8000e38:	f7ff ff14 	bl	8000c64 <getID_Rotary>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	70fb      	strb	r3, [r7, #3]
    color = getColor();
 8000e40:	f7ff ff5e 	bl	8000d00 <getColor>
 8000e44:	4603      	mov	r3, r0
 8000e46:	70bb      	strb	r3, [r7, #2]
    if (ID != ID_past || color != color_past) {
 8000e48:	78fa      	ldrb	r2, [r7, #3]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d103      	bne.n	8000e58 <main+0x9c>
 8000e50:	78ba      	ldrb	r2, [r7, #2]
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d00d      	beq.n	8000e74 <main+0xb8>
      ID_past = ID;
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	73fb      	strb	r3, [r7, #15]
      color_past = color;
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	73bb      	strb	r3, [r7, #14]
      setPattern(ID, color);
 8000e60:	78ba      	ldrb	r2, [r7, #2]
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff54 	bl	8000d14 <setPattern>
    }
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000e6c:	e002      	b.n	8000e74 <main+0xb8>
      HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 fd86 	bl	8001980 <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 fcb1 	bl	80017e0 <CycleController>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f1      	bne.n	8000e6e <main+0xb2>
    ID = getID_Rotary();
 8000e8a:	e7d5      	b.n	8000e38 <main+0x7c>
 8000e8c:	200000f8 	.word	0x200000f8
 8000e90:	2000014c 	.word	0x2000014c

08000e94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fb78 	bl	8005598 <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
    { 0 };
  RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
    { 0 };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
      | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000ee8:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 f848 	bl	8002f88 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x6e>
    Error_Handler();
 8000efe:	f000 f99b 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2302      	movs	r3, #2
 8000f08:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f870 	bl	8004004 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9a>
    Error_Handler();
 8000f2a:	f000 f985 	bl	8001238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection =
 8000f2e:	2321      	movs	r3, #33	; 0x21
 8000f30:	607b      	str	r3, [r7, #4]
      RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa99 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xb8>
    Error_Handler();
 8000f48:	f000 f976 	bl	8001238 <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3758      	adds	r7, #88	; 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <MX_CAN_Init+0x64>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000fa2:	f000 fd11 	bl	80019c8 <HAL_CAN_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CAN_Init+0x5c>
    Error_Handler();
 8000fac:	f000 f944 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000d0 	.word	0x200000d0
 8000fb8:	40006400 	.word	0x40006400

08000fbc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C1_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C1_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_I2C1_Init+0x74>)
 8000ff8:	f001 fa2c 	bl	8002454 <HAL_I2C_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8001002:	f000 f919 	bl	8001238 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001006:	2100      	movs	r1, #0
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C1_Init+0x74>)
 800100a:	f001 ff25 	bl	8002e58 <HAL_I2CEx_ConfigAnalogFilter>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8001014:	f000 f910 	bl	8001238 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_I2C1_Init+0x74>)
 800101c:	f001 ff67 	bl	8002eee <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C1_Init+0x6e>
    Error_Handler();
 8001026:	f000 f907 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000f8 	.word	0x200000f8
 8001034:	40005400 	.word	0x40005400
 8001038:	00101d7c 	.word	0x00101d7c

0800103c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_SPI1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800104c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001054:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001058:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800105c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_SPI1_Init+0x74>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001074:	2210      	movs	r2, #16
 8001076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <MX_SPI1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_SPI1_Init+0x74>)
 800108c:	2207      	movs	r2, #7
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_SPI1_Init+0x74>)
 8001098:	2208      	movs	r2, #8
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_SPI1_Init+0x74>)
 800109e:	f003 fb0f 	bl	80046c0 <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI1_Init+0x70>
    Error_Handler();
 80010a8:	f000 f8c6 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000014c 	.word	0x2000014c
 80010b4:	40013000 	.word	0x40013000

080010b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <MX_USART1_UART_Init+0x5c>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_USART1_UART_Init+0x58>)
 80010fc:	f003 fe78 	bl	8004df0 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8001106:	f000 f897 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001f4 	.word	0x200001f4
 8001114:	40013800 	.word	0x40013800

08001118 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x38>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x38>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x38>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200d      	movs	r0, #13
 800113c:	f000 fe1b 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001140:	200d      	movs	r0, #13
 8001142:	f000 fe34 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct =
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
    { 0 };

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_GPIO_Init+0xdc>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a30      	ldr	r2, [pc, #192]	; (8001230 <MX_GPIO_Init+0xdc>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <MX_GPIO_Init+0xdc>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_GPIO_Init+0xdc>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <MX_GPIO_Init+0xdc>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_GPIO_Init+0xdc>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <MX_GPIO_Init+0xdc>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <MX_GPIO_Init+0xdc>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_GPIO_Init+0xdc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	481f      	ldr	r0, [pc, #124]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011b8:	f001 f934 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_SEL_Pin COLOR_Pin USER_BTN1_Pin USER_BTN2_Pin
   ID4_Pin */
  GPIO_InitStruct.Pin = USER_SEL_Pin | COLOR_Pin | USER_BTN1_Pin | USER_BTN2_Pin
 80011bc:	f248 0356 	movw	r3, #32854	; 0x8056
 80011c0:	60fb      	str	r3, [r7, #12]
      | ID4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 ff9c 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 80011d8:	2308      	movs	r3, #8
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 ff8f 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4619      	mov	r1, r3
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <MX_GPIO_Init+0xe0>)
 800120a:	f000 ff81 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID8_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin | ID8_Pin | ID2_Pin;
 800120e:	2338      	movs	r3, #56	; 0x38
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001222:	f000 ff75 	bl	8002110 <HAL_GPIO_Init>

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <NeoPixel_Init+0x1c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000027c 	.word	0x2000027c

08001264 <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB* RGB_buf) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(N * 24, sizeof(uint8_t));
 800126c:	2101      	movs	r1, #1
 800126e:	2078      	movs	r0, #120	; 0x78
 8001270:	f004 f958 	bl	8005524 <calloc>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf);
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f834 	bl	80012e8 <NeoPixel_Serialize>
  NeoPixel_Reset();
 8001280:	f000 f816 	bl	80012b0 <NeoPixel_Reset>
  if(HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24)!= HAL_OK){
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <NeoPixel_Send+0x48>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2278      	movs	r2, #120	; 0x78
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fabb 	bl	8004808 <HAL_SPI_Transmit_DMA>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <NeoPixel_Send+0x38>
    Error_Handler();
 8001298:	f7ff ffce 	bl	8001238 <Error_Handler>
  }
  free(send_buf);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f004 f973 	bl	8005588 <free>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000027c 	.word	0x2000027c

080012b0 <NeoPixel_Reset>:

void NeoPixel_Reset() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e009      	b.n	80012d4 <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <NeoPixel_Reset+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1cf9      	adds	r1, r7, #3
 80012c6:	2201      	movs	r2, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fa9d 	bl	8004808 <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b63      	cmp	r3, #99	; 0x63
 80012d8:	ddf2      	ble.n	80012c0 <NeoPixel_Reset+0x10>
  }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000027c 	.word	0x2000027c

080012e8 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e090      	b.n	800141a <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	e086      	b.n	800140c <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f1c3 0307 	rsb	r3, r3, #7
 8001314:	fa42 f303 	asr.w	r3, r2, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00d      	beq.n	800133c <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	461a      	mov	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	22f0      	movs	r2, #240	; 0xf0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e00c      	b.n	8001356 <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	461a      	mov	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	22c0      	movs	r2, #192	; 0xc0
 8001354:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f1c3 0307 	rsb	r3, r3, #7
 800136c:	fa42 f303 	asr.w	r3, r2, r3
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	3308      	adds	r3, #8
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	22f0      	movs	r2, #240	; 0xf0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e00c      	b.n	80013ae <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	3308      	adds	r3, #8
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	22c0      	movs	r2, #192	; 0xc0
 80013ac:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	461a      	mov	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f1c3 0307 	rsb	r3, r3, #7
 80013c4:	fa42 f303 	asr.w	r3, r2, r3
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00d      	beq.n	80013ec <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	461a      	mov	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4413      	add	r3, r2
 80013e0:	3310      	adds	r3, #16
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	22f0      	movs	r2, #240	; 0xf0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e00c      	b.n	8001406 <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	3310      	adds	r3, #16
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	22c0      	movs	r2, #192	; 0xc0
 8001404:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b07      	cmp	r3, #7
 8001410:	f77f af75 	ble.w	80012fe <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b04      	cmp	r3, #4
 800141e:	f77f af6b 	ble.w	80012f8 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_CAN_MspInit+0x80>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d129      	bne.n	80014ee <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_CAN_MspInit+0x84>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_CAN_MspInit+0x84>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80014dc:	2309      	movs	r3, #9
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fe11 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40006400 	.word	0x40006400
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_I2C_MspInit+0x7c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d127      	bne.n	8001572 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_I2C_MspInit+0x80>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_I2C_MspInit+0x80>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_I2C_MspInit+0x80>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153e:	2312      	movs	r3, #18
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800154a:	2304      	movs	r3, #4
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_I2C_MspInit+0x84>)
 8001556:	f000 fddb 	bl	8002110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0x80>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0x80>)
 8001560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0x80>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400

08001588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2a      	ldr	r2, [pc, #168]	; (8001650 <HAL_SPI_MspInit+0xc8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d14e      	bne.n	8001648 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_SPI_MspInit+0xcc>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ea:	2305      	movs	r3, #5
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f000 fd8a 	bl	8002110 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_SPI_MspInit+0xd4>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001604:	2210      	movs	r2, #16
 8001606:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 800162e:	f000 fbd8 	bl	8001de2 <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001638:	f7ff fdfe 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_SPI_MspInit+0xd0>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013000 	.word	0x40013000
 8001654:	40021000 	.word	0x40021000
 8001658:	200001b0 	.word	0x200001b0
 800165c:	40020030 	.word	0x40020030

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_UART_MspInit+0x80>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d129      	bne.n	80016d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_MspInit+0x84>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_UART_MspInit+0x84>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_UART_MspInit+0x84>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_UART_MspInit+0x84>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c4:	2307      	movs	r3, #7
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f000 fd1d 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40021000 	.word	0x40021000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f904 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Channel3_IRQHandler+0x10>)
 8001742:	f000 fbf4 	bl	8001f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001b0 	.word	0x200001b0

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f003 fed8 	bl	8005534 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20003000 	.word	0x20003000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000280 	.word	0x20000280
 80017b8:	20000298 	.word	0x20000298

080017bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d107      	bne.n	800180a <CycleController+0x2a>
    old[data] = HAL_GetTick();
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	18d4      	adds	r4, r2, r3
 8001802:	f000 f8b1 	bl	8001968 <HAL_GetTick>
 8001806:	4603      	mov	r3, r0
 8001808:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 800180a:	f000 f8ad 	bl	8001968 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]
  if (current - (float)old[data] > basis[data]) {
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dd07      	ble.n	8001856 <CycleController+0x76>
    old[data] = current;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
    return 1;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <CycleController+0x78>
  } else {
    return 0;
 8001856:	2300      	movs	r3, #0
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff ffaa 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f003 fe57 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7ff fa93 	bl	8000dbc <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001898:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80018a4:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 80018a8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80018ac:	20000298 	.word	0x20000298

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 fa4b 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fdae 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fa63 	bl	8001dca <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 fa2b 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000040 	.word	0x20000040
 8001938:	20000048 	.word	0x20000048
 800193c:	20000044 	.word	0x20000044

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000048 	.word	0x20000048
 8001964:	20000284 	.word	0x20000284

08001968 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;  
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000284 	.word	0x20000284

08001980 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000048 	.word	0x20000048

080019c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ed      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd46 	bl	8001478 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ffb4 	bl	8001968 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ffb0 	bl	8001968 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c5      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0e5      	beq.n	8001a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0202 	bic.w	r2, r2, #2
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ff8e 	bl	8001968 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ff8a 	bl	8001968 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09f      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e5b      	ldrb	r3, [r3, #25]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e9b      	ldrb	r3, [r3, #26]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0220 	bic.w	r2, r2, #32
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7edb      	ldrb	r3, [r3, #27]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0210 	orr.w	r2, r2, #16
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f5b      	ldrb	r3, [r3, #29]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e037      	b.n	8001e68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f940 	bl	80020d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}  
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Start_IT+0x20>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e04a      	b.n	8001f26 <HAL_DMA_Start_IT+0xb6>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d13a      	bne.n	8001f18 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f8d4 	bl	8002074 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 020e 	orr.w	r2, r2, #14
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 020a 	orr.w	r2, r2, #10
 8001ef4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e005      	b.n	8001f24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d024      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x72>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0204 	bic.w	r2, r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2104      	movs	r1, #4
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d06a      	beq.n	800206c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f9e:	e065      	b.n	800206c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02c      	beq.n	800200a <HAL_DMA_IRQHandler+0xdc>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 020a 	bic.w	r2, r2, #10
 8001fd6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2102      	movs	r1, #2
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d035      	beq.n	800206c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002008:	e030      	b.n	800206c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2208      	movs	r2, #8
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <HAL_DMA_IRQHandler+0x13e>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 020e 	bic.w	r2, r2, #14
 8002032:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f202 	lsl.w	r2, r1, r2
 8002042:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
    }
  }
}  
 800206a:	e7ff      	b.n	800206c <HAL_DMA_IRQHandler+0x13e>
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d108      	bne.n	80020b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020b2:	e007      	b.n	80020c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	60da      	str	r2, [r3, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <DMA_CalcBaseAndBitshift+0x34>)
 80020e0:	4413      	add	r3, r2
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <DMA_CalcBaseAndBitshift+0x38>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a06      	ldr	r2, [pc, #24]	; (800210c <DMA_CalcBaseAndBitshift+0x3c>)
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	bffdfff8 	.word	0xbffdfff8
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	40020000 	.word	0x40020000

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	e14e      	b.n	80023be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8140 	beq.w	80023b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x40>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	6939      	ldr	r1, [r7, #16]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 809a 	beq.w	80023b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b55      	ldr	r3, [pc, #340]	; (80023dc <HAL_GPIO_Init+0x2cc>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a54      	ldr	r2, [pc, #336]	; (80023dc <HAL_GPIO_Init+0x2cc>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <HAL_GPIO_Init+0x2cc>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022c6:	d013      	beq.n	80022f0 <HAL_GPIO_Init+0x1e0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a46      	ldr	r2, [pc, #280]	; (80023e4 <HAL_GPIO_Init+0x2d4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00d      	beq.n	80022ec <HAL_GPIO_Init+0x1dc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <HAL_GPIO_Init+0x2d8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <HAL_GPIO_Init+0x1d8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a44      	ldr	r2, [pc, #272]	; (80023ec <HAL_GPIO_Init+0x2dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_GPIO_Init+0x1d4>
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <HAL_GPIO_Init+0x1e2>
 80022e4:	2305      	movs	r3, #5
 80022e6:	e004      	b.n	80022f2 <HAL_GPIO_Init+0x1e2>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e002      	b.n	80022f2 <HAL_GPIO_Init+0x1e2>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_GPIO_Init+0x1e2>
 80022f0:	2300      	movs	r3, #0
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	f002 0203 	and.w	r2, r2, #3
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	4093      	lsls	r3, r2
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002302:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_GPIO_Init+0x2d0>)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_GPIO_Init+0x2e0>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f aea9 	bne.w	8002120 <HAL_GPIO_Init+0x10>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800
 80023ec:	48000c00 	.word	0x48000c00
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e081      	b.n	800256a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f840 	bl	8001500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2224      	movs	r2, #36	; 0x24
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e006      	b.n	80024dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d104      	bne.n	80024ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69d9      	ldr	r1, [r3, #28]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1a      	ldr	r2, [r3, #32]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
 8002584:	4613      	mov	r3, r2
 8002586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b20      	cmp	r3, #32
 8002592:	f040 80da 	bne.w	800274a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2C_Master_Transmit+0x30>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e0d3      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ac:	f7ff f9dc 	bl	8001968 <HAL_GetTick>
 80025b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2319      	movs	r3, #25
 80025b8:	2201      	movs	r2, #1
 80025ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa5e 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0be      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	; 0x21
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2bff      	cmp	r3, #255	; 0xff
 80025fe:	d90e      	bls.n	800261e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	b2da      	uxtb	r2, r3
 800260c:	8979      	ldrh	r1, [r7, #10]
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <HAL_I2C_Master_Transmit+0x1e0>)
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fbec 	bl	8002df4 <I2C_TransferConfig>
 800261c:	e06c      	b.n	80026f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	b2da      	uxtb	r2, r3
 800262e:	8979      	ldrh	r1, [r7, #10]
 8002630:	4b48      	ldr	r3, [pc, #288]	; (8002754 <HAL_I2C_Master_Transmit+0x1e0>)
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fbdb 	bl	8002df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800263e:	e05b      	b.n	80026f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa6a 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e07b      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d034      	beq.n	80026f8 <HAL_I2C_Master_Transmit+0x184>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d130      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f9ed 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e04d      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fb8f 	bl	8002df4 <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fb7e 	bl	8002df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d19e      	bne.n	8002640 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa50 	bl	8002bac <I2C_WaitOnSTOPFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e01a      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2220      	movs	r2, #32
 800271c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_I2C_Master_Transmit+0x1e4>)
 800272a:	400b      	ands	r3, r1
 800272c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	80002000 	.word	0x80002000
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 80fd 	bne.w	800297e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_I2C_Mem_Read+0x34>
 800278a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0f1      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Mem_Read+0x4e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0ea      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b2:	f7ff f8d9 	bl	8001968 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f95b 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d5      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	; 0x22
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027fc:	88f8      	ldrh	r0, [r7, #6]
 80027fe:	893a      	ldrh	r2, [r7, #8]
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4603      	mov	r3, r0
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f8bf 	bl	8002990 <I2C_RequestMemoryRead>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ad      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d90e      	bls.n	800284c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	4b52      	ldr	r3, [pc, #328]	; (8002988 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fad5 	bl	8002df4 <I2C_TransferConfig>
 800284a:	e00f      	b.n	800286c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	b2da      	uxtb	r2, r3
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_I2C_Mem_Read+0x22c>)
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fac4 	bl	8002df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2200      	movs	r2, #0
 8002874:	2104      	movs	r1, #4
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f902 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07c      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d034      	beq.n	800292c <HAL_I2C_Mem_Read+0x1d0>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d130      	bne.n	800292c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8d3 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04d      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d90e      	bls.n	800290c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fa75 	bl	8002df4 <I2C_TransferConfig>
 800290a:	e00f      	b.n	800292c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fa64 	bl	8002df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19a      	bne.n	800286c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f936 	bl	8002bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e01a      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_I2C_Mem_Read+0x230>)
 800295e:	400b      	ands	r3, r1
 8002960:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	80002400 	.word	0x80002400
 800298c:	fe00e800 	.word	0xfe00e800

08002990 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <I2C_RequestMemoryRead+0xa4>)
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fa1c 	bl	8002df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f8ac 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e02c      	b.n	8002a2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d6:	893b      	ldrh	r3, [r7, #8]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
 80029e0:	e015      	b.n	8002a0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e2:	893b      	ldrh	r3, [r7, #8]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f892 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e012      	b.n	8002a2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f831 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	80002000 	.word	0x80002000

08002a38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d007      	beq.n	8002a74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	619a      	str	r2, [r3, #24]
  }
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a90:	e031      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d02d      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fe ff65 	bl	8001968 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d122      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d113      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d0be      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2a:	e033      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f87f 	bl	8002c34 <I2C_IsErrorOccurred>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e031      	b.n	8002ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d025      	beq.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe ff0e 	bl	8001968 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11a      	bne.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d013      	beq.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d1c4      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb8:	e02f      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f838 	bl	8002c34 <I2C_IsErrorOccurred>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02d      	b.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe fecb 	bl	8001968 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d013      	beq.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d1c8      	bne.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d068      	beq.n	8002d32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c68:	e049      	b.n	8002cfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d045      	beq.n	8002cfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fe79 	bl	8001968 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_IsErrorOccurred+0x54>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002caa:	d121      	bne.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb2:	d01d      	beq.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d01a      	beq.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cca:	f7fe fe4d 	bl	8001968 <HAL_GetTick>
 8002cce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	e00e      	b.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cd2:	f7fe fe49 	bl	8001968 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b19      	cmp	r3, #25
 8002cde:	d907      	bls.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002cee:	e006      	b.n	8002cfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d1e9      	bne.n	8002cd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <I2C_IsErrorOccurred+0xe0>
 8002d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0aa      	beq.n	8002c6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2220      	movs	r2, #32
 8002d22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fe45 	bl	8002a38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <I2C_IsErrorOccurred+0x1bc>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	fe00e800 	.word	0xfe00e800

08002df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	4613      	mov	r3, r2
 8002e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e0c:	7a7b      	ldrb	r3, [r7, #9]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <I2C_TransferConfig+0x60>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	43db      	mvns	r3, r3
 8002e38:	ea02 0103 	and.w	r1, r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	03ff63ff 	.word	0x03ff63ff

08002e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d138      	bne.n	8002ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e032      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d139      	bne.n	8002f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e033      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f001 b823 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 817d 	beq.w	80032be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fc4:	4bbc      	ldr	r3, [pc, #752]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d00c      	beq.n	8002fea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd0:	4bb9      	ldr	r3, [pc, #740]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d15c      	bne.n	8003096 <HAL_RCC_OscConfig+0x10e>
 8002fdc:	4bb6      	ldr	r3, [pc, #728]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d155      	bne.n	8003096 <HAL_RCC_OscConfig+0x10e>
 8002fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ffe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_OscConfig+0x94>
 8003016:	4ba8      	ldr	r3, [pc, #672]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e015      	b.n	8003048 <HAL_RCC_OscConfig+0xc0>
 800301c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003020:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003034:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003038:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003044:	4b9c      	ldr	r3, [pc, #624]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800304c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003050:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003054:	fa92 f2a2 	rbit	r2, r2
 8003058:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800305c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 811f 	beq.w	80032bc <HAL_RCC_OscConfig+0x334>
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8116 	bne.w	80032bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f000 bfaf 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12e>
 80030a8:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a82      	ldr	r2, [pc, #520]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e036      	b.n	8003124 <HAL_RCC_OscConfig+0x19c>
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x158>
 80030c6:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7b      	ldr	r2, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a78      	ldr	r2, [pc, #480]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e021      	b.n	8003124 <HAL_RCC_OscConfig+0x19c>
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x184>
 80030f2:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a70      	ldr	r2, [pc, #448]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80030f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6d      	ldr	r2, [pc, #436]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0x19c>
 800310c:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f023 020f 	bic.w	r2, r3, #15
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	495f      	ldr	r1, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800313a:	4313      	orrs	r3, r2
 800313c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d059      	beq.n	8003202 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fc0b 	bl	8001968 <HAL_GetTick>
 8003152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fc06 	bl	8001968 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d902      	bls.n	800316e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	f000 bf43 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 800316e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003172:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003182:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0x218>
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0x244>
 80031a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031c8:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f042 0220 	orr.w	r2, r2, #32
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ab      	beq.n	8003158 <HAL_RCC_OscConfig+0x1d0>
 8003200:	e05d      	b.n	80032be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fbb1 	bl	8001968 <HAL_GetTick>
 8003206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe fbac 	bl	8001968 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d902      	bls.n	8003222 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	f000 bee9 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003226:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003236:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0x2cc>
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0x2f8>
 8003254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003258:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003270:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003284:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003288:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003294:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ab      	bne.n	800320c <HAL_RCC_OscConfig+0x284>
 80032b4:	e003      	b.n	80032be <HAL_RCC_OscConfig+0x336>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 817d 	beq.w	80035ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032d4:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032e0:	4ba3      	ldr	r3, [pc, #652]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d172      	bne.n	80033d2 <HAL_RCC_OscConfig+0x44a>
 80032ec:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d16c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x44a>
 80032f8:	2302      	movs	r3, #2
 80032fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800330a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x3a0>
 8003322:	4b93      	ldr	r3, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e013      	b.n	8003350 <HAL_RCC_OscConfig+0x3c8>
 8003328:	2302      	movs	r3, #2
 800332a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800333a:	2302      	movs	r3, #2
 800333c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003340:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2202      	movs	r2, #2
 8003352:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003356:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800335a:	fa92 f2a2 	rbit	r2, r2
 800335e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003362:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCC_OscConfig+0x410>
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d002      	beq.n	8003398 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f000 be2e 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	21f8      	movs	r1, #248	; 0xf8
 80033ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033b6:	fa91 f1a1 	rbit	r1, r1
 80033ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033c2:	fab1 f181 	clz	r1, r1
 80033c6:	b2c9      	uxtb	r1, r1
 80033c8:	408b      	lsls	r3, r1
 80033ca:	4969      	ldr	r1, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d0:	e0fd      	b.n	80035ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8088 	beq.w	80034f4 <HAL_RCC_OscConfig+0x56c>
 80033e4:	2301      	movs	r3, #1
 80033e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	2301      	movs	r3, #1
 800340e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe faaa 	bl	8001968 <HAL_GetTick>
 8003414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe faa5 	bl	8001968 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	f000 bde2 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003430:	2302      	movs	r3, #2
 8003432:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003442:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x4d8>
 800345a:	4b45      	ldr	r3, [pc, #276]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e013      	b.n	8003488 <HAL_RCC_OscConfig+0x500>
 8003460:	2302      	movs	r3, #2
 8003462:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003478:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003484:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2202      	movs	r2, #2
 800348a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800348e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800349a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f042 0220 	orr.w	r2, r2, #32
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f002 021f 	and.w	r2, r2, #31
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0af      	beq.n	800341a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	21f8      	movs	r1, #248	; 0xf8
 80034d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034d8:	fa91 f1a1 	rbit	r1, r1
 80034dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80034e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034e4:	fab1 f181 	clz	r1, r1
 80034e8:	b2c9      	uxtb	r1, r1
 80034ea:	408b      	lsls	r3, r1
 80034ec:	4920      	ldr	r1, [pc, #128]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e06c      	b.n	80035ce <HAL_RCC_OscConfig+0x646>
 80034f4:	2301      	movs	r3, #1
 80034f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003506:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	461a      	mov	r2, r3
 800351c:	2300      	movs	r3, #0
 800351e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe fa22 	bl	8001968 <HAL_GetTick>
 8003524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe fa1d 	bl	8001968 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	f000 bd5a 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003540:	2302      	movs	r3, #2
 8003542:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d104      	bne.n	8003574 <HAL_RCC_OscConfig+0x5ec>
 800356a:	4b01      	ldr	r3, [pc, #4]	; (8003570 <HAL_RCC_OscConfig+0x5e8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x614>
 8003570:	40021000 	.word	0x40021000
 8003574:	2302      	movs	r3, #2
 8003576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800358c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003598:	4bc8      	ldr	r3, [pc, #800]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2202      	movs	r2, #2
 800359e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80035a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035a6:	fa92 f2a2 	rbit	r2, r2
 80035aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80035ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035b2:	fab2 f282 	clz	r2, r2
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f042 0220 	orr.w	r2, r2, #32
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	f002 021f 	and.w	r2, r2, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f202 	lsl.w	r2, r1, r2
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ad      	bne.n	800352a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8110 	beq.w	8003804 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d079      	beq.n	80036e8 <HAL_RCC_OscConfig+0x760>
 80035f4:	2301      	movs	r3, #1
 80035f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	4bab      	ldr	r3, [pc, #684]	; (80038c0 <HAL_RCC_OscConfig+0x938>)
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	461a      	mov	r2, r3
 800361a:	2301      	movs	r3, #1
 800361c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe f9a3 	bl	8001968 <HAL_GetTick>
 8003622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe f99e 	bl	8001968 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	f000 bcdb 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 800363e:	2302      	movs	r3, #2
 8003640:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fa93 f2a3 	rbit	r2, r3
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800367c:	2202      	movs	r2, #2
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003696:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003698:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 800369a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036a4:	2102      	movs	r1, #2
 80036a6:	6019      	str	r1, [r3, #0]
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f1a3 	rbit	r1, r3
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036be:	6019      	str	r1, [r3, #0]
  return result;
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0a0      	beq.n	8003628 <HAL_RCC_OscConfig+0x6a0>
 80036e6:	e08d      	b.n	8003804 <HAL_RCC_OscConfig+0x87c>
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800370a:	601a      	str	r2, [r3, #0]
  return result;
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003714:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_OscConfig+0x938>)
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe f91d 	bl	8001968 <HAL_GetTick>
 800372e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe f918 	bl	8001968 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d902      	bls.n	800374a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	f000 bc55 	b.w	8003ff4 <HAL_RCC_OscConfig+0x106c>
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003752:	2202      	movs	r2, #2
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003776:	2202      	movs	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	fa93 f2a3 	rbit	r2, r3
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800379a:	2202      	movs	r2, #2
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f2a3 	rbit	r2, r3
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 80037b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037c2:	2102      	movs	r1, #2
 80037c4:	6019      	str	r1, [r3, #0]
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fa93 f1a3 	rbit	r1, r3
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037dc:	6019      	str	r1, [r3, #0]
  return result;
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d197      	bne.n	8003734 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 81a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003820:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d116      	bne.n	800385a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4a22      	ldr	r2, [pc, #136]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003836:	61d3      	str	r3, [r2, #28]
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003852:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_OscConfig+0x93c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11a      	bne.n	800389c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <HAL_RCC_OscConfig+0x93c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <HAL_RCC_OscConfig+0x93c>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003872:	f7fe f879 	bl	8001968 <HAL_GetTick>
 8003876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	e009      	b.n	8003890 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387c:	f7fe f874 	bl	8001968 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	; 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e3b1      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x93c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCC_OscConfig+0x940>
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a02      	ldr	r2, [pc, #8]	; (80038bc <HAL_RCC_OscConfig+0x934>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	e03c      	b.n	8003934 <HAL_RCC_OscConfig+0x9ac>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	10908120 	.word	0x10908120
 80038c4:	40007000 	.word	0x40007000
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x96a>
 80038d8:	4bc1      	ldr	r3, [pc, #772]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4ac0      	ldr	r2, [pc, #768]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	4bbe      	ldr	r3, [pc, #760]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4abd      	ldr	r2, [pc, #756]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6213      	str	r3, [r2, #32]
 80038f0:	e020      	b.n	8003934 <HAL_RCC_OscConfig+0x9ac>
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x994>
 8003902:	4bb7      	ldr	r3, [pc, #732]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4ab6      	ldr	r2, [pc, #728]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4bb4      	ldr	r3, [pc, #720]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4ab3      	ldr	r2, [pc, #716]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	e00b      	b.n	8003934 <HAL_RCC_OscConfig+0x9ac>
 800391c:	4bb0      	ldr	r3, [pc, #704]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4aaf      	ldr	r2, [pc, #700]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	4bad      	ldr	r3, [pc, #692]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4aac      	ldr	r2, [pc, #688]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 800392e:	f023 0304 	bic.w	r3, r3, #4
 8003932:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8081 	beq.w	8003a48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe f80f 	bl	8001968 <HAL_GetTick>
 800394a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe f80a 	bl	8001968 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e345      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003970:	2202      	movs	r2, #2
 8003972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	fa93 f2a3 	rbit	r2, r3
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003994:	2202      	movs	r2, #2
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039ae:	601a      	str	r2, [r3, #0]
  return result;
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_OscConfig+0xa4c>
 80039ce:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	e013      	b.n	80039fc <HAL_RCC_OscConfig+0xa74>
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039dc:	2202      	movs	r2, #2
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a04:	2102      	movs	r1, #2
 8003a06:	6011      	str	r1, [r2, #0]
 8003a08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	fa92 f1a2 	rbit	r1, r2
 8003a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a1e:	6011      	str	r1, [r2, #0]
  return result;
 8003a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a24:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	fab2 f282 	clz	r2, r2
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f002 021f 	and.w	r2, r2, #31
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d084      	beq.n	8003950 <HAL_RCC_OscConfig+0x9c8>
 8003a46:	e07f      	b.n	8003b48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a48:	f7fd ff8e 	bl	8001968 <HAL_GetTick>
 8003a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd ff89 	bl	8001968 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e2c4      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a72:	2202      	movs	r2, #2
 8003a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fa93 f2a3 	rbit	r2, r3
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a96:	2202      	movs	r2, #2
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ab0:	601a      	str	r2, [r3, #0]
  return result;
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003aba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0xb4e>
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	e013      	b.n	8003afe <HAL_RCC_OscConfig+0xb76>
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ade:	2202      	movs	r2, #2
 8003ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	fa93 f2a3 	rbit	r2, r3
 8003af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b06:	2102      	movs	r1, #2
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	fa92 f1a2 	rbit	r1, r2
 8003b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b20:	6011      	str	r1, [r2, #0]
  return result;
 8003b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f002 021f 	and.w	r2, r2, #31
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d184      	bne.n	8003a52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8242 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_RCC_OscConfig+0xc58>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	f000 8213 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f040 8162 	bne.w	8003e52 <HAL_RCC_OscConfig+0xeca>
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f2a3 	rbit	r2, r3
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bb2:	601a      	str	r2, [r3, #0]
  return result;
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fec8 	bl	8001968 <HAL_GetTick>
 8003bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bdc:	e00c      	b.n	8003bf8 <HAL_RCC_OscConfig+0xc70>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fd fec0 	bl	8001968 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1fd      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c1c:	601a      	str	r2, [r3, #0]
  return result;
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_OscConfig+0xcba>
 8003c3c:	4bb0      	ldr	r3, [pc, #704]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	e027      	b.n	8003c92 <HAL_RCC_OscConfig+0xd0a>
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c9e:	6011      	str	r1, [r2, #0]
 8003ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ca4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	fa92 f1a2 	rbit	r1, r2
 8003cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cb6:	6011      	str	r1, [r2, #0]
  return result;
 8003cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cbc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d182      	bne.n	8003be4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	497f      	ldr	r1, [pc, #508]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	fa93 f2a3 	rbit	r2, r3
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d2a:	601a      	str	r2, [r3, #0]
  return result;
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fe0c 	bl	8001968 <HAL_GetTick>
 8003d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d54:	e009      	b.n	8003d6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fd fe07 	bl	8001968 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e144      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d8e:	601a      	str	r2, [r3, #0]
  return result;
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_OscConfig+0xe2c>
 8003dae:	4b54      	ldr	r3, [pc, #336]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	e027      	b.n	8003e04 <HAL_RCC_OscConfig+0xe7c>
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	fa92 f1a2 	rbit	r1, r2
 8003e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e28:	6011      	str	r1, [r2, #0]
  return result;
 8003e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f042 0220 	orr.w	r2, r2, #32
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f002 021f 	and.w	r2, r2, #31
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d082      	beq.n	8003d56 <HAL_RCC_OscConfig+0xdce>
 8003e50:	e0cf      	b.n	8003ff2 <HAL_RCC_OscConfig+0x106a>
 8003e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fa93 f2a3 	rbit	r2, r3
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e76:	601a      	str	r2, [r3, #0]
  return result;
 8003e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd fd66 	bl	8001968 <HAL_GetTick>
 8003e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea0:	e009      	b.n	8003eb6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd fd61 	bl	8001968 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e09e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
 8003eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003eda:	601a      	str	r2, [r3, #0]
  return result;
 8003edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ee4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d104      	bne.n	8003f04 <HAL_RCC_OscConfig+0xf7c>
 8003efa:	4b01      	ldr	r3, [pc, #4]	; (8003f00 <HAL_RCC_OscConfig+0xf78>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	e029      	b.n	8003f54 <HAL_RCC_OscConfig+0xfcc>
 8003f00:	40021000 	.word	0x40021000
 8003f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	fa93 f2a3 	rbit	r2, r3
 8003f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x1078>)
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	fa92 f1a2 	rbit	r1, r2
 8003f70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f78:	6011      	str	r1, [r2, #0]
  return result;
 8003f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f042 0220 	orr.w	r2, r2, #32
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f002 021f 	and.w	r2, r2, #31
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d180      	bne.n	8003ea2 <HAL_RCC_OscConfig+0xf1a>
 8003fa0:	e027      	b.n	8003ff2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_OscConfig+0x1078>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b09e      	sub	sp, #120	; 0x78
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e162      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b90      	ldr	r3, [pc, #576]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d910      	bls.n	800404c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b8d      	ldr	r3, [pc, #564]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0207 	bic.w	r2, r3, #7
 8004032:	498b      	ldr	r1, [pc, #556]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b89      	ldr	r3, [pc, #548]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e14a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b82      	ldr	r3, [pc, #520]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	497f      	ldr	r1, [pc, #508]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80dc 	beq.w	8004230 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d13c      	bne.n	80040fa <HAL_RCC_ClockConfig+0xf6>
 8004080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004084:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004090:	fab3 f383 	clz	r3, r3
 8004094:	b2db      	uxtb	r3, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HAL_RCC_ClockConfig+0xa6>
 80040a4:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	e00f      	b.n	80040ca <HAL_RCC_ClockConfig+0xc6>
 80040aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
 80040b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040bc:	663b      	str	r3, [r7, #96]	; 0x60
 80040be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80040d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d2:	fa92 f2a2 	rbit	r2, r2
 80040d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040da:	fab2 f282 	clz	r2, r2
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f042 0220 	orr.w	r2, r2, #32
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f002 021f 	and.w	r2, r2, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d17b      	bne.n	80041ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0f3      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d13c      	bne.n	800417c <HAL_RCC_ClockConfig+0x178>
 8004102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_ClockConfig+0x128>
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e00f      	b.n	800414c <HAL_RCC_ClockConfig+0x148>
 800412c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
 8004140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004150:	63ba      	str	r2, [r7, #56]	; 0x38
 8004152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800415a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13a      	bne.n	80041ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b2      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
 800417c:	2302      	movs	r3, #2
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x1a0>
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e00d      	b.n	80041c0 <HAL_RCC_ClockConfig+0x1bc>
 80041a4:	2302      	movs	r3, #2
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	2302      	movs	r3, #2
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2202      	movs	r2, #2
 80041c2:	61ba      	str	r2, [r7, #24]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	fa92 f2a2 	rbit	r2, r2
 80041ca:	617a      	str	r2, [r7, #20]
  return result;
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	fab2 f282 	clz	r2, r2
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	f042 0220 	orr.w	r2, r2, #32
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f002 021f 	and.w	r2, r2, #31
 80041de:	2101      	movs	r1, #1
 80041e0:	fa01 f202 	lsl.w	r2, r1, r2
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e079      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	491a      	ldr	r1, [pc, #104]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004200:	f7fd fbb2 	bl	8001968 <HAL_GetTick>
 8004204:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fd fbae 	bl	8001968 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e061      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_RCC_ClockConfig+0x260>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d214      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	4906      	ldr	r1, [pc, #24]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_RCC_ClockConfig+0x25c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e040      	b.n	80042e2 <HAL_RCC_ClockConfig+0x2de>
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCC_ClockConfig+0x2e8>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	491a      	ldr	r1, [pc, #104]	; (80042ec <HAL_RCC_ClockConfig+0x2e8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x2e8>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4912      	ldr	r1, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x2e8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042a6:	f000 f829 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042aa:	4601      	mov	r1, r0
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <HAL_RCC_ClockConfig+0x2e8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b4:	22f0      	movs	r2, #240	; 0xf0
 80042b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	fa92 f2a2 	rbit	r2, r2
 80042be:	60fa      	str	r2, [r7, #12]
  return result;
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	fab2 f282 	clz	r2, r2
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	40d3      	lsrs	r3, r2
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x2ec>)
 80042cc:	5cd3      	ldrb	r3, [r2, r3]
 80042ce:	fa21 f303 	lsr.w	r3, r1, r3
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <HAL_RCC_ClockConfig+0x2f0>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCC_ClockConfig+0x2f4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd fb00 	bl	80018e0 <HAL_InitTick>
  
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3778      	adds	r7, #120	; 0x78
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	080066e4 	.word	0x080066e4
 80042f4:	20000040 	.word	0x20000040
 80042f8:	20000044 	.word	0x20000044

080042fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b08b      	sub	sp, #44	; 0x2c
 8004300:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d002      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x30>
 8004326:	2b08      	cmp	r3, #8
 8004328:	d003      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x36>
 800432a:	e03c      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800432c:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800432e:	623b      	str	r3, [r7, #32]
      break;
 8004330:	e03c      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004338:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800433c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	fa92 f2a2 	rbit	r2, r2
 8004344:	607a      	str	r2, [r7, #4]
  return result;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	fab2 f282 	clz	r2, r2
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	40d3      	lsrs	r3, r2
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	220f      	movs	r2, #15
 8004360:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	fa92 f2a2 	rbit	r2, r2
 8004368:	60fa      	str	r2, [r7, #12]
  return result;
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	40d3      	lsrs	r3, r2
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004384:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	fbb2 f2f3 	udiv	r2, r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	623b      	str	r3, [r7, #32]
      break;
 80043a4:	e002      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043a8:	623b      	str	r3, [r7, #32]
      break;
 80043aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ac:	6a3b      	ldr	r3, [r7, #32]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	372c      	adds	r7, #44	; 0x2c
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	01e84800 	.word	0x01e84800
 80043c4:	080066fc 	.word	0x080066fc
 80043c8:	0800670c 	.word	0x0800670c
 80043cc:	003d0900 	.word	0x003d0900
 80043d0:	007a1200 	.word	0x007a1200

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000040 	.word	0x20000040

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043f2:	f7ff ffef 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f6:	4601      	mov	r1, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004400:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004404:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	fa92 f2a2 	rbit	r2, r2
 800440c:	603a      	str	r2, [r7, #0]
  return result;
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	40d3      	lsrs	r3, r2
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_RCC_GetPCLK1Freq+0x40>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	080066f4 	.word	0x080066f4

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004436:	f7ff ffcd 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004444:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004448:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	fa92 f2a2 	rbit	r2, r2
 8004450:	603a      	str	r2, [r7, #0]
  return result;
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	fab2 f282 	clz	r2, r2
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	40d3      	lsrs	r3, r2
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x40>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	080066f4 	.word	0x080066f4

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b092      	sub	sp, #72	; 0x48
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80cd 	beq.w	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004498:	4b86      	ldr	r3, [pc, #536]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10e      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a82      	ldr	r2, [pc, #520]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	4b80      	ldr	r3, [pc, #512]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b7d      	ldr	r3, [pc, #500]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	4b7a      	ldr	r3, [pc, #488]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a79      	ldr	r2, [pc, #484]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fd fa45 	bl	8001968 <HAL_GetTick>
 80044de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd fa41 	bl	8001968 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0db      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004500:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d07d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800451a:	429a      	cmp	r2, r3
 800451c:	d076      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	4b5e      	ldr	r3, [pc, #376]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	2301      	movs	r3, #1
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004570:	4a50      	ldr	r2, [pc, #320]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d045      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd f9f2 	bl	8001968 <HAL_GetTick>
 8004584:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fd f9ee 	bl	8001968 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e086      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 800459e:	2302      	movs	r3, #2
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	2302      	movs	r3, #2
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	61fb      	str	r3, [r7, #28]
  return result;
 80045b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d102      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	e007      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2202      	movs	r2, #2
 80045e4:	613a      	str	r2, [r7, #16]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	60fa      	str	r2, [r7, #12]
  return result;
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f002 021f 	and.w	r2, r2, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0bd      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800460c:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4926      	ldr	r1, [pc, #152]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	4313      	orrs	r3, r2
 800461c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800461e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	491a      	ldr	r1, [pc, #104]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f023 0210 	bic.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4912      	ldr	r1, [pc, #72]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800466a:	4313      	orrs	r3, r2
 800466c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	490b      	ldr	r1, [pc, #44]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004688:	4313      	orrs	r3, r2
 800468a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3748      	adds	r7, #72	; 0x48
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	10908100 	.word	0x10908100

080046c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e095      	b.n	80047fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d108      	bne.n	80046ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e2:	d009      	beq.n	80046f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
 80046ea:	e005      	b.n	80046f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc ff38 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004738:	d902      	bls.n	8004740 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e002      	b.n	8004746 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004744:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800474e:	d007      	beq.n	8004760 <HAL_SPI_Init+0xa0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004758:	d002      	beq.n	8004760 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	f003 0204 	and.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047dc:	ea42 0103 	orr.w	r1, r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_SPI_Transmit_DMA+0x20>
 8004824:	2302      	movs	r3, #2
 8004826:	e0d4      	b.n	80049d2 <HAL_SPI_Transmit_DMA+0x1ca>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d002      	beq.n	8004842 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800483c:	2302      	movs	r3, #2
 800483e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004840:	e0c2      	b.n	80049c8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit_DMA+0x46>
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004852:	e0b9      	b.n	80049c8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2203      	movs	r2, #3
 8004858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489e:	d10f      	bne.n	80048c0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	4a45      	ldr	r2, [pc, #276]	; (80049dc <HAL_SPI_Transmit_DMA+0x1d4>)
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	4a44      	ldr	r2, [pc, #272]	; (80049e0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	4a43      	ldr	r2, [pc, #268]	; (80049e4 <HAL_SPI_Transmit_DMA+0x1dc>)
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2200      	movs	r2, #0
 80048de:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ee:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f8:	d82d      	bhi.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d127      	bne.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004922:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004928:	b29b      	uxth	r3, r3
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004932:	e010      	b.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004942:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	3301      	adds	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4619      	mov	r1, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800496e:	f7fd fa7f 	bl	8001e70 <HAL_DMA_Start_IT>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	f043 0210 	orr.w	r2, r3, #16
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004988:	e01e      	b.n	80049c8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d007      	beq.n	80049a8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0220 	orr.w	r2, r2, #32
 80049b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0202 	orr.w	r2, r2, #2
 80049c6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	08004acb 	.word	0x08004acb
 80049e0:	08004a25 	.word	0x08004a25
 80049e4:	08004ae7 	.word	0x08004ae7

080049e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a32:	f7fc ff99 	bl	8001968 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d03b      	beq.n	8004abe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0220 	bic.w	r2, r2, #32
 8004a54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0202 	bic.w	r2, r2, #2
 8004a64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	2164      	movs	r1, #100	; 0x64
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f000 f97a 	bl	8004d64 <SPI_EndRxTxTransaction>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f7ff ffaa 	bl	8004a10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004abc:	e002      	b.n	8004ac4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff ff92 	bl	80049e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff ff8f 	bl	80049fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0203 	bic.w	r2, r2, #3
 8004b02:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	f043 0210 	orr.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff ff79 	bl	8004a10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b38:	f7fc ff16 	bl	8001968 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b48:	f7fc ff0e 	bl	8001968 <HAL_GetTick>
 8004b4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b4e:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	015b      	lsls	r3, r3, #5
 8004b54:	0d1b      	lsrs	r3, r3, #20
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	e054      	b.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d050      	beq.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b68:	f7fc fefe 	bl	8001968 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d902      	bls.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d13d      	bne.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b96:	d111      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba0:	d004      	beq.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004baa:	d107      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc4:	d10f      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e017      	b.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d19b      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000040 	.word	0x20000040

08004c38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c4a:	f7fc fe8d 	bl	8001968 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c5a:	f7fc fe85 	bl	8001968 <HAL_GetTick>
 8004c5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c68:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00da      	lsls	r2, r3, #3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	0d1b      	lsrs	r3, r3, #20
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c80:	e060      	b.n	8004d44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c88:	d107      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d050      	beq.n	8004d44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ca2:	f7fc fe61 	bl	8001968 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d902      	bls.n	8004cb8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d13d      	bne.n	8004d34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd0:	d111      	bne.n	8004cf6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cda:	d004      	beq.n	8004ce6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d107      	bne.n	8004cf6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	d10f      	bne.n	8004d20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e010      	b.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d196      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3728      	adds	r7, #40	; 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000040 	.word	0x20000040

08004d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff ff5b 	bl	8004c38 <SPI_WaitFifoStateUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e027      	b.n	8004de8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fec0 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e014      	b.n	8004de8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff34 	bl	8004c38 <SPI_WaitFifoStateUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e000      	b.n	8004de8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e040      	b.n	8004e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fc24 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f82c 	bl	8004e8c <UART_SetConfig>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e022      	b.n	8004e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f956 	bl	80050f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9dd 	bl	800523c <UART_CheckIdleState>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8a      	ldr	r3, [pc, #552]	; (80050e0 <UART_SetConfig+0x254>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a78      	ldr	r2, [pc, #480]	; (80050e4 <UART_SetConfig+0x258>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <UART_SetConfig+0xbe>
 8004f08:	4b77      	ldr	r3, [pc, #476]	; (80050e8 <UART_SetConfig+0x25c>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d817      	bhi.n	8004f44 <UART_SetConfig+0xb8>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x90>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f3f 	.word	0x08004f3f
 8004f28:	08004f33 	.word	0x08004f33
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e01d      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e01a      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e017      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e014      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e011      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a67      	ldr	r2, [pc, #412]	; (80050ec <UART_SetConfig+0x260>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d102      	bne.n	8004f5a <UART_SetConfig+0xce>
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a64      	ldr	r2, [pc, #400]	; (80050f0 <UART_SetConfig+0x264>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d102      	bne.n	8004f6a <UART_SetConfig+0xde>
 8004f64:	2300      	movs	r3, #0
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e001      	b.n	8004f6e <UART_SetConfig+0xe2>
 8004f6a:	2310      	movs	r3, #16
 8004f6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d15a      	bne.n	800502e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f78:	7ffb      	ldrb	r3, [r7, #31]
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d827      	bhi.n	8004fce <UART_SetConfig+0x142>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0xf8>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7ff fa20 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8004fac:	61b8      	str	r0, [r7, #24]
        break;
 8004fae:	e013      	b.n	8004fd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7ff fa3e 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	61b8      	str	r0, [r7, #24]
        break;
 8004fb6:	e00f      	b.n	8004fd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b4e      	ldr	r3, [pc, #312]	; (80050f4 <UART_SetConfig+0x268>)
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e00c      	b.n	8004fd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7ff f99d 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8004fc2:	61b8      	str	r0, [r7, #24]
        break;
 8004fc4:	e008      	b.n	8004fd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	61bb      	str	r3, [r7, #24]
        break;
 8004fcc:	e004      	b.n	8004fd8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004fd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d074      	beq.n	80050c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	005a      	lsls	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	441a      	add	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d916      	bls.n	8005028 <UART_SetConfig+0x19c>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d212      	bcs.n	8005028 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f023 030f 	bic.w	r3, r3, #15
 800500a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	b29a      	uxth	r2, r3
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	4313      	orrs	r3, r2
 800501c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	89fa      	ldrh	r2, [r7, #14]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	e04f      	b.n	80050c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	77bb      	strb	r3, [r7, #30]
 800502c:	e04c      	b.n	80050c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d828      	bhi.n	8005086 <UART_SetConfig+0x1fa>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x1b0>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	08005087 	.word	0x08005087
 800504c:	08005077 	.word	0x08005077
 8005050:	08005087 	.word	0x08005087
 8005054:	08005087 	.word	0x08005087
 8005058:	08005087 	.word	0x08005087
 800505c:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7ff f9c4 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e013      	b.n	8005090 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7ff f9e2 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 800506c:	61b8      	str	r0, [r7, #24]
        break;
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <UART_SetConfig+0x268>)
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e00c      	b.n	8005090 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7ff f941 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 800507a:	61b8      	str	r0, [r7, #24]
        break;
 800507c:	e008      	b.n	8005090 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	61bb      	str	r3, [r7, #24]
        break;
 8005084:	e004      	b.n	8005090 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	77bb      	strb	r3, [r7, #30]
        break;
 800508e:	bf00      	nop
    }

    if (pclk != 0U)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085a      	lsrs	r2, r3, #1
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d909      	bls.n	80050c4 <UART_SetConfig+0x238>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b6:	d205      	bcs.n	80050c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e001      	b.n	80050c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	efff69f3 	.word	0xefff69f3
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40004400 	.word	0x40004400
 80050f0:	40004800 	.word	0x40004800
 80050f4:	007a1200 	.word	0x007a1200

080050f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01a      	beq.n	800520e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f6:	d10a      	bne.n	800520e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b098      	sub	sp, #96	; 0x60
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800524c:	f7fc fb8c 	bl	8001968 <HAL_GetTick>
 8005250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d12e      	bne.n	80052be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f88c 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d021      	beq.n	80052be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800529e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e062      	b.n	8005384 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d149      	bne.n	8005360 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f856 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03c      	beq.n	8005360 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	623b      	str	r3, [r7, #32]
   return(result);
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
 8005306:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60fb      	str	r3, [r7, #12]
   return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e011      	b.n	8005384 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3758      	adds	r7, #88	; 0x58
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539c:	e049      	b.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d045      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fc fadf 	bl	8001968 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <UART_WaitOnFlagUntilTimeout+0x30>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e048      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d031      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d110      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f838 	bl	800545a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2208      	movs	r2, #8
 80053ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e029      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	d111      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f81e 	bl	800545a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	429a      	cmp	r2, r3
 800544e:	d0a6      	beq.n	800539e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b095      	sub	sp, #84	; 0x54
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d118      	bne.n	8005502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005516:	bf00      	nop
 8005518:	3754      	adds	r7, #84	; 0x54
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <calloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <calloc+0xc>)
 8005526:	460a      	mov	r2, r1
 8005528:	4601      	mov	r1, r0
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	f000 b83c 	b.w	80055a8 <_calloc_r>
 8005530:	2000004c 	.word	0x2000004c

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000004c 	.word	0x2000004c

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	; (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	; (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	; (8005584 <__libc_init_array+0x44>)
 8005554:	f001 f856 	bl	8006604 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	08006750 	.word	0x08006750
 800557c:	08006750 	.word	0x08006750
 8005580:	08006750 	.word	0x08006750
 8005584:	08006754 	.word	0x08006754

08005588 <free>:
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <free+0xc>)
 800558a:	4601      	mov	r1, r0
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f000 b821 	b.w	80055d4 <_free_r>
 8005592:	bf00      	nop
 8005594:	2000004c 	.word	0x2000004c

08005598 <memset>:
 8005598:	4402      	add	r2, r0
 800559a:	4603      	mov	r3, r0
 800559c:	4293      	cmp	r3, r2
 800559e:	d100      	bne.n	80055a2 <memset+0xa>
 80055a0:	4770      	bx	lr
 80055a2:	f803 1b01 	strb.w	r1, [r3], #1
 80055a6:	e7f9      	b.n	800559c <memset+0x4>

080055a8 <_calloc_r>:
 80055a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055aa:	fba1 2402 	umull	r2, r4, r1, r2
 80055ae:	b94c      	cbnz	r4, 80055c4 <_calloc_r+0x1c>
 80055b0:	4611      	mov	r1, r2
 80055b2:	9201      	str	r2, [sp, #4]
 80055b4:	f000 f87a 	bl	80056ac <_malloc_r>
 80055b8:	9a01      	ldr	r2, [sp, #4]
 80055ba:	4605      	mov	r5, r0
 80055bc:	b930      	cbnz	r0, 80055cc <_calloc_r+0x24>
 80055be:	4628      	mov	r0, r5
 80055c0:	b003      	add	sp, #12
 80055c2:	bd30      	pop	{r4, r5, pc}
 80055c4:	220c      	movs	r2, #12
 80055c6:	6002      	str	r2, [r0, #0]
 80055c8:	2500      	movs	r5, #0
 80055ca:	e7f8      	b.n	80055be <_calloc_r+0x16>
 80055cc:	4621      	mov	r1, r4
 80055ce:	f7ff ffe3 	bl	8005598 <memset>
 80055d2:	e7f4      	b.n	80055be <_calloc_r+0x16>

080055d4 <_free_r>:
 80055d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d044      	beq.n	8005664 <_free_r+0x90>
 80055da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055de:	9001      	str	r0, [sp, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f1a1 0404 	sub.w	r4, r1, #4
 80055e6:	bfb8      	it	lt
 80055e8:	18e4      	addlt	r4, r4, r3
 80055ea:	f000 f8e3 	bl	80057b4 <__malloc_lock>
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <_free_r+0x94>)
 80055f0:	9801      	ldr	r0, [sp, #4]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	b933      	cbnz	r3, 8005604 <_free_r+0x30>
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	b003      	add	sp, #12
 80055fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005600:	f000 b8de 	b.w	80057c0 <__malloc_unlock>
 8005604:	42a3      	cmp	r3, r4
 8005606:	d908      	bls.n	800561a <_free_r+0x46>
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	1961      	adds	r1, r4, r5
 800560c:	428b      	cmp	r3, r1
 800560e:	bf01      	itttt	eq
 8005610:	6819      	ldreq	r1, [r3, #0]
 8005612:	685b      	ldreq	r3, [r3, #4]
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	e7ed      	b.n	80055f6 <_free_r+0x22>
 800561a:	461a      	mov	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b10b      	cbz	r3, 8005624 <_free_r+0x50>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d9fa      	bls.n	800561a <_free_r+0x46>
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	1855      	adds	r5, r2, r1
 8005628:	42a5      	cmp	r5, r4
 800562a:	d10b      	bne.n	8005644 <_free_r+0x70>
 800562c:	6824      	ldr	r4, [r4, #0]
 800562e:	4421      	add	r1, r4
 8005630:	1854      	adds	r4, r2, r1
 8005632:	42a3      	cmp	r3, r4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	d1e0      	bne.n	80055fa <_free_r+0x26>
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6053      	str	r3, [r2, #4]
 800563e:	4421      	add	r1, r4
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	e7da      	b.n	80055fa <_free_r+0x26>
 8005644:	d902      	bls.n	800564c <_free_r+0x78>
 8005646:	230c      	movs	r3, #12
 8005648:	6003      	str	r3, [r0, #0]
 800564a:	e7d6      	b.n	80055fa <_free_r+0x26>
 800564c:	6825      	ldr	r5, [r4, #0]
 800564e:	1961      	adds	r1, r4, r5
 8005650:	428b      	cmp	r3, r1
 8005652:	bf04      	itt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	bf04      	itt	eq
 800565c:	1949      	addeq	r1, r1, r5
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6054      	str	r4, [r2, #4]
 8005662:	e7ca      	b.n	80055fa <_free_r+0x26>
 8005664:	b003      	add	sp, #12
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	20000288 	.word	0x20000288

0800566c <sbrk_aligned>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4e0e      	ldr	r6, [pc, #56]	; (80056a8 <sbrk_aligned+0x3c>)
 8005670:	460c      	mov	r4, r1
 8005672:	6831      	ldr	r1, [r6, #0]
 8005674:	4605      	mov	r5, r0
 8005676:	b911      	cbnz	r1, 800567e <sbrk_aligned+0x12>
 8005678:	f000 f88c 	bl	8005794 <_sbrk_r>
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	4621      	mov	r1, r4
 8005680:	4628      	mov	r0, r5
 8005682:	f000 f887 	bl	8005794 <_sbrk_r>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d00a      	beq.n	80056a0 <sbrk_aligned+0x34>
 800568a:	1cc4      	adds	r4, r0, #3
 800568c:	f024 0403 	bic.w	r4, r4, #3
 8005690:	42a0      	cmp	r0, r4
 8005692:	d007      	beq.n	80056a4 <sbrk_aligned+0x38>
 8005694:	1a21      	subs	r1, r4, r0
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f87c 	bl	8005794 <_sbrk_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d101      	bne.n	80056a4 <sbrk_aligned+0x38>
 80056a0:	f04f 34ff 	mov.w	r4, #4294967295
 80056a4:	4620      	mov	r0, r4
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	2000028c 	.word	0x2000028c

080056ac <_malloc_r>:
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	1ccd      	adds	r5, r1, #3
 80056b2:	f025 0503 	bic.w	r5, r5, #3
 80056b6:	3508      	adds	r5, #8
 80056b8:	2d0c      	cmp	r5, #12
 80056ba:	bf38      	it	cc
 80056bc:	250c      	movcc	r5, #12
 80056be:	2d00      	cmp	r5, #0
 80056c0:	4607      	mov	r7, r0
 80056c2:	db01      	blt.n	80056c8 <_malloc_r+0x1c>
 80056c4:	42a9      	cmp	r1, r5
 80056c6:	d905      	bls.n	80056d4 <_malloc_r+0x28>
 80056c8:	230c      	movs	r3, #12
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	2600      	movs	r6, #0
 80056ce:	4630      	mov	r0, r6
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d4:	4e2e      	ldr	r6, [pc, #184]	; (8005790 <_malloc_r+0xe4>)
 80056d6:	f000 f86d 	bl	80057b4 <__malloc_lock>
 80056da:	6833      	ldr	r3, [r6, #0]
 80056dc:	461c      	mov	r4, r3
 80056de:	bb34      	cbnz	r4, 800572e <_malloc_r+0x82>
 80056e0:	4629      	mov	r1, r5
 80056e2:	4638      	mov	r0, r7
 80056e4:	f7ff ffc2 	bl	800566c <sbrk_aligned>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	4604      	mov	r4, r0
 80056ec:	d14d      	bne.n	800578a <_malloc_r+0xde>
 80056ee:	6834      	ldr	r4, [r6, #0]
 80056f0:	4626      	mov	r6, r4
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	d140      	bne.n	8005778 <_malloc_r+0xcc>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4631      	mov	r1, r6
 80056fa:	4638      	mov	r0, r7
 80056fc:	eb04 0803 	add.w	r8, r4, r3
 8005700:	f000 f848 	bl	8005794 <_sbrk_r>
 8005704:	4580      	cmp	r8, r0
 8005706:	d13a      	bne.n	800577e <_malloc_r+0xd2>
 8005708:	6821      	ldr	r1, [r4, #0]
 800570a:	3503      	adds	r5, #3
 800570c:	1a6d      	subs	r5, r5, r1
 800570e:	f025 0503 	bic.w	r5, r5, #3
 8005712:	3508      	adds	r5, #8
 8005714:	2d0c      	cmp	r5, #12
 8005716:	bf38      	it	cc
 8005718:	250c      	movcc	r5, #12
 800571a:	4629      	mov	r1, r5
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ffa5 	bl	800566c <sbrk_aligned>
 8005722:	3001      	adds	r0, #1
 8005724:	d02b      	beq.n	800577e <_malloc_r+0xd2>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	442b      	add	r3, r5
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	e00e      	b.n	800574c <_malloc_r+0xa0>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	1b52      	subs	r2, r2, r5
 8005732:	d41e      	bmi.n	8005772 <_malloc_r+0xc6>
 8005734:	2a0b      	cmp	r2, #11
 8005736:	d916      	bls.n	8005766 <_malloc_r+0xba>
 8005738:	1961      	adds	r1, r4, r5
 800573a:	42a3      	cmp	r3, r4
 800573c:	6025      	str	r5, [r4, #0]
 800573e:	bf18      	it	ne
 8005740:	6059      	strne	r1, [r3, #4]
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	bf08      	it	eq
 8005746:	6031      	streq	r1, [r6, #0]
 8005748:	5162      	str	r2, [r4, r5]
 800574a:	604b      	str	r3, [r1, #4]
 800574c:	4638      	mov	r0, r7
 800574e:	f104 060b 	add.w	r6, r4, #11
 8005752:	f000 f835 	bl	80057c0 <__malloc_unlock>
 8005756:	f026 0607 	bic.w	r6, r6, #7
 800575a:	1d23      	adds	r3, r4, #4
 800575c:	1af2      	subs	r2, r6, r3
 800575e:	d0b6      	beq.n	80056ce <_malloc_r+0x22>
 8005760:	1b9b      	subs	r3, r3, r6
 8005762:	50a3      	str	r3, [r4, r2]
 8005764:	e7b3      	b.n	80056ce <_malloc_r+0x22>
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	42a3      	cmp	r3, r4
 800576a:	bf0c      	ite	eq
 800576c:	6032      	streq	r2, [r6, #0]
 800576e:	605a      	strne	r2, [r3, #4]
 8005770:	e7ec      	b.n	800574c <_malloc_r+0xa0>
 8005772:	4623      	mov	r3, r4
 8005774:	6864      	ldr	r4, [r4, #4]
 8005776:	e7b2      	b.n	80056de <_malloc_r+0x32>
 8005778:	4634      	mov	r4, r6
 800577a:	6876      	ldr	r6, [r6, #4]
 800577c:	e7b9      	b.n	80056f2 <_malloc_r+0x46>
 800577e:	230c      	movs	r3, #12
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4638      	mov	r0, r7
 8005784:	f000 f81c 	bl	80057c0 <__malloc_unlock>
 8005788:	e7a1      	b.n	80056ce <_malloc_r+0x22>
 800578a:	6025      	str	r5, [r4, #0]
 800578c:	e7de      	b.n	800574c <_malloc_r+0xa0>
 800578e:	bf00      	nop
 8005790:	20000288 	.word	0x20000288

08005794 <_sbrk_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d06      	ldr	r5, [pc, #24]	; (80057b0 <_sbrk_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb ffd6 	bl	8001750 <_sbrk>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_sbrk_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_sbrk_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20000290 	.word	0x20000290

080057b4 <__malloc_lock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_lock+0x8>)
 80057b6:	f000 b809 	b.w	80057cc <__retarget_lock_acquire_recursive>
 80057ba:	bf00      	nop
 80057bc:	20000294 	.word	0x20000294

080057c0 <__malloc_unlock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_unlock+0x8>)
 80057c2:	f000 b804 	b.w	80057ce <__retarget_lock_release_recursive>
 80057c6:	bf00      	nop
 80057c8:	20000294 	.word	0x20000294

080057cc <__retarget_lock_acquire_recursive>:
 80057cc:	4770      	bx	lr

080057ce <__retarget_lock_release_recursive>:
 80057ce:	4770      	bx	lr

080057d0 <pow>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	ed2d 8b02 	vpush	{d8}
 80057d6:	eeb0 8a40 	vmov.f32	s16, s0
 80057da:	eef0 8a60 	vmov.f32	s17, s1
 80057de:	ec55 4b11 	vmov	r4, r5, d1
 80057e2:	f000 f865 	bl	80058b0 <__ieee754_pow>
 80057e6:	4622      	mov	r2, r4
 80057e8:	462b      	mov	r3, r5
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	ec57 6b10 	vmov	r6, r7, d0
 80057f2:	f7fb f93f 	bl	8000a74 <__aeabi_dcmpun>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d13b      	bne.n	8005872 <pow+0xa2>
 80057fa:	ec51 0b18 	vmov	r0, r1, d8
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	f7fb f905 	bl	8000a10 <__aeabi_dcmpeq>
 8005806:	b1b8      	cbz	r0, 8005838 <pow+0x68>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4620      	mov	r0, r4
 800580e:	4629      	mov	r1, r5
 8005810:	f7fb f8fe 	bl	8000a10 <__aeabi_dcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d146      	bne.n	80058a6 <pow+0xd6>
 8005818:	ec45 4b10 	vmov	d0, r4, r5
 800581c:	f000 fe61 	bl	80064e2 <finite>
 8005820:	b338      	cbz	r0, 8005872 <pow+0xa2>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	f7fb f8fb 	bl	8000a24 <__aeabi_dcmplt>
 800582e:	b300      	cbz	r0, 8005872 <pow+0xa2>
 8005830:	f7ff fe80 	bl	8005534 <__errno>
 8005834:	2322      	movs	r3, #34	; 0x22
 8005836:	e01b      	b.n	8005870 <pow+0xa0>
 8005838:	ec47 6b10 	vmov	d0, r6, r7
 800583c:	f000 fe51 	bl	80064e2 <finite>
 8005840:	b9e0      	cbnz	r0, 800587c <pow+0xac>
 8005842:	eeb0 0a48 	vmov.f32	s0, s16
 8005846:	eef0 0a68 	vmov.f32	s1, s17
 800584a:	f000 fe4a 	bl	80064e2 <finite>
 800584e:	b1a8      	cbz	r0, 800587c <pow+0xac>
 8005850:	ec45 4b10 	vmov	d0, r4, r5
 8005854:	f000 fe45 	bl	80064e2 <finite>
 8005858:	b180      	cbz	r0, 800587c <pow+0xac>
 800585a:	4632      	mov	r2, r6
 800585c:	463b      	mov	r3, r7
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fb f907 	bl	8000a74 <__aeabi_dcmpun>
 8005866:	2800      	cmp	r0, #0
 8005868:	d0e2      	beq.n	8005830 <pow+0x60>
 800586a:	f7ff fe63 	bl	8005534 <__errno>
 800586e:	2321      	movs	r3, #33	; 0x21
 8005870:	6003      	str	r3, [r0, #0]
 8005872:	ecbd 8b02 	vpop	{d8}
 8005876:	ec47 6b10 	vmov	d0, r6, r7
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	4630      	mov	r0, r6
 8005882:	4639      	mov	r1, r7
 8005884:	f7fb f8c4 	bl	8000a10 <__aeabi_dcmpeq>
 8005888:	2800      	cmp	r0, #0
 800588a:	d0f2      	beq.n	8005872 <pow+0xa2>
 800588c:	eeb0 0a48 	vmov.f32	s0, s16
 8005890:	eef0 0a68 	vmov.f32	s1, s17
 8005894:	f000 fe25 	bl	80064e2 <finite>
 8005898:	2800      	cmp	r0, #0
 800589a:	d0ea      	beq.n	8005872 <pow+0xa2>
 800589c:	ec45 4b10 	vmov	d0, r4, r5
 80058a0:	f000 fe1f 	bl	80064e2 <finite>
 80058a4:	e7c3      	b.n	800582e <pow+0x5e>
 80058a6:	4f01      	ldr	r7, [pc, #4]	; (80058ac <pow+0xdc>)
 80058a8:	2600      	movs	r6, #0
 80058aa:	e7e2      	b.n	8005872 <pow+0xa2>
 80058ac:	3ff00000 	.word	0x3ff00000

080058b0 <__ieee754_pow>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	ed2d 8b06 	vpush	{d8-d10}
 80058b8:	b089      	sub	sp, #36	; 0x24
 80058ba:	ed8d 1b00 	vstr	d1, [sp]
 80058be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80058c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80058c6:	ea58 0102 	orrs.w	r1, r8, r2
 80058ca:	ec57 6b10 	vmov	r6, r7, d0
 80058ce:	d115      	bne.n	80058fc <__ieee754_pow+0x4c>
 80058d0:	19b3      	adds	r3, r6, r6
 80058d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80058d6:	4152      	adcs	r2, r2
 80058d8:	4299      	cmp	r1, r3
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <__ieee754_pow+0x250>)
 80058dc:	4193      	sbcs	r3, r2
 80058de:	f080 84d2 	bcs.w	8006286 <__ieee754_pow+0x9d6>
 80058e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa fc73 	bl	80001d4 <__adddf3>
 80058ee:	ec41 0b10 	vmov	d0, r0, r1
 80058f2:	b009      	add	sp, #36	; 0x24
 80058f4:	ecbd 8b06 	vpop	{d8-d10}
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	4b81      	ldr	r3, [pc, #516]	; (8005b04 <__ieee754_pow+0x254>)
 80058fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005902:	429c      	cmp	r4, r3
 8005904:	ee10 aa10 	vmov	sl, s0
 8005908:	463d      	mov	r5, r7
 800590a:	dc06      	bgt.n	800591a <__ieee754_pow+0x6a>
 800590c:	d101      	bne.n	8005912 <__ieee754_pow+0x62>
 800590e:	2e00      	cmp	r6, #0
 8005910:	d1e7      	bne.n	80058e2 <__ieee754_pow+0x32>
 8005912:	4598      	cmp	r8, r3
 8005914:	dc01      	bgt.n	800591a <__ieee754_pow+0x6a>
 8005916:	d10f      	bne.n	8005938 <__ieee754_pow+0x88>
 8005918:	b172      	cbz	r2, 8005938 <__ieee754_pow+0x88>
 800591a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800591e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005922:	ea55 050a 	orrs.w	r5, r5, sl
 8005926:	d1dc      	bne.n	80058e2 <__ieee754_pow+0x32>
 8005928:	e9dd 3200 	ldrd	r3, r2, [sp]
 800592c:	18db      	adds	r3, r3, r3
 800592e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005932:	4152      	adcs	r2, r2
 8005934:	429d      	cmp	r5, r3
 8005936:	e7d0      	b.n	80058da <__ieee754_pow+0x2a>
 8005938:	2d00      	cmp	r5, #0
 800593a:	da3b      	bge.n	80059b4 <__ieee754_pow+0x104>
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <__ieee754_pow+0x258>)
 800593e:	4598      	cmp	r8, r3
 8005940:	dc51      	bgt.n	80059e6 <__ieee754_pow+0x136>
 8005942:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005946:	4598      	cmp	r8, r3
 8005948:	f340 84ac 	ble.w	80062a4 <__ieee754_pow+0x9f4>
 800594c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005950:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005954:	2b14      	cmp	r3, #20
 8005956:	dd0f      	ble.n	8005978 <__ieee754_pow+0xc8>
 8005958:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800595c:	fa22 f103 	lsr.w	r1, r2, r3
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	4293      	cmp	r3, r2
 8005966:	f040 849d 	bne.w	80062a4 <__ieee754_pow+0x9f4>
 800596a:	f001 0101 	and.w	r1, r1, #1
 800596e:	f1c1 0302 	rsb	r3, r1, #2
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	b182      	cbz	r2, 8005998 <__ieee754_pow+0xe8>
 8005976:	e05f      	b.n	8005a38 <__ieee754_pow+0x188>
 8005978:	2a00      	cmp	r2, #0
 800597a:	d15b      	bne.n	8005a34 <__ieee754_pow+0x184>
 800597c:	f1c3 0314 	rsb	r3, r3, #20
 8005980:	fa48 f103 	asr.w	r1, r8, r3
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	4543      	cmp	r3, r8
 800598a:	f040 8488 	bne.w	800629e <__ieee754_pow+0x9ee>
 800598e:	f001 0101 	and.w	r1, r1, #1
 8005992:	f1c1 0302 	rsb	r3, r1, #2
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	4b5c      	ldr	r3, [pc, #368]	; (8005b0c <__ieee754_pow+0x25c>)
 800599a:	4598      	cmp	r8, r3
 800599c:	d132      	bne.n	8005a04 <__ieee754_pow+0x154>
 800599e:	f1b9 0f00 	cmp.w	r9, #0
 80059a2:	f280 8478 	bge.w	8006296 <__ieee754_pow+0x9e6>
 80059a6:	4959      	ldr	r1, [pc, #356]	; (8005b0c <__ieee754_pow+0x25c>)
 80059a8:	4632      	mov	r2, r6
 80059aa:	463b      	mov	r3, r7
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fa fef1 	bl	8000794 <__aeabi_ddiv>
 80059b2:	e79c      	b.n	80058ee <__ieee754_pow+0x3e>
 80059b4:	2300      	movs	r3, #0
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	2a00      	cmp	r2, #0
 80059ba:	d13d      	bne.n	8005a38 <__ieee754_pow+0x188>
 80059bc:	4b51      	ldr	r3, [pc, #324]	; (8005b04 <__ieee754_pow+0x254>)
 80059be:	4598      	cmp	r8, r3
 80059c0:	d1ea      	bne.n	8005998 <__ieee754_pow+0xe8>
 80059c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80059c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059ca:	ea53 030a 	orrs.w	r3, r3, sl
 80059ce:	f000 845a 	beq.w	8006286 <__ieee754_pow+0x9d6>
 80059d2:	4b4f      	ldr	r3, [pc, #316]	; (8005b10 <__ieee754_pow+0x260>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	dd08      	ble.n	80059ea <__ieee754_pow+0x13a>
 80059d8:	f1b9 0f00 	cmp.w	r9, #0
 80059dc:	f2c0 8457 	blt.w	800628e <__ieee754_pow+0x9de>
 80059e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e4:	e783      	b.n	80058ee <__ieee754_pow+0x3e>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e7e5      	b.n	80059b6 <__ieee754_pow+0x106>
 80059ea:	f1b9 0f00 	cmp.w	r9, #0
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	f6bf af7a 	bge.w	80058ee <__ieee754_pow+0x3e>
 80059fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80059fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a02:	e774      	b.n	80058ee <__ieee754_pow+0x3e>
 8005a04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005a08:	d106      	bne.n	8005a18 <__ieee754_pow+0x168>
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	4630      	mov	r0, r6
 8005a10:	4639      	mov	r1, r7
 8005a12:	f7fa fd95 	bl	8000540 <__aeabi_dmul>
 8005a16:	e76a      	b.n	80058ee <__ieee754_pow+0x3e>
 8005a18:	4b3e      	ldr	r3, [pc, #248]	; (8005b14 <__ieee754_pow+0x264>)
 8005a1a:	4599      	cmp	r9, r3
 8005a1c:	d10c      	bne.n	8005a38 <__ieee754_pow+0x188>
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	db0a      	blt.n	8005a38 <__ieee754_pow+0x188>
 8005a22:	ec47 6b10 	vmov	d0, r6, r7
 8005a26:	b009      	add	sp, #36	; 0x24
 8005a28:	ecbd 8b06 	vpop	{d8-d10}
 8005a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	f000 bc6c 	b.w	800630c <__ieee754_sqrt>
 8005a34:	2300      	movs	r3, #0
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	ec47 6b10 	vmov	d0, r6, r7
 8005a3c:	f000 fd48 	bl	80064d0 <fabs>
 8005a40:	ec51 0b10 	vmov	r0, r1, d0
 8005a44:	f1ba 0f00 	cmp.w	sl, #0
 8005a48:	d129      	bne.n	8005a9e <__ieee754_pow+0x1ee>
 8005a4a:	b124      	cbz	r4, 8005a56 <__ieee754_pow+0x1a6>
 8005a4c:	4b2f      	ldr	r3, [pc, #188]	; (8005b0c <__ieee754_pow+0x25c>)
 8005a4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d123      	bne.n	8005a9e <__ieee754_pow+0x1ee>
 8005a56:	f1b9 0f00 	cmp.w	r9, #0
 8005a5a:	da05      	bge.n	8005a68 <__ieee754_pow+0x1b8>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	2000      	movs	r0, #0
 8005a62:	492a      	ldr	r1, [pc, #168]	; (8005b0c <__ieee754_pow+0x25c>)
 8005a64:	f7fa fe96 	bl	8000794 <__aeabi_ddiv>
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	f6bf af40 	bge.w	80058ee <__ieee754_pow+0x3e>
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a78:	4323      	orrs	r3, r4
 8005a7a:	d108      	bne.n	8005a8e <__ieee754_pow+0x1de>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7fa fba4 	bl	80001d0 <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	e78f      	b.n	80059ae <__ieee754_pow+0xfe>
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f47f af2c 	bne.w	80058ee <__ieee754_pow+0x3e>
 8005a96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	e727      	b.n	80058ee <__ieee754_pow+0x3e>
 8005a9e:	0feb      	lsrs	r3, r5, #31
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	9306      	str	r3, [sp, #24]
 8005aa4:	9a06      	ldr	r2, [sp, #24]
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d102      	bne.n	8005ab2 <__ieee754_pow+0x202>
 8005aac:	4632      	mov	r2, r6
 8005aae:	463b      	mov	r3, r7
 8005ab0:	e7e6      	b.n	8005a80 <__ieee754_pow+0x1d0>
 8005ab2:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <__ieee754_pow+0x268>)
 8005ab4:	4598      	cmp	r8, r3
 8005ab6:	f340 80fb 	ble.w	8005cb0 <__ieee754_pow+0x400>
 8005aba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005abe:	4598      	cmp	r8, r3
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <__ieee754_pow+0x260>)
 8005ac2:	dd0c      	ble.n	8005ade <__ieee754_pow+0x22e>
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	dc0f      	bgt.n	8005ae8 <__ieee754_pow+0x238>
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	da0f      	bge.n	8005aee <__ieee754_pow+0x23e>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	b009      	add	sp, #36	; 0x24
 8005ad2:	ecbd 8b06 	vpop	{d8-d10}
 8005ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f000 bcf0 	b.w	80064be <__math_oflow>
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	dbf2      	blt.n	8005ac8 <__ieee754_pow+0x218>
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <__ieee754_pow+0x25c>)
 8005ae4:	429c      	cmp	r4, r3
 8005ae6:	dd19      	ble.n	8005b1c <__ieee754_pow+0x26c>
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	dcef      	bgt.n	8005ace <__ieee754_pow+0x21e>
 8005aee:	2000      	movs	r0, #0
 8005af0:	b009      	add	sp, #36	; 0x24
 8005af2:	ecbd 8b06 	vpop	{d8-d10}
 8005af6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f000 bcd7 	b.w	80064ac <__math_uflow>
 8005afe:	bf00      	nop
 8005b00:	fff00000 	.word	0xfff00000
 8005b04:	7ff00000 	.word	0x7ff00000
 8005b08:	433fffff 	.word	0x433fffff
 8005b0c:	3ff00000 	.word	0x3ff00000
 8005b10:	3fefffff 	.word	0x3fefffff
 8005b14:	3fe00000 	.word	0x3fe00000
 8005b18:	41e00000 	.word	0x41e00000
 8005b1c:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <__ieee754_pow+0x3f0>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f7fa fb56 	bl	80001d0 <__aeabi_dsub>
 8005b24:	a354      	add	r3, pc, #336	; (adr r3, 8005c78 <__ieee754_pow+0x3c8>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	f7fa fd07 	bl	8000540 <__aeabi_dmul>
 8005b32:	a353      	add	r3, pc, #332	; (adr r3, 8005c80 <__ieee754_pow+0x3d0>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	4606      	mov	r6, r0
 8005b3a:	460f      	mov	r7, r1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fcfe 	bl	8000540 <__aeabi_dmul>
 8005b44:	4b57      	ldr	r3, [pc, #348]	; (8005ca4 <__ieee754_pow+0x3f4>)
 8005b46:	4682      	mov	sl, r0
 8005b48:	468b      	mov	fp, r1
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f7fa fcf6 	bl	8000540 <__aeabi_dmul>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	a14b      	add	r1, pc, #300	; (adr r1, 8005c88 <__ieee754_pow+0x3d8>)
 8005b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5e:	f7fa fb37 	bl	80001d0 <__aeabi_dsub>
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	f7fa fceb 	bl	8000540 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	2000      	movs	r0, #0
 8005b70:	494d      	ldr	r1, [pc, #308]	; (8005ca8 <__ieee754_pow+0x3f8>)
 8005b72:	f7fa fb2d 	bl	80001d0 <__aeabi_dsub>
 8005b76:	4622      	mov	r2, r4
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa fcdd 	bl	8000540 <__aeabi_dmul>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fa fcd7 	bl	8000540 <__aeabi_dmul>
 8005b92:	a33f      	add	r3, pc, #252	; (adr r3, 8005c90 <__ieee754_pow+0x3e0>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fcd2 	bl	8000540 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	4659      	mov	r1, fp
 8005ba4:	f7fa fb14 	bl	80001d0 <__aeabi_dsub>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4680      	mov	r8, r0
 8005bae:	4689      	mov	r9, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fb0e 	bl	80001d4 <__adddf3>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	4632      	mov	r2, r6
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	f7fa fb05 	bl	80001d0 <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa faff 	bl	80001d0 <__aeabi_dsub>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	9a06      	ldr	r2, [sp, #24]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	4682      	mov	sl, r0
 8005bdc:	468b      	mov	fp, r1
 8005bde:	f040 81e7 	bne.w	8005fb0 <__ieee754_pow+0x700>
 8005be2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005c98 <__ieee754_pow+0x3e8>
 8005be6:	eeb0 8a47 	vmov.f32	s16, s14
 8005bea:	eef0 8a67 	vmov.f32	s17, s15
 8005bee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bfc:	f7fa fae8 	bl	80001d0 <__aeabi_dsub>
 8005c00:	4622      	mov	r2, r4
 8005c02:	462b      	mov	r3, r5
 8005c04:	f7fa fc9c 	bl	8000540 <__aeabi_dmul>
 8005c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	4689      	mov	r9, r1
 8005c10:	4650      	mov	r0, sl
 8005c12:	4659      	mov	r1, fp
 8005c14:	f7fa fc94 	bl	8000540 <__aeabi_dmul>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa fad8 	bl	80001d4 <__adddf3>
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4689      	mov	r9, r1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fc86 	bl	8000540 <__aeabi_dmul>
 8005c34:	460b      	mov	r3, r1
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7fa fac8 	bl	80001d4 <__adddf3>
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <__ieee754_pow+0x3fc>)
 8005c46:	4299      	cmp	r1, r3
 8005c48:	ec45 4b19 	vmov	d9, r4, r5
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	468b      	mov	fp, r1
 8005c52:	f340 82f1 	ble.w	8006238 <__ieee754_pow+0x988>
 8005c56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c5e:	4303      	orrs	r3, r0
 8005c60:	f000 81e4 	beq.w	800602c <__ieee754_pow+0x77c>
 8005c64:	ec51 0b18 	vmov	r0, r1, d8
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f7fa feda 	bl	8000a24 <__aeabi_dcmplt>
 8005c70:	3800      	subs	r0, #0
 8005c72:	bf18      	it	ne
 8005c74:	2001      	movne	r0, #1
 8005c76:	e72b      	b.n	8005ad0 <__ieee754_pow+0x220>
 8005c78:	60000000 	.word	0x60000000
 8005c7c:	3ff71547 	.word	0x3ff71547
 8005c80:	f85ddf44 	.word	0xf85ddf44
 8005c84:	3e54ae0b 	.word	0x3e54ae0b
 8005c88:	55555555 	.word	0x55555555
 8005c8c:	3fd55555 	.word	0x3fd55555
 8005c90:	652b82fe 	.word	0x652b82fe
 8005c94:	3ff71547 	.word	0x3ff71547
 8005c98:	00000000 	.word	0x00000000
 8005c9c:	bff00000 	.word	0xbff00000
 8005ca0:	3ff00000 	.word	0x3ff00000
 8005ca4:	3fd00000 	.word	0x3fd00000
 8005ca8:	3fe00000 	.word	0x3fe00000
 8005cac:	408fffff 	.word	0x408fffff
 8005cb0:	4bd5      	ldr	r3, [pc, #852]	; (8006008 <__ieee754_pow+0x758>)
 8005cb2:	402b      	ands	r3, r5
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	b92b      	cbnz	r3, 8005cc4 <__ieee754_pow+0x414>
 8005cb8:	4bd4      	ldr	r3, [pc, #848]	; (800600c <__ieee754_pow+0x75c>)
 8005cba:	f7fa fc41 	bl	8000540 <__aeabi_dmul>
 8005cbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	1523      	asrs	r3, r4, #20
 8005cc6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005cca:	4413      	add	r3, r2
 8005ccc:	9305      	str	r3, [sp, #20]
 8005cce:	4bd0      	ldr	r3, [pc, #832]	; (8006010 <__ieee754_pow+0x760>)
 8005cd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005cd4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005cde:	dd08      	ble.n	8005cf2 <__ieee754_pow+0x442>
 8005ce0:	4bcc      	ldr	r3, [pc, #816]	; (8006014 <__ieee754_pow+0x764>)
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	f340 8162 	ble.w	8005fac <__ieee754_pow+0x6fc>
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	3301      	adds	r3, #1
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005cf2:	2400      	movs	r4, #0
 8005cf4:	00e3      	lsls	r3, r4, #3
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	4bc7      	ldr	r3, [pc, #796]	; (8006018 <__ieee754_pow+0x768>)
 8005cfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cfe:	ed93 7b00 	vldr	d7, [r3]
 8005d02:	4629      	mov	r1, r5
 8005d04:	ec53 2b17 	vmov	r2, r3, d7
 8005d08:	eeb0 9a47 	vmov.f32	s18, s14
 8005d0c:	eef0 9a67 	vmov.f32	s19, s15
 8005d10:	4682      	mov	sl, r0
 8005d12:	f7fa fa5d 	bl	80001d0 <__aeabi_dsub>
 8005d16:	4652      	mov	r2, sl
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	ec51 0b19 	vmov	r0, r1, d9
 8005d22:	f7fa fa57 	bl	80001d4 <__adddf3>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	49bb      	ldr	r1, [pc, #748]	; (800601c <__ieee754_pow+0x76c>)
 8005d2e:	f7fa fd31 	bl	8000794 <__aeabi_ddiv>
 8005d32:	ec41 0b1a 	vmov	d10, r0, r1
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fbff 	bl	8000540 <__aeabi_dmul>
 8005d42:	2300      	movs	r3, #0
 8005d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d4e:	46ab      	mov	fp, r5
 8005d50:	106d      	asrs	r5, r5, #1
 8005d52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d5a:	ec41 0b18 	vmov	d8, r0, r1
 8005d5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005d62:	2200      	movs	r2, #0
 8005d64:	4640      	mov	r0, r8
 8005d66:	4649      	mov	r1, r9
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	f7fa fbe8 	bl	8000540 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa fa2a 	bl	80001d0 <__aeabi_dsub>
 8005d7c:	ec53 2b19 	vmov	r2, r3, d9
 8005d80:	4606      	mov	r6, r0
 8005d82:	460f      	mov	r7, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fa22 	bl	80001d0 <__aeabi_dsub>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4650      	mov	r0, sl
 8005d92:	4659      	mov	r1, fp
 8005d94:	f7fa fa1c 	bl	80001d0 <__aeabi_dsub>
 8005d98:	4642      	mov	r2, r8
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	f7fa fbd0 	bl	8000540 <__aeabi_dmul>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4630      	mov	r0, r6
 8005da6:	4639      	mov	r1, r7
 8005da8:	f7fa fa12 	bl	80001d0 <__aeabi_dsub>
 8005dac:	ec53 2b1a 	vmov	r2, r3, d10
 8005db0:	f7fa fbc6 	bl	8000540 <__aeabi_dmul>
 8005db4:	ec53 2b18 	vmov	r2, r3, d8
 8005db8:	ec41 0b19 	vmov	d9, r0, r1
 8005dbc:	ec51 0b18 	vmov	r0, r1, d8
 8005dc0:	f7fa fbbe 	bl	8000540 <__aeabi_dmul>
 8005dc4:	a37c      	add	r3, pc, #496	; (adr r3, 8005fb8 <__ieee754_pow+0x708>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	4604      	mov	r4, r0
 8005dcc:	460d      	mov	r5, r1
 8005dce:	f7fa fbb7 	bl	8000540 <__aeabi_dmul>
 8005dd2:	a37b      	add	r3, pc, #492	; (adr r3, 8005fc0 <__ieee754_pow+0x710>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa f9fc 	bl	80001d4 <__adddf3>
 8005ddc:	4622      	mov	r2, r4
 8005dde:	462b      	mov	r3, r5
 8005de0:	f7fa fbae 	bl	8000540 <__aeabi_dmul>
 8005de4:	a378      	add	r3, pc, #480	; (adr r3, 8005fc8 <__ieee754_pow+0x718>)
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f7fa f9f3 	bl	80001d4 <__adddf3>
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	f7fa fba5 	bl	8000540 <__aeabi_dmul>
 8005df6:	a376      	add	r3, pc, #472	; (adr r3, 8005fd0 <__ieee754_pow+0x720>)
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f7fa f9ea 	bl	80001d4 <__adddf3>
 8005e00:	4622      	mov	r2, r4
 8005e02:	462b      	mov	r3, r5
 8005e04:	f7fa fb9c 	bl	8000540 <__aeabi_dmul>
 8005e08:	a373      	add	r3, pc, #460	; (adr r3, 8005fd8 <__ieee754_pow+0x728>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f7fa f9e1 	bl	80001d4 <__adddf3>
 8005e12:	4622      	mov	r2, r4
 8005e14:	462b      	mov	r3, r5
 8005e16:	f7fa fb93 	bl	8000540 <__aeabi_dmul>
 8005e1a:	a371      	add	r3, pc, #452	; (adr r3, 8005fe0 <__ieee754_pow+0x730>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa f9d8 	bl	80001d4 <__adddf3>
 8005e24:	4622      	mov	r2, r4
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fb86 	bl	8000540 <__aeabi_dmul>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fb80 	bl	8000540 <__aeabi_dmul>
 8005e40:	4642      	mov	r2, r8
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	464b      	mov	r3, r9
 8005e48:	ec51 0b18 	vmov	r0, r1, d8
 8005e4c:	f7fa f9c2 	bl	80001d4 <__adddf3>
 8005e50:	ec53 2b19 	vmov	r2, r3, d9
 8005e54:	f7fa fb74 	bl	8000540 <__aeabi_dmul>
 8005e58:	4622      	mov	r2, r4
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	f7fa f9ba 	bl	80001d4 <__adddf3>
 8005e60:	4642      	mov	r2, r8
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	464b      	mov	r3, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fb68 	bl	8000540 <__aeabi_dmul>
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <__ieee754_pow+0x770>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	f7fa f9ac 	bl	80001d4 <__adddf3>
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	465b      	mov	r3, fp
 8005e80:	f7fa f9a8 	bl	80001d4 <__adddf3>
 8005e84:	2000      	movs	r0, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa fb55 	bl	8000540 <__aeabi_dmul>
 8005e96:	4b62      	ldr	r3, [pc, #392]	; (8006020 <__ieee754_pow+0x770>)
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4689      	mov	r9, r1
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa f995 	bl	80001d0 <__aeabi_dsub>
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	f7fa f991 	bl	80001d0 <__aeabi_dsub>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	f7fa f98b 	bl	80001d0 <__aeabi_dsub>
 8005eba:	ec53 2b18 	vmov	r2, r3, d8
 8005ebe:	f7fa fb3f 	bl	8000540 <__aeabi_dmul>
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	460f      	mov	r7, r1
 8005ec8:	462b      	mov	r3, r5
 8005eca:	ec51 0b19 	vmov	r0, r1, d9
 8005ece:	f7fa fb37 	bl	8000540 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa f97b 	bl	80001d4 <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa f973 	bl	80001d4 <__adddf3>
 8005eee:	a33e      	add	r3, pc, #248	; (adr r3, 8005fe8 <__ieee754_pow+0x738>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	f7fa fb21 	bl	8000540 <__aeabi_dmul>
 8005efe:	4642      	mov	r2, r8
 8005f00:	ec41 0b18 	vmov	d8, r0, r1
 8005f04:	464b      	mov	r3, r9
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa f961 	bl	80001d0 <__aeabi_dsub>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa f95b 	bl	80001d0 <__aeabi_dsub>
 8005f1a:	a335      	add	r3, pc, #212	; (adr r3, 8005ff0 <__ieee754_pow+0x740>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fa fb0e 	bl	8000540 <__aeabi_dmul>
 8005f24:	a334      	add	r3, pc, #208	; (adr r3, 8005ff8 <__ieee754_pow+0x748>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fb05 	bl	8000540 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	f7fa f949 	bl	80001d4 <__adddf3>
 8005f42:	9a07      	ldr	r2, [sp, #28]
 8005f44:	4b37      	ldr	r3, [pc, #220]	; (8006024 <__ieee754_pow+0x774>)
 8005f46:	4413      	add	r3, r2
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f7fa f942 	bl	80001d4 <__adddf3>
 8005f50:	4682      	mov	sl, r0
 8005f52:	9805      	ldr	r0, [sp, #20]
 8005f54:	468b      	mov	fp, r1
 8005f56:	f7fa fa89 	bl	800046c <__aeabi_i2d>
 8005f5a:	9a07      	ldr	r2, [sp, #28]
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <__ieee754_pow+0x778>)
 8005f5e:	4413      	add	r3, r2
 8005f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f64:	4606      	mov	r6, r0
 8005f66:	460f      	mov	r7, r1
 8005f68:	4652      	mov	r2, sl
 8005f6a:	465b      	mov	r3, fp
 8005f6c:	ec51 0b18 	vmov	r0, r1, d8
 8005f70:	f7fa f930 	bl	80001d4 <__adddf3>
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	f7fa f92c 	bl	80001d4 <__adddf3>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa f928 	bl	80001d4 <__adddf3>
 8005f84:	2000      	movs	r0, #0
 8005f86:	4632      	mov	r2, r6
 8005f88:	463b      	mov	r3, r7
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	f7fa f91f 	bl	80001d0 <__aeabi_dsub>
 8005f92:	4642      	mov	r2, r8
 8005f94:	464b      	mov	r3, r9
 8005f96:	f7fa f91b 	bl	80001d0 <__aeabi_dsub>
 8005f9a:	ec53 2b18 	vmov	r2, r3, d8
 8005f9e:	f7fa f917 	bl	80001d0 <__aeabi_dsub>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	4659      	mov	r1, fp
 8005faa:	e610      	b.n	8005bce <__ieee754_pow+0x31e>
 8005fac:	2401      	movs	r4, #1
 8005fae:	e6a1      	b.n	8005cf4 <__ieee754_pow+0x444>
 8005fb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006000 <__ieee754_pow+0x750>
 8005fb4:	e617      	b.n	8005be6 <__ieee754_pow+0x336>
 8005fb6:	bf00      	nop
 8005fb8:	4a454eef 	.word	0x4a454eef
 8005fbc:	3fca7e28 	.word	0x3fca7e28
 8005fc0:	93c9db65 	.word	0x93c9db65
 8005fc4:	3fcd864a 	.word	0x3fcd864a
 8005fc8:	a91d4101 	.word	0xa91d4101
 8005fcc:	3fd17460 	.word	0x3fd17460
 8005fd0:	518f264d 	.word	0x518f264d
 8005fd4:	3fd55555 	.word	0x3fd55555
 8005fd8:	db6fabff 	.word	0xdb6fabff
 8005fdc:	3fdb6db6 	.word	0x3fdb6db6
 8005fe0:	33333303 	.word	0x33333303
 8005fe4:	3fe33333 	.word	0x3fe33333
 8005fe8:	e0000000 	.word	0xe0000000
 8005fec:	3feec709 	.word	0x3feec709
 8005ff0:	dc3a03fd 	.word	0xdc3a03fd
 8005ff4:	3feec709 	.word	0x3feec709
 8005ff8:	145b01f5 	.word	0x145b01f5
 8005ffc:	be3e2fe0 	.word	0xbe3e2fe0
 8006000:	00000000 	.word	0x00000000
 8006004:	3ff00000 	.word	0x3ff00000
 8006008:	7ff00000 	.word	0x7ff00000
 800600c:	43400000 	.word	0x43400000
 8006010:	0003988e 	.word	0x0003988e
 8006014:	000bb679 	.word	0x000bb679
 8006018:	08006720 	.word	0x08006720
 800601c:	3ff00000 	.word	0x3ff00000
 8006020:	40080000 	.word	0x40080000
 8006024:	08006740 	.word	0x08006740
 8006028:	08006730 	.word	0x08006730
 800602c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006304 <__ieee754_pow+0xa54>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa f8cd 	bl	80001d4 <__adddf3>
 800603a:	4622      	mov	r2, r4
 800603c:	ec41 0b1a 	vmov	d10, r0, r1
 8006040:	462b      	mov	r3, r5
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa f8c3 	bl	80001d0 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	ec51 0b1a 	vmov	r0, r1, d10
 8006052:	f7fa fd05 	bl	8000a60 <__aeabi_dcmpgt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f47f ae04 	bne.w	8005c64 <__ieee754_pow+0x3b4>
 800605c:	4aa4      	ldr	r2, [pc, #656]	; (80062f0 <__ieee754_pow+0xa40>)
 800605e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006062:	4293      	cmp	r3, r2
 8006064:	f340 8108 	ble.w	8006278 <__ieee754_pow+0x9c8>
 8006068:	151b      	asrs	r3, r3, #20
 800606a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800606e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006072:	fa4a f303 	asr.w	r3, sl, r3
 8006076:	445b      	add	r3, fp
 8006078:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800607c:	4e9d      	ldr	r6, [pc, #628]	; (80062f4 <__ieee754_pow+0xa44>)
 800607e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006082:	4116      	asrs	r6, r2
 8006084:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006088:	2000      	movs	r0, #0
 800608a:	ea23 0106 	bic.w	r1, r3, r6
 800608e:	f1c2 0214 	rsb	r2, r2, #20
 8006092:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006096:	fa4a fa02 	asr.w	sl, sl, r2
 800609a:	f1bb 0f00 	cmp.w	fp, #0
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	bfb8      	it	lt
 80060a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80060ac:	f7fa f890 	bl	80001d0 <__aeabi_dsub>
 80060b0:	ec41 0b19 	vmov	d9, r0, r1
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	ec51 0b19 	vmov	r0, r1, d9
 80060bc:	f7fa f88a 	bl	80001d4 <__adddf3>
 80060c0:	a37b      	add	r3, pc, #492	; (adr r3, 80062b0 <__ieee754_pow+0xa00>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	2000      	movs	r0, #0
 80060c8:	4604      	mov	r4, r0
 80060ca:	460d      	mov	r5, r1
 80060cc:	f7fa fa38 	bl	8000540 <__aeabi_dmul>
 80060d0:	ec53 2b19 	vmov	r2, r3, d9
 80060d4:	4606      	mov	r6, r0
 80060d6:	460f      	mov	r7, r1
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa f878 	bl	80001d0 <__aeabi_dsub>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4640      	mov	r0, r8
 80060e6:	4649      	mov	r1, r9
 80060e8:	f7fa f872 	bl	80001d0 <__aeabi_dsub>
 80060ec:	a372      	add	r3, pc, #456	; (adr r3, 80062b8 <__ieee754_pow+0xa08>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa fa25 	bl	8000540 <__aeabi_dmul>
 80060f6:	a372      	add	r3, pc, #456	; (adr r3, 80062c0 <__ieee754_pow+0xa10>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa fa1c 	bl	8000540 <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa f860 	bl	80001d4 <__adddf3>
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa f858 	bl	80001d4 <__adddf3>
 8006124:	4632      	mov	r2, r6
 8006126:	463b      	mov	r3, r7
 8006128:	4680      	mov	r8, r0
 800612a:	4689      	mov	r9, r1
 800612c:	f7fa f850 	bl	80001d0 <__aeabi_dsub>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f84a 	bl	80001d0 <__aeabi_dsub>
 800613c:	4642      	mov	r2, r8
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	464b      	mov	r3, r9
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa f9fa 	bl	8000540 <__aeabi_dmul>
 800614c:	a35e      	add	r3, pc, #376	; (adr r3, 80062c8 <__ieee754_pow+0xa18>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	4604      	mov	r4, r0
 8006154:	460d      	mov	r5, r1
 8006156:	f7fa f9f3 	bl	8000540 <__aeabi_dmul>
 800615a:	a35d      	add	r3, pc, #372	; (adr r3, 80062d0 <__ieee754_pow+0xa20>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f836 	bl	80001d0 <__aeabi_dsub>
 8006164:	4622      	mov	r2, r4
 8006166:	462b      	mov	r3, r5
 8006168:	f7fa f9ea 	bl	8000540 <__aeabi_dmul>
 800616c:	a35a      	add	r3, pc, #360	; (adr r3, 80062d8 <__ieee754_pow+0xa28>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa f82f 	bl	80001d4 <__adddf3>
 8006176:	4622      	mov	r2, r4
 8006178:	462b      	mov	r3, r5
 800617a:	f7fa f9e1 	bl	8000540 <__aeabi_dmul>
 800617e:	a358      	add	r3, pc, #352	; (adr r3, 80062e0 <__ieee754_pow+0xa30>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa f824 	bl	80001d0 <__aeabi_dsub>
 8006188:	4622      	mov	r2, r4
 800618a:	462b      	mov	r3, r5
 800618c:	f7fa f9d8 	bl	8000540 <__aeabi_dmul>
 8006190:	a355      	add	r3, pc, #340	; (adr r3, 80062e8 <__ieee754_pow+0xa38>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa f81d 	bl	80001d4 <__adddf3>
 800619a:	4622      	mov	r2, r4
 800619c:	462b      	mov	r3, r5
 800619e:	f7fa f9cf 	bl	8000540 <__aeabi_dmul>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4640      	mov	r0, r8
 80061a8:	4649      	mov	r1, r9
 80061aa:	f7fa f811 	bl	80001d0 <__aeabi_dsub>
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7fa f9c1 	bl	8000540 <__aeabi_dmul>
 80061be:	2200      	movs	r2, #0
 80061c0:	ec41 0b19 	vmov	d9, r0, r1
 80061c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061c8:	4620      	mov	r0, r4
 80061ca:	4629      	mov	r1, r5
 80061cc:	f7fa f800 	bl	80001d0 <__aeabi_dsub>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	ec51 0b19 	vmov	r0, r1, d9
 80061d8:	f7fa fadc 	bl	8000794 <__aeabi_ddiv>
 80061dc:	4632      	mov	r2, r6
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	463b      	mov	r3, r7
 80061e4:	4640      	mov	r0, r8
 80061e6:	4649      	mov	r1, r9
 80061e8:	f7fa f9aa 	bl	8000540 <__aeabi_dmul>
 80061ec:	4632      	mov	r2, r6
 80061ee:	463b      	mov	r3, r7
 80061f0:	f7f9 fff0 	bl	80001d4 <__adddf3>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4620      	mov	r0, r4
 80061fa:	4629      	mov	r1, r5
 80061fc:	f7f9 ffe8 	bl	80001d0 <__aeabi_dsub>
 8006200:	4642      	mov	r2, r8
 8006202:	464b      	mov	r3, r9
 8006204:	f7f9 ffe4 	bl	80001d0 <__aeabi_dsub>
 8006208:	460b      	mov	r3, r1
 800620a:	4602      	mov	r2, r0
 800620c:	493a      	ldr	r1, [pc, #232]	; (80062f8 <__ieee754_pow+0xa48>)
 800620e:	2000      	movs	r0, #0
 8006210:	f7f9 ffde 	bl	80001d0 <__aeabi_dsub>
 8006214:	ec41 0b10 	vmov	d0, r0, r1
 8006218:	ee10 3a90 	vmov	r3, s1
 800621c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	da2b      	bge.n	800627e <__ieee754_pow+0x9ce>
 8006226:	4650      	mov	r0, sl
 8006228:	f000 f966 	bl	80064f8 <scalbn>
 800622c:	ec51 0b10 	vmov	r0, r1, d0
 8006230:	ec53 2b18 	vmov	r2, r3, d8
 8006234:	f7ff bbed 	b.w	8005a12 <__ieee754_pow+0x162>
 8006238:	4b30      	ldr	r3, [pc, #192]	; (80062fc <__ieee754_pow+0xa4c>)
 800623a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800623e:	429e      	cmp	r6, r3
 8006240:	f77f af0c 	ble.w	800605c <__ieee754_pow+0x7ac>
 8006244:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <__ieee754_pow+0xa50>)
 8006246:	440b      	add	r3, r1
 8006248:	4303      	orrs	r3, r0
 800624a:	d009      	beq.n	8006260 <__ieee754_pow+0x9b0>
 800624c:	ec51 0b18 	vmov	r0, r1, d8
 8006250:	2200      	movs	r2, #0
 8006252:	2300      	movs	r3, #0
 8006254:	f7fa fbe6 	bl	8000a24 <__aeabi_dcmplt>
 8006258:	3800      	subs	r0, #0
 800625a:	bf18      	it	ne
 800625c:	2001      	movne	r0, #1
 800625e:	e447      	b.n	8005af0 <__ieee754_pow+0x240>
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7f9 ffb4 	bl	80001d0 <__aeabi_dsub>
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	f7fa fbee 	bl	8000a4c <__aeabi_dcmpge>
 8006270:	2800      	cmp	r0, #0
 8006272:	f43f aef3 	beq.w	800605c <__ieee754_pow+0x7ac>
 8006276:	e7e9      	b.n	800624c <__ieee754_pow+0x99c>
 8006278:	f04f 0a00 	mov.w	sl, #0
 800627c:	e71a      	b.n	80060b4 <__ieee754_pow+0x804>
 800627e:	ec51 0b10 	vmov	r0, r1, d0
 8006282:	4619      	mov	r1, r3
 8006284:	e7d4      	b.n	8006230 <__ieee754_pow+0x980>
 8006286:	491c      	ldr	r1, [pc, #112]	; (80062f8 <__ieee754_pow+0xa48>)
 8006288:	2000      	movs	r0, #0
 800628a:	f7ff bb30 	b.w	80058ee <__ieee754_pow+0x3e>
 800628e:	2000      	movs	r0, #0
 8006290:	2100      	movs	r1, #0
 8006292:	f7ff bb2c 	b.w	80058ee <__ieee754_pow+0x3e>
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7ff bb28 	b.w	80058ee <__ieee754_pow+0x3e>
 800629e:	9204      	str	r2, [sp, #16]
 80062a0:	f7ff bb7a 	b.w	8005998 <__ieee754_pow+0xe8>
 80062a4:	2300      	movs	r3, #0
 80062a6:	f7ff bb64 	b.w	8005972 <__ieee754_pow+0xc2>
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	00000000 	.word	0x00000000
 80062b4:	3fe62e43 	.word	0x3fe62e43
 80062b8:	fefa39ef 	.word	0xfefa39ef
 80062bc:	3fe62e42 	.word	0x3fe62e42
 80062c0:	0ca86c39 	.word	0x0ca86c39
 80062c4:	be205c61 	.word	0xbe205c61
 80062c8:	72bea4d0 	.word	0x72bea4d0
 80062cc:	3e663769 	.word	0x3e663769
 80062d0:	c5d26bf1 	.word	0xc5d26bf1
 80062d4:	3ebbbd41 	.word	0x3ebbbd41
 80062d8:	af25de2c 	.word	0xaf25de2c
 80062dc:	3f11566a 	.word	0x3f11566a
 80062e0:	16bebd93 	.word	0x16bebd93
 80062e4:	3f66c16c 	.word	0x3f66c16c
 80062e8:	5555553e 	.word	0x5555553e
 80062ec:	3fc55555 	.word	0x3fc55555
 80062f0:	3fe00000 	.word	0x3fe00000
 80062f4:	000fffff 	.word	0x000fffff
 80062f8:	3ff00000 	.word	0x3ff00000
 80062fc:	4090cbff 	.word	0x4090cbff
 8006300:	3f6f3400 	.word	0x3f6f3400
 8006304:	652b82fe 	.word	0x652b82fe
 8006308:	3c971547 	.word	0x3c971547

0800630c <__ieee754_sqrt>:
 800630c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006310:	ec55 4b10 	vmov	r4, r5, d0
 8006314:	4e55      	ldr	r6, [pc, #340]	; (800646c <__ieee754_sqrt+0x160>)
 8006316:	43ae      	bics	r6, r5
 8006318:	ee10 0a10 	vmov	r0, s0
 800631c:	ee10 3a10 	vmov	r3, s0
 8006320:	462a      	mov	r2, r5
 8006322:	4629      	mov	r1, r5
 8006324:	d110      	bne.n	8006348 <__ieee754_sqrt+0x3c>
 8006326:	ee10 2a10 	vmov	r2, s0
 800632a:	462b      	mov	r3, r5
 800632c:	f7fa f908 	bl	8000540 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7f9 ff4c 	bl	80001d4 <__adddf3>
 800633c:	4604      	mov	r4, r0
 800633e:	460d      	mov	r5, r1
 8006340:	ec45 4b10 	vmov	d0, r4, r5
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	2d00      	cmp	r5, #0
 800634a:	dc10      	bgt.n	800636e <__ieee754_sqrt+0x62>
 800634c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006350:	4330      	orrs	r0, r6
 8006352:	d0f5      	beq.n	8006340 <__ieee754_sqrt+0x34>
 8006354:	b15d      	cbz	r5, 800636e <__ieee754_sqrt+0x62>
 8006356:	ee10 2a10 	vmov	r2, s0
 800635a:	462b      	mov	r3, r5
 800635c:	ee10 0a10 	vmov	r0, s0
 8006360:	f7f9 ff36 	bl	80001d0 <__aeabi_dsub>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	f7fa fa14 	bl	8000794 <__aeabi_ddiv>
 800636c:	e7e6      	b.n	800633c <__ieee754_sqrt+0x30>
 800636e:	1512      	asrs	r2, r2, #20
 8006370:	d074      	beq.n	800645c <__ieee754_sqrt+0x150>
 8006372:	07d4      	lsls	r4, r2, #31
 8006374:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006378:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800637c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006380:	bf5e      	ittt	pl
 8006382:	0fda      	lsrpl	r2, r3, #31
 8006384:	005b      	lslpl	r3, r3, #1
 8006386:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800638a:	2400      	movs	r4, #0
 800638c:	0fda      	lsrs	r2, r3, #31
 800638e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006392:	107f      	asrs	r7, r7, #1
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	2516      	movs	r5, #22
 8006398:	4620      	mov	r0, r4
 800639a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800639e:	1886      	adds	r6, r0, r2
 80063a0:	428e      	cmp	r6, r1
 80063a2:	bfde      	ittt	le
 80063a4:	1b89      	suble	r1, r1, r6
 80063a6:	18b0      	addle	r0, r6, r2
 80063a8:	18a4      	addle	r4, r4, r2
 80063aa:	0049      	lsls	r1, r1, #1
 80063ac:	3d01      	subs	r5, #1
 80063ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80063b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80063b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063ba:	d1f0      	bne.n	800639e <__ieee754_sqrt+0x92>
 80063bc:	462a      	mov	r2, r5
 80063be:	f04f 0e20 	mov.w	lr, #32
 80063c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80063c6:	4281      	cmp	r1, r0
 80063c8:	eb06 0c05 	add.w	ip, r6, r5
 80063cc:	dc02      	bgt.n	80063d4 <__ieee754_sqrt+0xc8>
 80063ce:	d113      	bne.n	80063f8 <__ieee754_sqrt+0xec>
 80063d0:	459c      	cmp	ip, r3
 80063d2:	d811      	bhi.n	80063f8 <__ieee754_sqrt+0xec>
 80063d4:	f1bc 0f00 	cmp.w	ip, #0
 80063d8:	eb0c 0506 	add.w	r5, ip, r6
 80063dc:	da43      	bge.n	8006466 <__ieee754_sqrt+0x15a>
 80063de:	2d00      	cmp	r5, #0
 80063e0:	db41      	blt.n	8006466 <__ieee754_sqrt+0x15a>
 80063e2:	f100 0801 	add.w	r8, r0, #1
 80063e6:	1a09      	subs	r1, r1, r0
 80063e8:	459c      	cmp	ip, r3
 80063ea:	bf88      	it	hi
 80063ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80063f0:	eba3 030c 	sub.w	r3, r3, ip
 80063f4:	4432      	add	r2, r6
 80063f6:	4640      	mov	r0, r8
 80063f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80063fc:	f1be 0e01 	subs.w	lr, lr, #1
 8006400:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006404:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006408:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800640c:	d1db      	bne.n	80063c6 <__ieee754_sqrt+0xba>
 800640e:	430b      	orrs	r3, r1
 8006410:	d006      	beq.n	8006420 <__ieee754_sqrt+0x114>
 8006412:	1c50      	adds	r0, r2, #1
 8006414:	bf13      	iteet	ne
 8006416:	3201      	addne	r2, #1
 8006418:	3401      	addeq	r4, #1
 800641a:	4672      	moveq	r2, lr
 800641c:	f022 0201 	bicne.w	r2, r2, #1
 8006420:	1063      	asrs	r3, r4, #1
 8006422:	0852      	lsrs	r2, r2, #1
 8006424:	07e1      	lsls	r1, r4, #31
 8006426:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800642a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800642e:	bf48      	it	mi
 8006430:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006434:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006438:	4614      	mov	r4, r2
 800643a:	e781      	b.n	8006340 <__ieee754_sqrt+0x34>
 800643c:	0ad9      	lsrs	r1, r3, #11
 800643e:	3815      	subs	r0, #21
 8006440:	055b      	lsls	r3, r3, #21
 8006442:	2900      	cmp	r1, #0
 8006444:	d0fa      	beq.n	800643c <__ieee754_sqrt+0x130>
 8006446:	02cd      	lsls	r5, r1, #11
 8006448:	d50a      	bpl.n	8006460 <__ieee754_sqrt+0x154>
 800644a:	f1c2 0420 	rsb	r4, r2, #32
 800644e:	fa23 f404 	lsr.w	r4, r3, r4
 8006452:	1e55      	subs	r5, r2, #1
 8006454:	4093      	lsls	r3, r2
 8006456:	4321      	orrs	r1, r4
 8006458:	1b42      	subs	r2, r0, r5
 800645a:	e78a      	b.n	8006372 <__ieee754_sqrt+0x66>
 800645c:	4610      	mov	r0, r2
 800645e:	e7f0      	b.n	8006442 <__ieee754_sqrt+0x136>
 8006460:	0049      	lsls	r1, r1, #1
 8006462:	3201      	adds	r2, #1
 8006464:	e7ef      	b.n	8006446 <__ieee754_sqrt+0x13a>
 8006466:	4680      	mov	r8, r0
 8006468:	e7bd      	b.n	80063e6 <__ieee754_sqrt+0xda>
 800646a:	bf00      	nop
 800646c:	7ff00000 	.word	0x7ff00000

08006470 <with_errno>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1
 8006476:	4616      	mov	r6, r2
 8006478:	f7ff f85c 	bl	8005534 <__errno>
 800647c:	4629      	mov	r1, r5
 800647e:	6006      	str	r6, [r0, #0]
 8006480:	4620      	mov	r0, r4
 8006482:	bd70      	pop	{r4, r5, r6, pc}

08006484 <xflow>:
 8006484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006486:	4614      	mov	r4, r2
 8006488:	461d      	mov	r5, r3
 800648a:	b108      	cbz	r0, 8006490 <xflow+0xc>
 800648c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006490:	e9cd 2300 	strd	r2, r3, [sp]
 8006494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7fa f850 	bl	8000540 <__aeabi_dmul>
 80064a0:	2222      	movs	r2, #34	; 0x22
 80064a2:	b003      	add	sp, #12
 80064a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064a8:	f7ff bfe2 	b.w	8006470 <with_errno>

080064ac <__math_uflow>:
 80064ac:	b508      	push	{r3, lr}
 80064ae:	2200      	movs	r2, #0
 80064b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064b4:	f7ff ffe6 	bl	8006484 <xflow>
 80064b8:	ec41 0b10 	vmov	d0, r0, r1
 80064bc:	bd08      	pop	{r3, pc}

080064be <__math_oflow>:
 80064be:	b508      	push	{r3, lr}
 80064c0:	2200      	movs	r2, #0
 80064c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80064c6:	f7ff ffdd 	bl	8006484 <xflow>
 80064ca:	ec41 0b10 	vmov	d0, r0, r1
 80064ce:	bd08      	pop	{r3, pc}

080064d0 <fabs>:
 80064d0:	ec51 0b10 	vmov	r0, r1, d0
 80064d4:	ee10 2a10 	vmov	r2, s0
 80064d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064dc:	ec43 2b10 	vmov	d0, r2, r3
 80064e0:	4770      	bx	lr

080064e2 <finite>:
 80064e2:	b082      	sub	sp, #8
 80064e4:	ed8d 0b00 	vstr	d0, [sp]
 80064e8:	9801      	ldr	r0, [sp, #4]
 80064ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80064ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064f2:	0fc0      	lsrs	r0, r0, #31
 80064f4:	b002      	add	sp, #8
 80064f6:	4770      	bx	lr

080064f8 <scalbn>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	ec55 4b10 	vmov	r4, r5, d0
 80064fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006502:	4606      	mov	r6, r0
 8006504:	462b      	mov	r3, r5
 8006506:	b99a      	cbnz	r2, 8006530 <scalbn+0x38>
 8006508:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800650c:	4323      	orrs	r3, r4
 800650e:	d036      	beq.n	800657e <scalbn+0x86>
 8006510:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <scalbn+0x100>)
 8006512:	4629      	mov	r1, r5
 8006514:	ee10 0a10 	vmov	r0, s0
 8006518:	2200      	movs	r2, #0
 800651a:	f7fa f811 	bl	8000540 <__aeabi_dmul>
 800651e:	4b37      	ldr	r3, [pc, #220]	; (80065fc <scalbn+0x104>)
 8006520:	429e      	cmp	r6, r3
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	da10      	bge.n	800654a <scalbn+0x52>
 8006528:	a32b      	add	r3, pc, #172	; (adr r3, 80065d8 <scalbn+0xe0>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e03a      	b.n	80065a6 <scalbn+0xae>
 8006530:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006534:	428a      	cmp	r2, r1
 8006536:	d10c      	bne.n	8006552 <scalbn+0x5a>
 8006538:	ee10 2a10 	vmov	r2, s0
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	f7f9 fe48 	bl	80001d4 <__adddf3>
 8006544:	4604      	mov	r4, r0
 8006546:	460d      	mov	r5, r1
 8006548:	e019      	b.n	800657e <scalbn+0x86>
 800654a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800654e:	460b      	mov	r3, r1
 8006550:	3a36      	subs	r2, #54	; 0x36
 8006552:	4432      	add	r2, r6
 8006554:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006558:	428a      	cmp	r2, r1
 800655a:	dd08      	ble.n	800656e <scalbn+0x76>
 800655c:	2d00      	cmp	r5, #0
 800655e:	a120      	add	r1, pc, #128	; (adr r1, 80065e0 <scalbn+0xe8>)
 8006560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006564:	da1c      	bge.n	80065a0 <scalbn+0xa8>
 8006566:	a120      	add	r1, pc, #128	; (adr r1, 80065e8 <scalbn+0xf0>)
 8006568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800656c:	e018      	b.n	80065a0 <scalbn+0xa8>
 800656e:	2a00      	cmp	r2, #0
 8006570:	dd08      	ble.n	8006584 <scalbn+0x8c>
 8006572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800657a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800657e:	ec45 4b10 	vmov	d0, r4, r5
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006588:	da19      	bge.n	80065be <scalbn+0xc6>
 800658a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800658e:	429e      	cmp	r6, r3
 8006590:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006594:	dd0a      	ble.n	80065ac <scalbn+0xb4>
 8006596:	a112      	add	r1, pc, #72	; (adr r1, 80065e0 <scalbn+0xe8>)
 8006598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e2      	bne.n	8006566 <scalbn+0x6e>
 80065a0:	a30f      	add	r3, pc, #60	; (adr r3, 80065e0 <scalbn+0xe8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 ffcb 	bl	8000540 <__aeabi_dmul>
 80065aa:	e7cb      	b.n	8006544 <scalbn+0x4c>
 80065ac:	a10a      	add	r1, pc, #40	; (adr r1, 80065d8 <scalbn+0xe0>)
 80065ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0b8      	beq.n	8006528 <scalbn+0x30>
 80065b6:	a10e      	add	r1, pc, #56	; (adr r1, 80065f0 <scalbn+0xf8>)
 80065b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065bc:	e7b4      	b.n	8006528 <scalbn+0x30>
 80065be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065c2:	3236      	adds	r2, #54	; 0x36
 80065c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80065cc:	4620      	mov	r0, r4
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <scalbn+0x108>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	e7e8      	b.n	80065a6 <scalbn+0xae>
 80065d4:	f3af 8000 	nop.w
 80065d8:	c2f8f359 	.word	0xc2f8f359
 80065dc:	01a56e1f 	.word	0x01a56e1f
 80065e0:	8800759c 	.word	0x8800759c
 80065e4:	7e37e43c 	.word	0x7e37e43c
 80065e8:	8800759c 	.word	0x8800759c
 80065ec:	fe37e43c 	.word	0xfe37e43c
 80065f0:	c2f8f359 	.word	0xc2f8f359
 80065f4:	81a56e1f 	.word	0x81a56e1f
 80065f8:	43500000 	.word	0x43500000
 80065fc:	ffff3cb0 	.word	0xffff3cb0
 8006600:	3c900000 	.word	0x3c900000

08006604 <_init>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr

08006610 <_fini>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	bf00      	nop
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr
