
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006830  08006830  00007830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  000080b0  2**0
                  CONTENTS
  4 .ARM          00000000  08006960  08006960  000080b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006960  08006960  000080b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006960  08006960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006968  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080b0  2**0
                  CONTENTS
 10 .bss          00000330  200000b0  200000b0  000080b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  000080b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011127  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9c  00000000  00000000  00019207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0001bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b14  00000000  00000000  0001cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c8cf  00000000  00000000  0001d614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ea4  00000000  00000000  00039ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1719  00000000  00000000  0004ed87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f04a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042d4  00000000  00000000  000f04e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000f47b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006814 	.word	0x08006814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08006814 	.word	0x08006814

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <VEML6030_init>:
/*
 * @brief initialize VEML6030
 * @param sensor address
 * @return error
 */
uint8_t VEML6030_init(I2C_HandleTypeDef* p_hi2c,uint8_t addr) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  hi2c = p_hi2c;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <VEML6030_init+0x38>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  uint8_t buf[] = { 0x00, 0x00};
 8000af2:	2300      	movs	r3, #0
 8000af4:	81bb      	strh	r3, [r7, #12]
  return HAL_I2C_Master_Transmit(hi2c, addr, buf, 2, 100);
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <VEML6030_init+0x38>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	b299      	uxth	r1, r3
 8000afe:	f107 020c 	add.w	r2, r7, #12
 8000b02:	2364      	movs	r3, #100	@ 0x64
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2302      	movs	r3, #2
 8000b08:	f001 fd8e 	bl	8002628 <HAL_I2C_Master_Transmit>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000cc 	.word	0x200000cc
 8000b1c:	00000000 	.word	0x00000000

08000b20 <VEML6030_getIntTime>:
/*
 * @brief get cycle time in sensor
 * @param addr sensor address
 * @return cycle time
 */
uint16_t VEML6030_getIntTime(uint8_t addr) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  uint16_t config = VEML6030_readWord(addr, CONF_CMD);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f858 	bl	8000be4 <VEML6030_readWord>
 8000b34:	4603      	mov	r3, r0
 8000b36:	81fb      	strh	r3, [r7, #14]
  uint8_t x2x1 = (config >> 6) & 0x03;
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	099b      	lsrs	r3, r3, #6
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	737b      	strb	r3, [r7, #13]
  uint8_t x3 = VEML6030_readBit(config, 8);
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f872 	bl	8000c34 <VEML6030_readBit>
 8000b50:	4603      	mov	r3, r0
 8000b52:	733b      	strb	r3, [r7, #12]
  uint8_t x4 = VEML6030_readBit(config, 9);
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	2109      	movs	r1, #9
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f86b 	bl	8000c34 <VEML6030_readBit>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	72fb      	strb	r3, [r7, #11]
  uint16_t IntTime = 100 *pow(2,x2x1)/ pow(2,(x3 + x4));
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc71 	bl	800044c <__aeabi_ui2d>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	ec43 2b11 	vmov	d1, r2, r3
 8000b72:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8000bd8 <VEML6030_getIntTime+0xb8>
 8000b76:	f004 feed 	bl	8005954 <pow>
 8000b7a:	ec51 0b10 	vmov	r0, r1, d0
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <VEML6030_getIntTime+0xc0>)
 8000b84:	f7ff fcdc 	bl	8000540 <__aeabi_dmul>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	461d      	mov	r5, r3
 8000b90:	7b3a      	ldrb	r2, [r7, #12]
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	4413      	add	r3, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc68 	bl	800046c <__aeabi_i2d>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	ec43 2b11 	vmov	d1, r2, r3
 8000ba4:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8000bd8 <VEML6030_getIntTime+0xb8>
 8000ba8:	f004 fed4 	bl	8005954 <pow>
 8000bac:	ec53 2b10 	vmov	r2, r3, d0
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	f7ff fdee 	bl	8000794 <__aeabi_ddiv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff ff6e 	bl	8000aa0 <__aeabi_d2uiz>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	813b      	strh	r3, [r7, #8]
  return IntTime;
 8000bc8:	893b      	ldrh	r3, [r7, #8]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40000000 	.word	0x40000000
 8000be0:	40590000 	.word	0x40590000

08000be4 <VEML6030_readWord>:
 * @brief read 1 word (2 bytes) from I2C bus
 * @param1 addr address
 * @param2 command read resister's address
 * @return data(Serialized)
 */
uint16_t VEML6030_readWord(uint8_t addr, uint8_t command) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[2] = { };
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	81bb      	strh	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, addr, command, sizeof(uint8_t), buf, 2, 100);
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <VEML6030_readWord+0x4c>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2364      	movs	r3, #100	@ 0x64
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	f001 fdfc 	bl	8002810 <HAL_I2C_Mem_Read>
  uint16_t data = (buf[1] << 8) + buf[0];
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	7b3a      	ldrb	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	81fb      	strh	r3, [r7, #14]
  return data;
 8000c24:	89fb      	ldrh	r3, [r7, #14]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000cc 	.word	0x200000cc

08000c34 <VEML6030_readBit>:
/*
 * @brief read 1 bit
 * @param1 data
 * @param2 position of bit you want to read
 */
uint8_t VEML6030_readBit(uint16_t data, uint8_t pos) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	80fb      	strh	r3, [r7, #6]
 8000c40:	4613      	mov	r3, r2
 8000c42:	717b      	strb	r3, [r7, #5]
  return (data >> pos) & 0x01;
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	fa42 f303 	asr.w	r3, r2, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <getMode>:
const DotPattern *PATTERN_ADDR[16] = { &PATTERN_0, &PATTERN_1, &PATTERN_2,
    &PATTERN_3, &PATTERN_4, &PATTERN_5, &PATTERN_6, &PATTERN_7, &PATTERN_8,
    &PATTERN_9, &PATTERN_10, &PATTERN_11, &PATTERN_12, &PATTERN_13, &PATTERN_14,
    &PATTERN_15 };

bool getMode(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000c64:	2102      	movs	r1, #2
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f001 fc1d 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <getID_Rotary>:

uint8_t getID_Rotary(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  uint8_t ID = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin)) << 0;
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4822      	ldr	r0, [pc, #136]	@ (8000d18 <getID_Rotary+0x98>)
 8000c8e:	f001 fc0b 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin)) << 1;
 8000caa:	2120      	movs	r1, #32
 8000cac:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <getID_Rotary+0x98>)
 8000cae:	f001 fbfb 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <getID_Rotary+0x3c>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e000      	b.n	8000cbe <getID_Rotary+0x3e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID4_GPIO_Port, ID4_Pin)) << 2;
 8000cca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd2:	f001 fbe9 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <getID_Rotary+0x60>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e000      	b.n	8000ce2 <getID_Rotary+0x62>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	71fb      	strb	r3, [r7, #7]
  ID |= !(HAL_GPIO_ReadPin(ID8_GPIO_Port, ID8_Pin)) << 3;
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <getID_Rotary+0x98>)
 8000cf2:	f001 fbd9 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <getID_Rotary+0x80>
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	e000      	b.n	8000d02 <getID_Rotary+0x82>
 8000d00:	2300      	movs	r3, #0
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	71fb      	strb	r3, [r7, #7]
  return ID;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000400 	.word	0x48000400

08000d1c <getColor>:

uint8_t getColor(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(COLOR_GPIO_Port, COLOR_Pin);
 8000d20:	2104      	movs	r1, #4
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d26:	f001 fbbf 	bl	80024a8 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <setPattern>:

void setPattern(uint8_t ID, uint8_t color) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
  RGB pattern[5];
  pattern[0] = PATTERN_ADDR[ID]->dot0;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <setPattern+0xa0>)
 8000d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	8811      	ldrh	r1, [r2, #0]
 8000d4e:	7892      	ldrb	r2, [r2, #2]
 8000d50:	8019      	strh	r1, [r3, #0]
 8000d52:	709a      	strb	r2, [r3, #2]
  pattern[1] = PATTERN_ADDR[ID]->dot1;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd0 <setPattern+0xa0>)
 8000d58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d5c:	f107 030b 	add.w	r3, r7, #11
 8000d60:	3203      	adds	r2, #3
 8000d62:	8811      	ldrh	r1, [r2, #0]
 8000d64:	7892      	ldrb	r2, [r2, #2]
 8000d66:	8019      	strh	r1, [r3, #0]
 8000d68:	709a      	strb	r2, [r3, #2]
  pattern[2] = PATTERN_ADDR[ID]->dot2;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <setPattern+0xa0>)
 8000d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d72:	f107 030e 	add.w	r3, r7, #14
 8000d76:	3206      	adds	r2, #6
 8000d78:	8811      	ldrh	r1, [r2, #0]
 8000d7a:	7892      	ldrb	r2, [r2, #2]
 8000d7c:	8019      	strh	r1, [r3, #0]
 8000d7e:	709a      	strb	r2, [r3, #2]
  pattern[3] = PATTERN_ADDR[ID]->dot3;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <setPattern+0xa0>)
 8000d84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d88:	f107 0311 	add.w	r3, r7, #17
 8000d8c:	3209      	adds	r2, #9
 8000d8e:	8811      	ldrh	r1, [r2, #0]
 8000d90:	7892      	ldrb	r2, [r2, #2]
 8000d92:	8019      	strh	r1, [r3, #0]
 8000d94:	709a      	strb	r2, [r3, #2]
  if (color == BLUE) {
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <setPattern+0x7a>
    pattern[4] = COLOR_BLUE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	753b      	strb	r3, [r7, #20]
 8000da0:	2300      	movs	r3, #0
 8000da2:	757b      	strb	r3, [r7, #21]
 8000da4:	23ff      	movs	r3, #255	@ 0xff
 8000da6:	75bb      	strb	r3, [r7, #22]
 8000da8:	e008      	b.n	8000dbc <setPattern+0x8c>
  } else {
    pattern[4] = COLOR_YELLOW;
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <setPattern+0xa4>)
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	4611      	mov	r1, r2
 8000db4:	8019      	strh	r1, [r3, #0]
 8000db6:	3302      	adds	r3, #2
 8000db8:	0c12      	lsrs	r2, r2, #16
 8000dba:	701a      	strb	r2, [r3, #0]
  }
  NeoPixel_Send(pattern);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 faa5 	bl	8001310 <NeoPixel_Send>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	08006830 	.word	0x08006830

08000dd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 fdc3 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f88d 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 fa0b 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dea:	f000 f9eb 	bl	80011c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dee:	f000 f97b 	bl	80010e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000df2:	f000 f9b7 	bl	8001164 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000df6:	f000 f8e5 	bl	8000fc4 <MX_CAN_Init>
  MX_I2C1_Init();
 8000dfa:	f000 f917 	bl	800102c <MX_I2C1_Init>
  MX_IWDG_Init();
 8000dfe:	f000 f955 	bl	80010ac <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  VEML6030_init(&hi2c1, SENS_ADDR_0);
 8000e02:	2190      	movs	r1, #144	@ 0x90
 8000e04:	4839      	ldr	r0, [pc, #228]	@ (8000eec <main+0x114>)
 8000e06:	f7ff fe6b 	bl	8000ae0 <VEML6030_init>
  VEML6030_init(&hi2c1, SENS_ADDR_1);
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4837      	ldr	r0, [pc, #220]	@ (8000eec <main+0x114>)
 8000e0e:	f7ff fe67 	bl	8000ae0 <VEML6030_init>
  NeoPixel_Init(&hspi1);
 8000e12:	4837      	ldr	r0, [pc, #220]	@ (8000ef0 <main+0x118>)
 8000e14:	f000 fa6c 	bl	80012f0 <NeoPixel_Init>

  uint8_t ID, ID_past = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73bb      	strb	r3, [r7, #14]
  uint8_t color, color_past = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	733b      	strb	r3, [r7, #12]
//setup cycle
  float *cycle_basis = calloc(CYCLE_LAST, sizeof(float));
 8000e20:	2104      	movs	r1, #4
 8000e22:	2003      	movs	r0, #3
 8000e24:	f004 fc36 	bl	8005694 <calloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60bb      	str	r3, [r7, #8]
  uint32_t *cycle_old = calloc(CYCLE_LAST, sizeof(uint32_t));
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f004 fc30 	bl	8005694 <calloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	607b      	str	r3, [r7, #4]
  cycle_basis[CYCLE_MAIN] = 50;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef4 <main+0x11c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_PATTERN] = 100;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3308      	adds	r3, #8
 8000e42:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef8 <main+0x120>)
 8000e44:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_SENSOR] = VEML6030_getIntTime(SENS_ADDR_0);
 8000e46:	2090      	movs	r0, #144	@ 0x90
 8000e48:	f7ff fe6a 	bl	8000b20 <VEML6030_getIntTime>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3304      	adds	r3, #4
 8000e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (getMode() == MODE_MEMORY) {
 8000e5e:	f7ff feff 	bl	8000c60 <getMode>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <main+0xa6>
      ID = getID_Rotary();
 8000e6e:	f7ff ff07 	bl	8000c80 <getID_Rotary>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
      color = getColor();
 8000e76:	f7ff ff51 	bl	8000d1c <getColor>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	737b      	strb	r3, [r7, #13]
    }
    if ((ID != ID_past || color != color_past)
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d103      	bne.n	8000e8e <main+0xb6>
 8000e86:	7b7a      	ldrb	r2, [r7, #13]
 8000e88:	7b3b      	ldrb	r3, [r7, #12]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d01e      	beq.n	8000ecc <main+0xf4>
        && CycleController(CYCLE_PATTERN, cycle_basis, cycle_old)) {
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	2002      	movs	r0, #2
 8000e94:	f000 fcfe 	bl	8001894 <CycleController>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d016      	beq.n	8000ecc <main+0xf4>
      ID_past = ID;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	73bb      	strb	r3, [r7, #14]
      color_past = color;
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	733b      	strb	r3, [r7, #12]
      /*
       * Since data transfer to the first LED may fail,
       * the same output process is repeated.
       */
      setPattern(ID, color);
 8000ea6:	7b7a      	ldrb	r2, [r7, #13]
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff3f 	bl	8000d30 <setPattern>
      HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f000 fdbe 	bl	8001a34 <HAL_Delay>
      setPattern(ID, color);
 8000eb8:	7b7a      	ldrb	r2, [r7, #13]
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff36 	bl	8000d30 <setPattern>
    }

    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000ec4:	e002      	b.n	8000ecc <main+0xf4>
      HAL_Delay(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f000 fdb4 	bl	8001a34 <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 fcdf 	bl	8001894 <CycleController>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f1      	bne.n	8000ec6 <main+0xee>
    }
    HAL_IWDG_Refresh(&hiwdg);
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <main+0x124>)
 8000ee4:	f002 f8f8 	bl	80030d8 <HAL_IWDG_Refresh>
    if (getMode() == MODE_MEMORY) {
 8000ee8:	e7b9      	b.n	8000e5e <main+0x86>
 8000eea:	bf00      	nop
 8000eec:	200000f8 	.word	0x200000f8
 8000ef0:	2000015c 	.word	0x2000015c
 8000ef4:	42480000 	.word	0x42480000
 8000ef8:	42c80000 	.word	0x42c80000
 8000efc:	2000014c 	.word	0x2000014c

08000f00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b096      	sub	sp, #88	@ 0x58
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f0a:	2228      	movs	r2, #40	@ 0x28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fc92 	bl	8005838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000f34:	230b      	movs	r3, #11
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
      | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f46:	2310      	movs	r3, #16
 8000f48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000f58:	f44f 1330 	mov.w	r3, #2883584	@ 0x2c0000
 8000f5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f8c8 	bl	80030f8 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x72>
    Error_Handler();
 8000f6e:	f000 f9b9 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	61fb      	str	r3, [r7, #28]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f8f0 	bl	8004174 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x9e>
    Error_Handler();
 8000f9a:	f000 f9a3 	bl	80012e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection =
 8000f9e:	2321      	movs	r3, #33	@ 0x21
 8000fa0:	607b      	str	r3, [r7, #4]
      RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fb19 	bl	80045e4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xbc>
    Error_Handler();
 8000fb8:	f000 f994 	bl	80012e4 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3758      	adds	r7, #88	@ 0x58
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <MX_CAN_Init+0x64>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_CAN_Init+0x60>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_CAN_Init+0x60>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_CAN_Init+0x60>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_CAN_Init+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_CAN_Init+0x60>)
 8001006:	2200      	movs	r2, #0
 8001008:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_CAN_Init+0x60>)
 800100c:	2200      	movs	r2, #0
 800100e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_CAN_Init+0x60>)
 8001012:	f000 fd33 	bl	8001a7c <HAL_CAN_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_CAN_Init+0x5c>
    Error_Handler();
 800101c:	f000 f962 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000d0 	.word	0x200000d0
 8001028:	40006400 	.word	0x40006400

0800102c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <MX_I2C1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <MX_I2C1_Init+0x7c>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001066:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <MX_I2C1_Init+0x74>)
 8001068:	f001 fa4e 	bl	8002508 <HAL_I2C_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8001072:	f000 f937 	bl	80012e4 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001076:	2100      	movs	r1, #0
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800107a:	f001 ff47 	bl	8002f0c <HAL_I2CEx_ConfigAnalogFilter>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8001084:	f000 f92e 	bl	80012e4 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001088:	2100      	movs	r1, #0
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_I2C1_Init+0x74>)
 800108c:	f001 ff89 	bl	8002fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_I2C1_Init+0x6e>
    Error_Handler();
 8001096:	f000 f925 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000f8 	.word	0x200000f8
 80010a4:	40005400 	.word	0x40005400
 80010a8:	00101d7c 	.word	0x00101d7c

080010ac <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_IWDG_Init+0x34>)
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <MX_IWDG_Init+0x38>)
 80010b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_IWDG_Init+0x34>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_IWDG_Init+0x34>)
 80010be:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010c2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_IWDG_Init+0x34>)
 80010c6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010ca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_IWDG_Init+0x34>)
 80010ce:	f001 ffb4 	bl	800303a <HAL_IWDG_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_IWDG_Init+0x30>
    Error_Handler();
 80010d8:	f000 f904 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000014c 	.word	0x2000014c
 80010e4:	40003000 	.word	0x40003000

080010e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_SPI1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_SPI1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_SPI1_Init+0x74>)
 80010f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_SPI1_Init+0x74>)
 80010fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001100:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_SPI1_Init+0x74>)
 8001104:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001108:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_SPI1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_SPI1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_SPI1_Init+0x74>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_SPI1_Init+0x74>)
 8001120:	2210      	movs	r2, #16
 8001122:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <MX_SPI1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <MX_SPI1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_SPI1_Init+0x74>)
 8001138:	2207      	movs	r2, #7
 800113a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_SPI1_Init+0x74>)
 8001144:	2208      	movs	r2, #8
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_SPI1_Init+0x74>)
 800114a:	f003 fb71 	bl	8004830 <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI1_Init+0x70>
    Error_Handler();
 8001154:	f000 f8c6 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000015c 	.word	0x2000015c
 8001160:	40013000 	.word	0x40013000

08001164 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <MX_USART1_UART_Init+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_USART1_UART_Init+0x58>)
 80011a8:	f003 feda 	bl	8004f60 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 80011b2:	f000 f897 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000204 	.word	0x20000204
 80011c0:	40013800 	.word	0x40013800

080011c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_DMA_Init+0x38>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <MX_DMA_Init+0x38>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_DMA_Init+0x38>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	200d      	movs	r0, #13
 80011e8:	f000 fe1f 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011ec:	200d      	movs	r0, #13
 80011ee:	f000 fe38 	bl	8001e62 <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a30      	ldr	r2, [pc, #192]	@ (80012dc <MX_GPIO_Init+0xdc>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a2a      	ldr	r2, [pc, #168]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <MX_GPIO_Init+0xdc>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a24      	ldr	r2, [pc, #144]	@ (80012dc <MX_GPIO_Init+0xdc>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_GPIO_Init+0xdc>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <MX_GPIO_Init+0xe0>)
 8001264:	f001 f938 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin COLOR_Pin USER_BTN1_Pin USER_BTN2_Pin
   ID4_Pin */
  GPIO_InitStruct.Pin = MODE_Pin | COLOR_Pin | USER_BTN1_Pin | USER_BTN2_Pin
 8001268:	f248 0356 	movw	r3, #32854	@ 0x8056
 800126c:	60fb      	str	r3, [r7, #12]
      | ID4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f000 ffa0 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 8001284:	2308      	movs	r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f000 ff93 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800129e:	2302      	movs	r3, #2
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <MX_GPIO_Init+0xe0>)
 80012b6:	f000 ff85 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID8_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin | ID8_Pin | ID2_Pin;
 80012ba:	2338      	movs	r3, #56	@ 0x38
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_GPIO_Init+0xe0>)
 80012ce:	f000 ff79 	bl	80021c4 <HAL_GPIO_Init>

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400

080012e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <NeoPixel_Init+0x1c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000028c 	.word	0x2000028c

08001310 <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB RGB_buf[]) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(sizeof(uint8_t), N * 24);
 8001318:	2178      	movs	r1, #120	@ 0x78
 800131a:	2001      	movs	r0, #1
 800131c:	f004 f9ba 	bl	8005694 <calloc>
 8001320:	4603      	mov	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf);
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f832 	bl	8001390 <NeoPixel_Serialize>
  NeoPixel_Reset();
 800132c:	f000 f814 	bl	8001358 <NeoPixel_Reset>
  HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f000 fb7f 	bl	8001a34 <HAL_Delay>
  HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24);
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <NeoPixel_Send+0x44>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2278      	movs	r2, #120	@ 0x78
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fb1a 	bl	8004978 <HAL_SPI_Transmit_DMA>
  free(send_buf);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f004 f9c1 	bl	80056cc <free>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000028c 	.word	0x2000028c

08001358 <NeoPixel_Reset>:

void NeoPixel_Reset() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	e009      	b.n	800137c <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <NeoPixel_Reset+0x34>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1cf9      	adds	r1, r7, #3
 800136e:	2201      	movs	r2, #1
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fb01 	bl	8004978 <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b63      	cmp	r3, #99	@ 0x63
 8001380:	ddf2      	ble.n	8001368 <NeoPixel_Reset+0x10>
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000028c 	.word	0x2000028c

08001390 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e090      	b.n	80014c2 <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e086      	b.n	80014b4 <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	461a      	mov	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f1c3 0307 	rsb	r3, r3, #7
 80013bc:	fa42 f303 	asr.w	r3, r2, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00d      	beq.n	80013e4 <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	22f0      	movs	r2, #240	@ 0xf0
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e00c      	b.n	80013fe <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	22c0      	movs	r2, #192	@ 0xc0
 80013fc:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f1c3 0307 	rsb	r3, r3, #7
 8001414:	fa42 f303 	asr.w	r3, r2, r3
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00d      	beq.n	800143c <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4413      	add	r3, r2
 8001430:	3308      	adds	r3, #8
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	4413      	add	r3, r2
 8001436:	22f0      	movs	r2, #240	@ 0xf0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e00c      	b.n	8001456 <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	3308      	adds	r3, #8
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	22c0      	movs	r2, #192	@ 0xc0
 8001454:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	461a      	mov	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f1c3 0307 	rsb	r3, r3, #7
 800146c:	fa42 f303 	asr.w	r3, r2, r3
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00d      	beq.n	8001494 <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	461a      	mov	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	3310      	adds	r3, #16
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	22f0      	movs	r2, #240	@ 0xf0
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e00c      	b.n	80014ae <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	461a      	mov	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4413      	add	r3, r2
 80014a4:	3310      	adds	r3, #16
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	22c0      	movs	r2, #192	@ 0xc0
 80014ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b07      	cmp	r3, #7
 80014b8:	f77f af75 	ble.w	80013a6 <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	f77f af6b 	ble.w	80013a0 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_MspInit+0x44>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_MspInit+0x44>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_MspInit+0x44>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_MspInit+0x44>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a08      	ldr	r2, [pc, #32]	@ (800151c <HAL_MspInit+0x44>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_MspInit+0x44>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <HAL_CAN_MspInit+0x80>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d129      	bne.n	8001596 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 8001548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_CAN_MspInit+0x84>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001572:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001584:	2309      	movs	r3, #9
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001592:	f000 fe17 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40006400 	.word	0x40006400
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_I2C_MspInit+0x7c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d127      	bne.n	800161a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23c0      	movs	r3, #192	@ 0xc0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e6:	2312      	movs	r3, #18
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <HAL_I2C_MspInit+0x84>)
 80015fe:	f000 fde1 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_I2C_MspInit+0x80>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	@ 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40005400 	.word	0x40005400
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400

08001630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2a      	ldr	r2, [pc, #168]	@ (80016f8 <HAL_SPI_MspInit+0xc8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d14e      	bne.n	80016f0 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 8001658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <HAL_SPI_MspInit+0xcc>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001682:	23a0      	movs	r3, #160	@ 0xa0
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001692:	2305      	movs	r3, #5
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a0:	f000 fd90 	bl	80021c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <HAL_SPI_MspInit+0xd4>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016ac:	2210      	movs	r2, #16
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016d4:	480a      	ldr	r0, [pc, #40]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016d6:	f000 fbde 	bl	8001e96 <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80016e0:	f7ff fe00 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <HAL_SPI_MspInit+0xd0>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013000 	.word	0x40013000
 80016fc:	40021000 	.word	0x40021000
 8001700:	200001c0 	.word	0x200001c0
 8001704:	40020030 	.word	0x40020030

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_UART_MspInit+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d129      	bne.n	800177e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x84>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800175a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176c:	2307      	movs	r3, #7
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177a:	f000 fd23 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40013800 	.word	0x40013800
 800178c:	40021000 	.word	0x40021000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e6:	f000 f905 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel3_IRQHandler+0x10>)
 80017f6:	f000 fbf4 	bl	8001fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001c0 	.word	0x200001c0

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f004 f818 	bl	8005868 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20003000 	.word	0x20003000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000290 	.word	0x20000290
 800186c:	200003e0 	.word	0x200003e0

08001870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <CycleController+0x2a>
    old[data] = HAL_GetTick();
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	18d4      	adds	r4, r2, r3
 80018b6:	f000 f8b1 	bl	8001a1c <HAL_GetTick>
 80018ba:	4603      	mov	r3, r0
 80018bc:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 80018be:	f000 f8ad 	bl	8001a1c <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]
  if (current - (float)old[data] > basis[data]) {
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4413      	add	r3, r2
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	dd07      	ble.n	800190a <CycleController+0x76>
    old[data] = current;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
    return 1;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <CycleController+0x78>
  } else {
    return 0;
 800190a:	2300      	movs	r3, #0
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800194c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001918:	f7ff ffaa 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f003 ff97 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7ff fa47 	bl	8000dd8 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800194c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001958:	08006968 	.word	0x08006968
  ldr r2, =_sbss
 800195c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001960:	200003e0 	.word	0x200003e0

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>
	...

08001968 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_Init+0x28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_Init+0x28>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 fa4b 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fda8 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fa63 	bl	8001e7e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 fa2b 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000040 	.word	0x20000040
 80019ec:	20000048 	.word	0x20000048
 80019f0:	20000044 	.word	0x20000044

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000048 	.word	0x20000048
 8001a18:	20000294 	.word	0x20000294

08001a1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000294 	.word	0x20000294

08001a34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000048 	.word	0x20000048

08001a7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0ed      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fd40 	bl	8001520 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab0:	f7ff ffb4 	bl	8001a1c <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab6:	e012      	b.n	8001ade <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab8:	f7ff ffb0 	bl	8001a1c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d90b      	bls.n	8001ade <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0c5      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0e5      	beq.n	8001ab8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff ff8e 	bl	8001a1c <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	e012      	b.n	8001b2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b04:	f7ff ff8a 	bl	8001a1c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d90b      	bls.n	8001b2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e09f      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e5b      	ldrb	r3, [r3, #25]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e007      	b.n	8001b8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e9b      	ldrb	r3, [r3, #26]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0220 	bic.w	r2, r2, #32
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7edb      	ldrb	r3, [r3, #27]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0210 	orr.w	r2, r2, #16
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0208 	bic.w	r2, r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7f5b      	ldrb	r3, [r3, #29]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0204 	orr.w	r2, r2, #4
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0204 	bic.w	r2, r2, #4
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	ea42 0103 	orr.w	r1, r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	@ (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e037      	b.n	8001f1c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ec2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f940 	bl	8002184 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}  
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Start_IT+0x20>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e04a      	b.n	8001fda <HAL_DMA_Start_IT+0xb6>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d13a      	bne.n	8001fcc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f8d4 	bl	8002128 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020e 	orr.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e00f      	b.n	8001fba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 020a 	orr.w	r2, r2, #10
 8001fa8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0204 	bic.w	r2, r2, #4
 8001fb8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e005      	b.n	8001fd8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <HAL_DMA_IRQHandler+0x72>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01f      	beq.n	8002054 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0204 	bic.w	r2, r2, #4
 8002030:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203a:	2104      	movs	r1, #4
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002052:	e065      	b.n	8002120 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	2202      	movs	r2, #2
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d02c      	beq.n	80020be <HAL_DMA_IRQHandler+0xdc>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d027      	beq.n	80020be <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020a 	bic.w	r2, r2, #10
 800208a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209c:	2102      	movs	r1, #2
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d035      	beq.n	8002120 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80020bc:	e030      	b.n	8002120 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2208      	movs	r2, #8
 80020c4:	409a      	lsls	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d028      	beq.n	8002120 <HAL_DMA_IRQHandler+0x13e>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d023      	beq.n	8002120 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    }
  }
}  
 800211e:	e7ff      	b.n	8002120 <HAL_DMA_IRQHandler+0x13e>
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f202 	lsl.w	r2, r1, r2
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d108      	bne.n	8002168 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002166:	e007      	b.n	8002178 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <DMA_CalcBaseAndBitshift+0x34>)
 8002194:	4413      	add	r3, r2
 8002196:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <DMA_CalcBaseAndBitshift+0x38>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80021a8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	bffdfff8 	.word	0xbffdfff8
 80021bc:	cccccccd 	.word	0xcccccccd
 80021c0:	40020000 	.word	0x40020000

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	e14e      	b.n	8002472 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8140 	beq.w	800246c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d005      	beq.n	8002204 <HAL_GPIO_Init+0x40>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d017      	beq.n	80022a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d123      	bne.n	80022f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	6939      	ldr	r1, [r7, #16]
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0203 	and.w	r2, r3, #3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 809a 	beq.w	800246c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002338:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HAL_GPIO_Init+0x2cc>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <HAL_GPIO_Init+0x2cc>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b52      	ldr	r3, [pc, #328]	@ (8002490 <HAL_GPIO_Init+0x2cc>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002350:	4a50      	ldr	r2, [pc, #320]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800237a:	d013      	beq.n	80023a4 <HAL_GPIO_Init+0x1e0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <HAL_GPIO_Init+0x2d4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00d      	beq.n	80023a0 <HAL_GPIO_Init+0x1dc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_GPIO_Init+0x2d8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <HAL_GPIO_Init+0x1d8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a44      	ldr	r2, [pc, #272]	@ (80024a0 <HAL_GPIO_Init+0x2dc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_GPIO_Init+0x1d4>
 8002394:	2303      	movs	r3, #3
 8002396:	e006      	b.n	80023a6 <HAL_GPIO_Init+0x1e2>
 8002398:	2305      	movs	r3, #5
 800239a:	e004      	b.n	80023a6 <HAL_GPIO_Init+0x1e2>
 800239c:	2302      	movs	r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x1e2>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_GPIO_Init+0x1e2>
 80023a4:	2300      	movs	r3, #0
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	4093      	lsls	r3, r2
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b6:	4937      	ldr	r1, [pc, #220]	@ (8002494 <HAL_GPIO_Init+0x2d0>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c4:	4b37      	ldr	r3, [pc, #220]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023e8:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002418:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800243c:	4a19      	ldr	r2, [pc, #100]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002466:	4a0f      	ldr	r2, [pc, #60]	@ (80024a4 <HAL_GPIO_Init+0x2e0>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f47f aea9 	bne.w	80021d4 <HAL_GPIO_Init+0x10>
  }
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	48000c00 	.word	0x48000c00
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e001      	b.n	80024ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e081      	b.n	800261e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff f83a 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e006      	b.n	8002590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800258e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d104      	bne.n	80025a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	460b      	mov	r3, r1
 8002636:	817b      	strh	r3, [r7, #10]
 8002638:	4613      	mov	r3, r2
 800263a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	f040 80da 	bne.w	80027fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_I2C_Master_Transmit+0x30>
 8002654:	2302      	movs	r3, #2
 8002656:	e0d3      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002660:	f7ff f9dc 	bl	8001a1c <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2319      	movs	r3, #25
 800266c:	2201      	movs	r2, #1
 800266e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa5e 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0be      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2221      	movs	r2, #33	@ 0x21
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2210      	movs	r2, #16
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	893a      	ldrh	r2, [r7, #8]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2bff      	cmp	r3, #255	@ 0xff
 80026b2:	d90e      	bls.n	80026d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	22ff      	movs	r2, #255	@ 0xff
 80026b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	4b51      	ldr	r3, [pc, #324]	@ (8002808 <HAL_I2C_Master_Transmit+0x1e0>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fbec 	bl	8002ea8 <I2C_TransferConfig>
 80026d0:	e06c      	b.n	80027ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	4b48      	ldr	r3, [pc, #288]	@ (8002808 <HAL_I2C_Master_Transmit+0x1e0>)
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fbdb 	bl	8002ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026f2:	e05b      	b.n	80027ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fa6a 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e07b      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d034      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x184>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	d130      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2200      	movs	r2, #0
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9ed 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04d      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2bff      	cmp	r3, #255	@ 0xff
 800276c:	d90e      	bls.n	800278c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	@ 0xff
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	2300      	movs	r3, #0
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fb8f 	bl	8002ea8 <I2C_TransferConfig>
 800278a:	e00f      	b.n	80027ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb7e 	bl	8002ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d19e      	bne.n	80026f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fa50 	bl	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e01a      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_I2C_Master_Transmit+0x1e4>)
 80027de:	400b      	ands	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	80002000 	.word	0x80002000
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 80fd 	bne.w	8002a32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_I2C_Mem_Read+0x34>
 800283e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0f1      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_I2C_Mem_Read+0x4e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ea      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002866:	f7ff f8d9 	bl	8001a1c <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f95b 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d5      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2222      	movs	r2, #34	@ 0x22
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2240      	movs	r2, #64	@ 0x40
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b0:	88f8      	ldrh	r0, [r7, #6]
 80028b2:	893a      	ldrh	r2, [r7, #8]
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f8bf 	bl	8002a44 <I2C_RequestMemoryRead>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0ad      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2bff      	cmp	r3, #255	@ 0xff
 80028e0:	d90e      	bls.n	8002900 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	@ 0xff
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	4b52      	ldr	r3, [pc, #328]	@ (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fad5 	bl	8002ea8 <I2C_TransferConfig>
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_I2C_Mem_Read+0x22c>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fac4 	bl	8002ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f902 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07c      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d130      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	@ 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f8d3 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e04d      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	@ 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	@ 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa75 	bl	8002ea8 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa64 	bl	8002ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d19a      	bne.n	8002920 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f936 	bl	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_I2C_Mem_Read+0x230>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	80002400 	.word	0x80002400
 8002a40:	fe00e800 	.word	0xfe00e800

08002a44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	460b      	mov	r3, r1
 8002a58:	813b      	strh	r3, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <I2C_RequestMemoryRead+0xa4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa1c 	bl	8002ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f8ac 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e02c      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a94:	e015      	b.n	8002ac2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a96:	893b      	ldrh	r3, [r7, #8]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f892 	bl	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e012      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2140      	movs	r1, #64	@ 0x40
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f831 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	80002000 	.word	0x80002000

08002aec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d103      	bne.n	8002b0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d007      	beq.n	8002b28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	619a      	str	r2, [r3, #24]
  }
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	e031      	b.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d02d      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe ff65 	bl	8001a1c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d122      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d113      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0be      	beq.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bde:	e033      	b.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f87f 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e031      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d025      	beq.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7fe ff0e 	bl	8001a1c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11a      	bne.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d013      	beq.n	8002c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d1c4      	bne.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	e02f      	b.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f838 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02d      	b.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fe fecb 	bl	8001a1c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11a      	bne.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d013      	beq.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d1c8      	bne.n	8002c6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d068      	beq.n	8002de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1c:	e049      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d045      	beq.n	8002db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fe79 	bl	8001a1c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_IsErrorOccurred+0x54>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13a      	bne.n	8002db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5e:	d121      	bne.n	8002da4 <I2C_IsErrorOccurred+0xbc>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d66:	d01d      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d01a      	beq.n	8002da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7e:	f7fe fe4d 	bl	8001a1c <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	e00e      	b.n	8002da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d86:	f7fe fe49 	bl	8001a1c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b19      	cmp	r3, #25
 8002d92:	d907      	bls.n	8002da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002da2:	e006      	b.n	8002db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d1e9      	bne.n	8002d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d003      	beq.n	8002dc8 <I2C_IsErrorOccurred+0xe0>
 8002dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0aa      	beq.n	8002d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fe45 	bl	8002aec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <I2C_IsErrorOccurred+0x1bc>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3728      	adds	r7, #40	@ 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <I2C_TransferConfig+0x60>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	43db      	mvns	r3, r3
 8002eec:	ea02 0103 	and.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	03ff63ff 	.word	0x03ff63ff

08002f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d138      	bne.n	8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e032      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d139      	bne.n	800302c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e033      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	@ 0x24
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e041      	b.n	80030d0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003054:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800305e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6852      	ldr	r2, [r2, #4]
 8003068:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6892      	ldr	r2, [r2, #8]
 8003072:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003074:	f7fe fcd2 	bl	8001a1c <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800307a:	e00f      	b.n	800309c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800307c:	f7fe fcce 	bl	8001a1c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b27      	cmp	r3, #39	@ 0x27
 8003088:	d908      	bls.n	800309c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e019      	b.n	80030d0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e8      	bne.n	800307c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d005      	beq.n	80030c4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68d2      	ldr	r2, [r2, #12]
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	e004      	b.n	80030ce <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80030e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f001 b823 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 817d 	beq.w	800342e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003134:	4bbc      	ldr	r3, [pc, #752]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00c      	beq.n	800315a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003140:	4bb9      	ldr	r3, [pc, #740]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d15c      	bne.n	8003206 <HAL_RCC_OscConfig+0x10e>
 800314c:	4bb6      	ldr	r3, [pc, #728]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d155      	bne.n	8003206 <HAL_RCC_OscConfig+0x10e>
 800315a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800315e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x94>
 8003186:	4ba8      	ldr	r3, [pc, #672]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e015      	b.n	80031b8 <HAL_RCC_OscConfig+0xc0>
 800318c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003190:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80031a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80031a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80031c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80031c4:	fa92 f2a2 	rbit	r2, r2
 80031c8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80031cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 811f 	beq.w	800342c <HAL_RCC_OscConfig+0x334>
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8116 	bne.w	800342c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f000 bfaf 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x12e>
 8003218:	4b83      	ldr	r3, [pc, #524]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a82      	ldr	r2, [pc, #520]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e036      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x158>
 8003236:	4b7c      	ldr	r3, [pc, #496]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7b      	ldr	r2, [pc, #492]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b79      	ldr	r3, [pc, #484]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a78      	ldr	r2, [pc, #480]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003248:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e021      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x184>
 8003262:	4b71      	ldr	r3, [pc, #452]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6d      	ldr	r2, [pc, #436]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 800327c:	4b6a      	ldr	r3, [pc, #424]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a69      	ldr	r2, [pc, #420]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b67      	ldr	r3, [pc, #412]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a66      	ldr	r2, [pc, #408]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003294:	4b64      	ldr	r3, [pc, #400]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	f023 020f 	bic.w	r2, r3, #15
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	495f      	ldr	r1, [pc, #380]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d059      	beq.n	8003372 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fbad 	bl	8001a1c <HAL_GetTick>
 80032c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fba8 	bl	8001a1c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d902      	bls.n	80032de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f000 bf43 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 80032de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032e2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80032f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_RCC_OscConfig+0x218>
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e015      	b.n	800333c <HAL_RCC_OscConfig+0x244>
 8003310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003314:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003328:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800332c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003338:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003340:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003344:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003348:	fa92 f2a2 	rbit	r2, r2
 800334c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003350:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003354:	fab2 f282 	clz	r2, r2
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f042 0220 	orr.w	r2, r2, #32
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	f002 021f 	and.w	r2, r2, #31
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ab      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1d0>
 8003370:	e05d      	b.n	800342e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fb53 	bl	8001a1c <HAL_GetTick>
 8003376:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fb4e 	bl	8001a1c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	@ 0x64
 800338a:	d902      	bls.n	8003392 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f000 bee9 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 8003392:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003396:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80033a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2cc>
 80033be:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e015      	b.n	80033f0 <HAL_RCC_OscConfig+0x2f8>
 80033c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033c8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80033d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80033e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_RCC_OscConfig+0x330>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033f4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80033f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80033fc:	fa92 f2a2 	rbit	r2, r2
 8003400:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003404:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ab      	bne.n	800337c <HAL_RCC_OscConfig+0x284>
 8003424:	e003      	b.n	800342e <HAL_RCC_OscConfig+0x336>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 817d 	beq.w	800373e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003444:	4ba6      	ldr	r3, [pc, #664]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003450:	4ba3      	ldr	r3, [pc, #652]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d172      	bne.n	8003542 <HAL_RCC_OscConfig+0x44a>
 800345c:	4ba0      	ldr	r3, [pc, #640]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d16c      	bne.n	8003542 <HAL_RCC_OscConfig+0x44a>
 8003468:	2302      	movs	r3, #2
 800346a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800347a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0x3a0>
 8003492:	4b93      	ldr	r3, [pc, #588]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e013      	b.n	80034c0 <HAL_RCC_OscConfig+0x3c8>
 8003498:	2302      	movs	r3, #2
 800349a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80034aa:	2302      	movs	r3, #2
 80034ac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034bc:	4b88      	ldr	r3, [pc, #544]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	2202      	movs	r2, #2
 80034c2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80034c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80034d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80034d6:	fab2 f282 	clz	r2, r2
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f042 0220 	orr.w	r2, r2, #32
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	f002 021f 	and.w	r2, r2, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCC_OscConfig+0x410>
 80034f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d002      	beq.n	8003508 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f000 be2e 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b75      	ldr	r3, [pc, #468]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	21f8      	movs	r1, #248	@ 0xf8
 800351e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003526:	fa91 f1a1 	rbit	r1, r1
 800352a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800352e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003532:	fab1 f181 	clz	r1, r1
 8003536:	b2c9      	uxtb	r1, r1
 8003538:	408b      	lsls	r3, r1
 800353a:	4969      	ldr	r1, [pc, #420]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003540:	e0fd      	b.n	800373e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8088 	beq.w	8003664 <HAL_RCC_OscConfig+0x56c>
 8003554:	2301      	movs	r3, #1
 8003556:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003566:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003574:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	461a      	mov	r2, r3
 800357c:	2301      	movs	r3, #1
 800357e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fa4c 	bl	8001a1c <HAL_GetTick>
 8003584:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358a:	f7fe fa47 	bl	8001a1c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	f000 bde2 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80035b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4d8>
 80035ca:	4b45      	ldr	r3, [pc, #276]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	e013      	b.n	80035f8 <HAL_RCC_OscConfig+0x500>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80035e2:	2302      	movs	r3, #2
 80035e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80035e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80035f4:	4b3a      	ldr	r3, [pc, #232]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2202      	movs	r2, #2
 80035fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80035fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800360a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0220 	orr.w	r2, r2, #32
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0af      	beq.n	800358a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	21f8      	movs	r1, #248	@ 0xf8
 8003640:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003648:	fa91 f1a1 	rbit	r1, r1
 800364c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003650:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003654:	fab1 f181 	clz	r1, r1
 8003658:	b2c9      	uxtb	r1, r1
 800365a:	408b      	lsls	r3, r1
 800365c:	4920      	ldr	r1, [pc, #128]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
 8003662:	e06c      	b.n	800373e <HAL_RCC_OscConfig+0x646>
 8003664:	2301      	movs	r3, #1
 8003666:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003676:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003684:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	461a      	mov	r2, r3
 800368c:	2300      	movs	r3, #0
 800368e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe f9c4 	bl	8001a1c <HAL_GetTick>
 8003694:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe f9bf 	bl	8001a1c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f000 bd5a 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80036c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d104      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5ec>
 80036da:	4b01      	ldr	r3, [pc, #4]	@ (80036e0 <HAL_RCC_OscConfig+0x5e8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e015      	b.n	800370c <HAL_RCC_OscConfig+0x614>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	2302      	movs	r3, #2
 80036e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80036f6:	2302      	movs	r3, #2
 80036f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80036fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003708:	4bc8      	ldr	r3, [pc, #800]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	2202      	movs	r2, #2
 800370e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003712:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800371e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f042 0220 	orr.w	r2, r2, #32
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f002 021f 	and.w	r2, r2, #31
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ad      	bne.n	800369a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8110 	beq.w	8003974 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d079      	beq.n	8003858 <HAL_RCC_OscConfig+0x760>
 8003764:	2301      	movs	r3, #1
 8003766:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4bab      	ldr	r3, [pc, #684]	@ (8003a30 <HAL_RCC_OscConfig+0x938>)
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	2301      	movs	r3, #1
 800378c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe f945 	bl	8001a1c <HAL_GetTick>
 8003792:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe f940 	bl	8001a1c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d902      	bls.n	80037ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	f000 bcdb 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 80037ae:	2302      	movs	r3, #2
 80037b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037c8:	2202      	movs	r2, #2
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003806:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003808:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 800380a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003814:	2102      	movs	r1, #2
 8003816:	6019      	str	r1, [r3, #0]
 8003818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	fa93 f1a3 	rbit	r1, r3
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800382e:	6019      	str	r1, [r3, #0]
  return result;
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0a0      	beq.n	8003798 <HAL_RCC_OscConfig+0x6a0>
 8003856:	e08d      	b.n	8003974 <HAL_RCC_OscConfig+0x87c>
 8003858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003868:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800387a:	601a      	str	r2, [r3, #0]
  return result;
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003884:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	4b68      	ldr	r3, [pc, #416]	@ (8003a30 <HAL_RCC_OscConfig+0x938>)
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fe f8bf 	bl	8001a1c <HAL_GetTick>
 800389e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe f8ba 	bl	8001a1c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f000 bc55 	b.w	8004164 <HAL_RCC_OscConfig+0x106c>
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038c2:	2202      	movs	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038e6:	2202      	movs	r2, #2
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003924:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 8003928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003932:	2102      	movs	r1, #2
 8003934:	6019      	str	r1, [r3, #0]
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fa93 f1a3 	rbit	r1, r3
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800394c:	6019      	str	r1, [r3, #0]
  return result;
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d197      	bne.n	80038a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 81a1 	beq.w	8003ccc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003990:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d116      	bne.n	80039ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b23      	ldr	r3, [pc, #140]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4a22      	ldr	r2, [pc, #136]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	61d3      	str	r3, [r2, #28]
 80039a8:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80039b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <HAL_RCC_OscConfig+0x93c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_RCC_OscConfig+0x93c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a16      	ldr	r2, [pc, #88]	@ (8003a34 <HAL_RCC_OscConfig+0x93c>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fe f81b 	bl	8001a1c <HAL_GetTick>
 80039e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	e009      	b.n	8003a00 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe f816 	bl	8001a1c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b64      	cmp	r3, #100	@ 0x64
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e3b1      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCC_OscConfig+0x93c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCC_OscConfig+0x940>
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a02      	ldr	r2, [pc, #8]	@ (8003a2c <HAL_RCC_OscConfig+0x934>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e03c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x9ac>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	10908120 	.word	0x10908120
 8003a34:	40007000 	.word	0x40007000
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10c      	bne.n	8003a62 <HAL_RCC_OscConfig+0x96a>
 8003a48:	4bc1      	ldr	r3, [pc, #772]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4ac0      	ldr	r2, [pc, #768]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	4bbe      	ldr	r3, [pc, #760]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4abd      	ldr	r2, [pc, #756]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	e020      	b.n	8003aa4 <HAL_RCC_OscConfig+0x9ac>
 8003a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x994>
 8003a72:	4bb7      	ldr	r3, [pc, #732]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4ab6      	ldr	r2, [pc, #728]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	4bb4      	ldr	r3, [pc, #720]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4ab3      	ldr	r2, [pc, #716]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6213      	str	r3, [r2, #32]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x9ac>
 8003a8c:	4bb0      	ldr	r3, [pc, #704]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4aaf      	ldr	r2, [pc, #700]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	4bad      	ldr	r3, [pc, #692]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4aac      	ldr	r2, [pc, #688]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8081 	beq.w	8003bb8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd ffb1 	bl	8001a1c <HAL_GetTick>
 8003aba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd ffac 	bl	8001a1c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e345      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
 8003ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003adc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b1e:	601a      	str	r2, [r3, #0]
  return result;
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_OscConfig+0xa4c>
 8003b3e:	4b84      	ldr	r3, [pc, #528]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	e013      	b.n	8003b6c <HAL_RCC_OscConfig+0xa74>
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b79      	ldr	r3, [pc, #484]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b70:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b74:	2102      	movs	r1, #2
 8003b76:	6011      	str	r1, [r2, #0]
 8003b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	fa92 f1a2 	rbit	r1, r2
 8003b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b8a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b8e:	6011      	str	r1, [r2, #0]
  return result;
 8003b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b94:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	fab2 f282 	clz	r2, r2
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	f002 021f 	and.w	r2, r2, #31
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d084      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x9c8>
 8003bb6:	e07f      	b.n	8003cb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fd ff30 	bl	8001a1c <HAL_GetTick>
 8003bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	e00b      	b.n	8003bda <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd ff2b 	bl	8001a1c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e2c4      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
 8003bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bde:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003be2:	2202      	movs	r2, #2
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c06:	2202      	movs	r2, #2
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c20:	601a      	str	r2, [r3, #0]
  return result;
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_OscConfig+0xb4e>
 8003c40:	4b43      	ldr	r3, [pc, #268]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	e013      	b.n	8003c6e <HAL_RCC_OscConfig+0xb76>
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c4e:	2202      	movs	r2, #2
 8003c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f2a3 	rbit	r2, r3
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c76:	2102      	movs	r1, #2
 8003c78:	6011      	str	r1, [r2, #0]
 8003c7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c7e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	fa92 f1a2 	rbit	r1, r2
 8003c88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c90:	6011      	str	r1, [r2, #0]
  return result;
 8003c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c96:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	fab2 f282 	clz	r2, r2
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f002 021f 	and.w	r2, r2, #31
 8003cac:	2101      	movs	r1, #1
 8003cae:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d184      	bne.n	8003bc2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8242 	beq.w	8004162 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cde:	4b1c      	ldr	r3, [pc, #112]	@ (8003d50 <HAL_RCC_OscConfig+0xc58>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	f000 8213 	beq.w	8004112 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	f040 8162 	bne.w	8003fc2 <HAL_RCC_OscConfig+0xeca>
 8003cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d02:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d10:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	fa93 f2a3 	rbit	r2, r3
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d22:	601a      	str	r2, [r3, #0]
  return result;
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2300      	movs	r3, #0
 8003d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd fe6a 	bl	8001a1c <HAL_GetTick>
 8003d48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4c:	e00c      	b.n	8003d68 <HAL_RCC_OscConfig+0xc70>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd fe62 	bl	8001a1c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1fd      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d8c:	601a      	str	r2, [r3, #0]
  return result;
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_OscConfig+0xcba>
 8003dac:	4bb0      	ldr	r3, [pc, #704]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	e027      	b.n	8003e02 <HAL_RCC_OscConfig+0xd0a>
 8003db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	fa93 f2a3 	rbit	r2, r3
 8003dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ddc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e06:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e0e:	6011      	str	r1, [r2, #0]
 8003e10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e14:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	fa92 f1a2 	rbit	r1, r2
 8003e1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e26:	6011      	str	r1, [r2, #0]
  return result;
 8003e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	fab2 f282 	clz	r2, r2
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f042 0220 	orr.w	r2, r2, #32
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	f002 021f 	and.w	r2, r2, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f202 	lsl.w	r2, r1, r2
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d182      	bne.n	8003d54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4e:	4b88      	ldr	r3, [pc, #544]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	497f      	ldr	r1, [pc, #508]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e88:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	fa93 f2a3 	rbit	r2, r3
 8003e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e9a:	601a      	str	r2, [r3, #0]
  return result;
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ea4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003eb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2301      	movs	r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fdae 	bl	8001a1c <HAL_GetTick>
 8003ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec4:	e009      	b.n	8003eda <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fd fda9 	bl	8001a1c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e144      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
 8003eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ede:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003efe:	601a      	str	r2, [r3, #0]
  return result;
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_RCC_OscConfig+0xe2c>
 8003f1e:	4b54      	ldr	r3, [pc, #336]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e027      	b.n	8003f74 <HAL_RCC_OscConfig+0xe7c>
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	4b3f      	ldr	r3, [pc, #252]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fa92 f1a2 	rbit	r1, r2
 8003f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f98:	6011      	str	r1, [r2, #0]
  return result;
 8003f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	fab2 f282 	clz	r2, r2
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f042 0220 	orr.w	r2, r2, #32
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d082      	beq.n	8003ec6 <HAL_RCC_OscConfig+0xdce>
 8003fc0:	e0cf      	b.n	8004162 <HAL_RCC_OscConfig+0x106a>
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f2a3 	rbit	r2, r3
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003fe6:	601a      	str	r2, [r3, #0]
  return result;
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ff0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ffc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	2300      	movs	r3, #0
 8004006:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fd08 	bl	8001a1c <HAL_GetTick>
 800400c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004010:	e009      	b.n	8004026 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fd fd03 	bl	8001a1c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e09e      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800402e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004038:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004046:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800404a:	601a      	str	r2, [r3, #0]
  return result;
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d104      	bne.n	8004074 <HAL_RCC_OscConfig+0xf7c>
 800406a:	4b01      	ldr	r3, [pc, #4]	@ (8004070 <HAL_RCC_OscConfig+0xf78>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	e029      	b.n	80040c4 <HAL_RCC_OscConfig+0xfcc>
 8004070:	40021000 	.word	0x40021000
 8004074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004078:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800407c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004086:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	fa93 f2a3 	rbit	r2, r3
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCC_OscConfig+0x1078>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040c8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040d6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	fa92 f1a2 	rbit	r1, r2
 80040e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80040e8:	6011      	str	r1, [r2, #0]
  return result;
 80040ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f042 0220 	orr.w	r2, r2, #32
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f002 021f 	and.w	r2, r2, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f202 	lsl.w	r2, r1, r2
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d180      	bne.n	8004012 <HAL_RCC_OscConfig+0xf1a>
 8004110:	e027      	b.n	8004162 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01e      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004126:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_RCC_OscConfig+0x1078>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800412e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004132:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	429a      	cmp	r2, r3
 8004144:	d10b      	bne.n	800415e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800414a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800414e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004152:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000

08004174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b09e      	sub	sp, #120	@ 0x78
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e162      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b90      	ldr	r3, [pc, #576]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d910      	bls.n	80041bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b8d      	ldr	r3, [pc, #564]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 0207 	bic.w	r2, r3, #7
 80041a2:	498b      	ldr	r1, [pc, #556]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b89      	ldr	r3, [pc, #548]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e14a      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b82      	ldr	r3, [pc, #520]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	497f      	ldr	r1, [pc, #508]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80dc 	beq.w	80043a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d13c      	bne.n	800426a <HAL_RCC_ClockConfig+0xf6>
 80041f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d102      	bne.n	800421a <HAL_RCC_ClockConfig+0xa6>
 8004214:	4b6f      	ldr	r3, [pc, #444]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	e00f      	b.n	800423a <HAL_RCC_ClockConfig+0xc6>
 800421a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800421e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	667b      	str	r3, [r7, #100]	@ 0x64
 8004228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800422c:	663b      	str	r3, [r7, #96]	@ 0x60
 800422e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004236:	4b67      	ldr	r3, [pc, #412]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800423e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004242:	fa92 f2a2 	rbit	r2, r2
 8004246:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004248:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f002 021f 	and.w	r2, r2, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d17b      	bne.n	800435e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0f3      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d13c      	bne.n	80042ec <HAL_RCC_ClockConfig+0x178>
 8004272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004276:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_RCC_ClockConfig+0x128>
 8004296:	4b4f      	ldr	r3, [pc, #316]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	e00f      	b.n	80042bc <HAL_RCC_ClockConfig+0x148>
 800429c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80042b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b8:	4b46      	ldr	r3, [pc, #280]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042c4:	fa92 f2a2 	rbit	r2, r2
 80042c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80042ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042cc:	fab2 f282 	clz	r2, r2
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f042 0220 	orr.w	r2, r2, #32
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f002 021f 	and.w	r2, r2, #31
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d13a      	bne.n	800435e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b2      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
 80042ec:	2302      	movs	r3, #2
 80042ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80042f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_RCC_ClockConfig+0x1a0>
 800430e:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	e00d      	b.n	8004330 <HAL_RCC_ClockConfig+0x1bc>
 8004314:	2302      	movs	r3, #2
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	4b29      	ldr	r3, [pc, #164]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	2202      	movs	r2, #2
 8004332:	61ba      	str	r2, [r7, #24]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	fa92 f2a2 	rbit	r2, r2
 800433a:	617a      	str	r2, [r7, #20]
  return result;
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	fab2 f282 	clz	r2, r2
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	f042 0220 	orr.w	r2, r2, #32
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	f002 021f 	and.w	r2, r2, #31
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e079      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435e:	4b1d      	ldr	r3, [pc, #116]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	491a      	ldr	r1, [pc, #104]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004370:	f7fd fb54 	bl	8001a1c <HAL_GetTick>
 8004374:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	e00a      	b.n	800438e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004378:	f7fd fb50 	bl	8001a1c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e061      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_RCC_ClockConfig+0x260>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 020c 	and.w	r2, r3, #12
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429a      	cmp	r2, r3
 800439e:	d1eb      	bne.n	8004378 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d214      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	4906      	ldr	r1, [pc, #24]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <HAL_RCC_ClockConfig+0x25c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e040      	b.n	8004452 <HAL_RCC_ClockConfig+0x2de>
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_RCC_ClockConfig+0x2e8>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	491a      	ldr	r1, [pc, #104]	@ (800445c <HAL_RCC_ClockConfig+0x2e8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b16      	ldr	r3, [pc, #88]	@ (800445c <HAL_RCC_ClockConfig+0x2e8>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4912      	ldr	r1, [pc, #72]	@ (800445c <HAL_RCC_ClockConfig+0x2e8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004416:	f000 f829 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <HAL_RCC_ClockConfig+0x2e8>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004424:	22f0      	movs	r2, #240	@ 0xf0
 8004426:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	fa92 f2a2 	rbit	r2, r2
 800442e:	60fa      	str	r2, [r7, #12]
  return result;
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	fab2 f282 	clz	r2, r2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	40d3      	lsrs	r3, r2
 800443a:	4a09      	ldr	r2, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x2ec>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	fa21 f303 	lsr.w	r3, r1, r3
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <HAL_RCC_ClockConfig+0x2f0>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <HAL_RCC_ClockConfig+0x2f4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd faa2 	bl	8001994 <HAL_InitTick>
  
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3778      	adds	r7, #120	@ 0x78
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	080068f4 	.word	0x080068f4
 8004464:	20000040 	.word	0x20000040
 8004468:	20000044 	.word	0x20000044

0800446c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	b08b      	sub	sp, #44	@ 0x2c
 8004470:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004486:	4b29      	ldr	r3, [pc, #164]	@ (800452c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d002      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x30>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x36>
 800449a:	e03c      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800449c:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <HAL_RCC_GetSysClockFreq+0xc4>)
 800449e:	623b      	str	r3, [r7, #32]
      break;
 80044a0:	e03c      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80044a8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80044ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	fa92 f2a2 	rbit	r2, r2
 80044b4:	607a      	str	r2, [r7, #4]
  return result;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	fab2 f282 	clz	r2, r2
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	40d3      	lsrs	r3, r2
 80044c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044c2:	5cd3      	ldrb	r3, [r2, r3]
 80044c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044c6:	4b19      	ldr	r3, [pc, #100]	@ (800452c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	220f      	movs	r2, #15
 80044d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	fa92 f2a2 	rbit	r2, r2
 80044d8:	60fa      	str	r2, [r7, #12]
  return result;
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	fab2 f282 	clz	r2, r2
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	40d3      	lsrs	r3, r2
 80044e4:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004530 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
 8004504:	e004      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <HAL_RCC_GetSysClockFreq+0xd0>)
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	623b      	str	r3, [r7, #32]
      break;
 8004514:	e002      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004518:	623b      	str	r3, [r7, #32]
      break;
 800451a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451c:	6a3b      	ldr	r3, [r7, #32]
}
 800451e:	4618      	mov	r0, r3
 8004520:	372c      	adds	r7, #44	@ 0x2c
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	01e84800 	.word	0x01e84800
 8004534:	0800690c 	.word	0x0800690c
 8004538:	0800691c 	.word	0x0800691c
 800453c:	003d0900 	.word	0x003d0900
 8004540:	007a1200 	.word	0x007a1200

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000040 	.word	0x20000040

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004562:	f7ff ffef 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004570:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	603a      	str	r2, [r7, #0]
  return result;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x40>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	08006904 	.word	0x08006904

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045a6:	f7ff ffcd 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80045b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80045b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	fa92 f2a2 	rbit	r2, r2
 80045c0:	603a      	str	r2, [r7, #0]
  return result;
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	40d3      	lsrs	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08006904 	.word	0x08006904

080045e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b092      	sub	sp, #72	@ 0x48
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80cd 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004608:	4b86      	ldr	r3, [pc, #536]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10e      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b83      	ldr	r3, [pc, #524]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a82      	ldr	r2, [pc, #520]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
 8004620:	4b80      	ldr	r3, [pc, #512]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b7d      	ldr	r3, [pc, #500]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b7a      	ldr	r3, [pc, #488]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a79      	ldr	r2, [pc, #484]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fd f9e7 	bl	8001a1c <HAL_GetTick>
 800464e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fd f9e3 	bl	8001a1c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b64      	cmp	r3, #100	@ 0x64
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0db      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004670:	4b6c      	ldr	r3, [pc, #432]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004678:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d07d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004688:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800468a:	429a      	cmp	r2, r3
 800468c:	d076      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468e:	4b65      	ldr	r3, [pc, #404]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800469c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b5e      	ldr	r3, [pc, #376]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b55      	ldr	r3, [pc, #340]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e0:	4a50      	ldr	r2, [pc, #320]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d045      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fd f994 	bl	8001a1c <HAL_GetTick>
 80046f4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fd f990 	bl	8001a1c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e086      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800470e:	2302      	movs	r3, #2
 8004710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
 800471a:	2302      	movs	r3, #2
 800471c:	623b      	str	r3, [r7, #32]
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	61fb      	str	r3, [r7, #28]
  return result;
 8004726:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d102      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	e007      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004742:	2302      	movs	r3, #2
 8004744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	2202      	movs	r2, #2
 8004754:	613a      	str	r2, [r7, #16]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	fa92 f2a2 	rbit	r2, r2
 800475c:	60fa      	str	r2, [r7, #12]
  return result;
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	fab2 f282 	clz	r2, r2
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f002 021f 	and.w	r2, r2, #31
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f202 	lsl.w	r2, r1, r2
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0bd      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800477c:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4926      	ldr	r1, [pc, #152]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478a:	4313      	orrs	r3, r2
 800478c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800478e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	491a      	ldr	r1, [pc, #104]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047cc:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	f023 0210 	bic.w	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4912      	ldr	r1, [pc, #72]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	490b      	ldr	r1, [pc, #44]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004816:	4313      	orrs	r3, r2
 8004818:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3748      	adds	r7, #72	@ 0x48
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	10908100 	.word	0x10908100

08004830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e095      	b.n	800496e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004852:	d009      	beq.n	8004868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
 800485a:	e005      	b.n	8004868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fed4 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a8:	d902      	bls.n	80048b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e002      	b.n	80048b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048be:	d007      	beq.n	80048d0 <HAL_SPI_Init+0xa0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004912:	ea42 0103 	orr.w	r1, r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	f003 0204 	and.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800494c:	ea42 0103 	orr.w	r1, r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_SPI_Transmit_DMA+0x20>
 8004994:	2302      	movs	r3, #2
 8004996:	e0d4      	b.n	8004b42 <HAL_SPI_Transmit_DMA+0x1ca>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b0:	e0c2      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_SPI_Transmit_DMA+0x46>
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049c2:	e0b9      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2203      	movs	r2, #3
 80049c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0e:	d10f      	bne.n	8004a30 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	4a45      	ldr	r2, [pc, #276]	@ (8004b4c <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	4a44      	ldr	r2, [pc, #272]	@ (8004b50 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a44:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a5e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a68:	d82d      	bhi.n	8004ac6 <HAL_SPI_Transmit_DMA+0x14e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a74:	d127      	bne.n	8004ac6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a92:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aa2:	e010      	b.n	8004ac6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004adc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ade:	f7fd fa21 	bl	8001f24 <HAL_DMA_Start_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004af8:	e01e      	b.n	8004b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d007      	beq.n	8004b18 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0220 	orr.w	r2, r2, #32
 8004b26:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0202 	orr.w	r2, r2, #2
 8004b36:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08004c3b 	.word	0x08004c3b
 8004b50:	08004b95 	.word	0x08004b95
 8004b54:	08004c57 	.word	0x08004c57

08004b58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba2:	f7fc ff3b 	bl	8001a1c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d03b      	beq.n	8004c2e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0220 	bic.w	r2, r2, #32
 8004bc4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0202 	bic.w	r2, r2, #2
 8004bd4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	2164      	movs	r1, #100	@ 0x64
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	f000 f97a 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bea:	f043 0220 	orr.w	r2, r3, #32
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7ff ffaa 	bl	8004b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c2c:	e002      	b.n	8004c34 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f7ff ff92 	bl	8004b58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff ff8f 	bl	8004b6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0203 	bic.w	r2, r2, #3
 8004c72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c78:	f043 0210 	orr.w	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff79 	bl	8004b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca8:	f7fc feb8 	bl	8001a1c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb8:	f7fc feb0 	bl	8001a1c <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	015b      	lsls	r3, r3, #5
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	e054      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d050      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd8:	f7fc fea0 	bl	8001a1c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d902      	bls.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d13d      	bne.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d06:	d111      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d10:	d004      	beq.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d107      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d34:	d10f      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e017      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d19b      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000040 	.word	0x20000040

08004da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dba:	f7fc fe2f 	bl	8001a1c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004dca:	f7fc fe27 	bl	8001a1c <HAL_GetTick>
 8004dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00da      	lsls	r2, r3, #3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	0d1b      	lsrs	r3, r3, #20
 8004de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004df0:	e060      	b.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004df8:	d107      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d050      	beq.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e12:	f7fc fe03 	bl	8001a1c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d902      	bls.n	8004e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d13d      	bne.n	8004ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e40:	d111      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e4a:	d004      	beq.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d107      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6e:	d10f      	bne.n	8004e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e010      	b.n	8004ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d196      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3728      	adds	r7, #40	@ 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000040 	.word	0x20000040

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff5b 	bl	8004da8 <SPI_WaitFifoStateUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e027      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2180      	movs	r1, #128	@ 0x80
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fec0 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e014      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff ff34 	bl	8004da8 <SPI_WaitFifoStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e000      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e040      	b.n	8004ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fbc0 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	@ 0x24
 8004f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f82c 	bl	8004ffc <UART_SetConfig>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e022      	b.n	8004ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f956 	bl	8005268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f9dd 	bl	80053ac <UART_CheckIdleState>
 8004ff2:	4603      	mov	r3, r0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b8a      	ldr	r3, [pc, #552]	@ (8005250 <UART_SetConfig+0x254>)
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	430b      	orrs	r3, r1
 8005032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a78      	ldr	r2, [pc, #480]	@ (8005254 <UART_SetConfig+0x258>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d120      	bne.n	80050ba <UART_SetConfig+0xbe>
 8005078:	4b77      	ldr	r3, [pc, #476]	@ (8005258 <UART_SetConfig+0x25c>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	2b03      	cmp	r3, #3
 8005082:	d817      	bhi.n	80050b4 <UART_SetConfig+0xb8>
 8005084:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <UART_SetConfig+0x90>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a9 	.word	0x080050a9
 8005094:	080050af 	.word	0x080050af
 8005098:	080050a3 	.word	0x080050a3
 800509c:	2300      	movs	r3, #0
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e01d      	b.n	80050de <UART_SetConfig+0xe2>
 80050a2:	2302      	movs	r3, #2
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e01a      	b.n	80050de <UART_SetConfig+0xe2>
 80050a8:	2304      	movs	r3, #4
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e017      	b.n	80050de <UART_SetConfig+0xe2>
 80050ae:	2308      	movs	r3, #8
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e014      	b.n	80050de <UART_SetConfig+0xe2>
 80050b4:	2310      	movs	r3, #16
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e011      	b.n	80050de <UART_SetConfig+0xe2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a67      	ldr	r2, [pc, #412]	@ (800525c <UART_SetConfig+0x260>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d102      	bne.n	80050ca <UART_SetConfig+0xce>
 80050c4:	2300      	movs	r3, #0
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e009      	b.n	80050de <UART_SetConfig+0xe2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a64      	ldr	r2, [pc, #400]	@ (8005260 <UART_SetConfig+0x264>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d102      	bne.n	80050da <UART_SetConfig+0xde>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e001      	b.n	80050de <UART_SetConfig+0xe2>
 80050da:	2310      	movs	r3, #16
 80050dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e6:	d15a      	bne.n	800519e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050e8:	7ffb      	ldrb	r3, [r7, #31]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d827      	bhi.n	800513e <UART_SetConfig+0x142>
 80050ee:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <UART_SetConfig+0xf8>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	0800513f 	.word	0x0800513f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800513f 	.word	0x0800513f
 800510c:	0800513f 	.word	0x0800513f
 8005110:	0800513f 	.word	0x0800513f
 8005114:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7ff fa20 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 800511c:	61b8      	str	r0, [r7, #24]
        break;
 800511e:	e013      	b.n	8005148 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7ff fa3e 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8005124:	61b8      	str	r0, [r7, #24]
        break;
 8005126:	e00f      	b.n	8005148 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b4e      	ldr	r3, [pc, #312]	@ (8005264 <UART_SetConfig+0x268>)
 800512a:	61bb      	str	r3, [r7, #24]
        break;
 800512c:	e00c      	b.n	8005148 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7ff f99d 	bl	800446c <HAL_RCC_GetSysClockFreq>
 8005132:	61b8      	str	r0, [r7, #24]
        break;
 8005134:	e008      	b.n	8005148 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513a:	61bb      	str	r3, [r7, #24]
        break;
 800513c:	e004      	b.n	8005148 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	77bb      	strb	r3, [r7, #30]
        break;
 8005146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d074      	beq.n	8005238 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	005a      	lsls	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d916      	bls.n	8005198 <UART_SetConfig+0x19c>
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005170:	d212      	bcs.n	8005198 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	b29a      	uxth	r2, r3
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	4313      	orrs	r3, r2
 800518c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	89fa      	ldrh	r2, [r7, #14]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e04f      	b.n	8005238 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	77bb      	strb	r3, [r7, #30]
 800519c:	e04c      	b.n	8005238 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d828      	bhi.n	80051f6 <UART_SetConfig+0x1fa>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0x1b0>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7ff f9c4 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 80051d4:	61b8      	str	r0, [r7, #24]
        break;
 80051d6:	e013      	b.n	8005200 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7ff f9e2 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 80051dc:	61b8      	str	r0, [r7, #24]
        break;
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <UART_SetConfig+0x268>)
 80051e2:	61bb      	str	r3, [r7, #24]
        break;
 80051e4:	e00c      	b.n	8005200 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7ff f941 	bl	800446c <HAL_RCC_GetSysClockFreq>
 80051ea:	61b8      	str	r0, [r7, #24]
        break;
 80051ec:	e008      	b.n	8005200 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f2:	61bb      	str	r3, [r7, #24]
        break;
 80051f4:	e004      	b.n	8005200 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	77bb      	strb	r3, [r7, #30]
        break;
 80051fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	085a      	lsrs	r2, r3, #1
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d909      	bls.n	8005234 <UART_SetConfig+0x238>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005226:	d205      	bcs.n	8005234 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	e001      	b.n	8005238 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005244:	7fbb      	ldrb	r3, [r7, #30]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	efff69f3 	.word	0xefff69f3
 8005254:	40013800 	.word	0x40013800
 8005258:	40021000 	.word	0x40021000
 800525c:	40004400 	.word	0x40004400
 8005260:	40004800 	.word	0x40004800
 8005264:	007a1200 	.word	0x007a1200

08005268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01a      	beq.n	800537e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005366:	d10a      	bne.n	800537e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b098      	sub	sp, #96	@ 0x60
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053bc:	f7fc fb2e 	bl	8001a1c <HAL_GetTick>
 80053c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d12e      	bne.n	800542e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d8:	2200      	movs	r2, #0
 80053da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f88c 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d021      	beq.n	800542e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005408:	647b      	str	r3, [r7, #68]	@ 0x44
 800540a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800540e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e6      	bne.n	80053ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e062      	b.n	80054f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d149      	bne.n	80054d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f856 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03c      	beq.n	80054d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	623b      	str	r3, [r7, #32]
   return(result);
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800546a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005474:	633b      	str	r3, [r7, #48]	@ 0x30
 8005476:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800547a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3308      	adds	r3, #8
 800548e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	60fb      	str	r3, [r7, #12]
   return(result);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	617b      	str	r3, [r7, #20]
   return(result);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e011      	b.n	80054f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3758      	adds	r7, #88	@ 0x58
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	e049      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d045      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fc fa81 	bl	8001a1c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e048      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d031      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b08      	cmp	r3, #8
 800554a:	d110      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2208      	movs	r2, #8
 8005552:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f838 	bl	80055ca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2208      	movs	r2, #8
 800555e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e029      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800557c:	d111      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f81e 	bl	80055ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e00f      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d0a6      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b095      	sub	sp, #84	@ 0x54
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	61fb      	str	r3, [r7, #28]
   return(result);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800562a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563c:	2b01      	cmp	r3, #1
 800563e:	d118      	bne.n	8005672 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	60bb      	str	r3, [r7, #8]
   return(result);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0310 	bic.w	r3, r3, #16
 8005654:	647b      	str	r3, [r7, #68]	@ 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	613b      	str	r3, [r7, #16]
   return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005686:	bf00      	nop
 8005688:	3754      	adds	r7, #84	@ 0x54
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <calloc>:
 8005694:	4b02      	ldr	r3, [pc, #8]	@ (80056a0 <calloc+0xc>)
 8005696:	460a      	mov	r2, r1
 8005698:	4601      	mov	r1, r0
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	f000 b802 	b.w	80056a4 <_calloc_r>
 80056a0:	2000004c 	.word	0x2000004c

080056a4 <_calloc_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	fba1 5402 	umull	r5, r4, r1, r2
 80056aa:	b93c      	cbnz	r4, 80056bc <_calloc_r+0x18>
 80056ac:	4629      	mov	r1, r5
 80056ae:	f000 f837 	bl	8005720 <_malloc_r>
 80056b2:	4606      	mov	r6, r0
 80056b4:	b928      	cbnz	r0, 80056c2 <_calloc_r+0x1e>
 80056b6:	2600      	movs	r6, #0
 80056b8:	4630      	mov	r0, r6
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	220c      	movs	r2, #12
 80056be:	6002      	str	r2, [r0, #0]
 80056c0:	e7f9      	b.n	80056b6 <_calloc_r+0x12>
 80056c2:	462a      	mov	r2, r5
 80056c4:	4621      	mov	r1, r4
 80056c6:	f000 f8b7 	bl	8005838 <memset>
 80056ca:	e7f5      	b.n	80056b8 <_calloc_r+0x14>

080056cc <free>:
 80056cc:	4b02      	ldr	r3, [pc, #8]	@ (80056d8 <free+0xc>)
 80056ce:	4601      	mov	r1, r0
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	f000 b8f5 	b.w	80058c0 <_free_r>
 80056d6:	bf00      	nop
 80056d8:	2000004c 	.word	0x2000004c

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0f      	ldr	r6, [pc, #60]	@ (800571c <sbrk_aligned+0x40>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 f8ae 	bl	8005848 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f8a9 	bl	8005848 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d103      	bne.n	8005702 <sbrk_aligned+0x26>
 80056fa:	f04f 34ff 	mov.w	r4, #4294967295
 80056fe:	4620      	mov	r0, r4
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	1cc4      	adds	r4, r0, #3
 8005704:	f024 0403 	bic.w	r4, r4, #3
 8005708:	42a0      	cmp	r0, r4
 800570a:	d0f8      	beq.n	80056fe <sbrk_aligned+0x22>
 800570c:	1a21      	subs	r1, r4, r0
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f89a 	bl	8005848 <_sbrk_r>
 8005714:	3001      	adds	r0, #1
 8005716:	d1f2      	bne.n	80056fe <sbrk_aligned+0x22>
 8005718:	e7ef      	b.n	80056fa <sbrk_aligned+0x1e>
 800571a:	bf00      	nop
 800571c:	20000298 	.word	0x20000298

08005720 <_malloc_r>:
 8005720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005724:	1ccd      	adds	r5, r1, #3
 8005726:	f025 0503 	bic.w	r5, r5, #3
 800572a:	3508      	adds	r5, #8
 800572c:	2d0c      	cmp	r5, #12
 800572e:	bf38      	it	cc
 8005730:	250c      	movcc	r5, #12
 8005732:	2d00      	cmp	r5, #0
 8005734:	4606      	mov	r6, r0
 8005736:	db01      	blt.n	800573c <_malloc_r+0x1c>
 8005738:	42a9      	cmp	r1, r5
 800573a:	d904      	bls.n	8005746 <_malloc_r+0x26>
 800573c:	230c      	movs	r3, #12
 800573e:	6033      	str	r3, [r6, #0]
 8005740:	2000      	movs	r0, #0
 8005742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800581c <_malloc_r+0xfc>
 800574a:	f000 f869 	bl	8005820 <__malloc_lock>
 800574e:	f8d8 3000 	ldr.w	r3, [r8]
 8005752:	461c      	mov	r4, r3
 8005754:	bb44      	cbnz	r4, 80057a8 <_malloc_r+0x88>
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f7ff ffbf 	bl	80056dc <sbrk_aligned>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	4604      	mov	r4, r0
 8005762:	d158      	bne.n	8005816 <_malloc_r+0xf6>
 8005764:	f8d8 4000 	ldr.w	r4, [r8]
 8005768:	4627      	mov	r7, r4
 800576a:	2f00      	cmp	r7, #0
 800576c:	d143      	bne.n	80057f6 <_malloc_r+0xd6>
 800576e:	2c00      	cmp	r4, #0
 8005770:	d04b      	beq.n	800580a <_malloc_r+0xea>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	4639      	mov	r1, r7
 8005776:	4630      	mov	r0, r6
 8005778:	eb04 0903 	add.w	r9, r4, r3
 800577c:	f000 f864 	bl	8005848 <_sbrk_r>
 8005780:	4581      	cmp	r9, r0
 8005782:	d142      	bne.n	800580a <_malloc_r+0xea>
 8005784:	6821      	ldr	r1, [r4, #0]
 8005786:	1a6d      	subs	r5, r5, r1
 8005788:	4629      	mov	r1, r5
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ffa6 	bl	80056dc <sbrk_aligned>
 8005790:	3001      	adds	r0, #1
 8005792:	d03a      	beq.n	800580a <_malloc_r+0xea>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	442b      	add	r3, r5
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	f8d8 3000 	ldr.w	r3, [r8]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	bb62      	cbnz	r2, 80057fc <_malloc_r+0xdc>
 80057a2:	f8c8 7000 	str.w	r7, [r8]
 80057a6:	e00f      	b.n	80057c8 <_malloc_r+0xa8>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	1b52      	subs	r2, r2, r5
 80057ac:	d420      	bmi.n	80057f0 <_malloc_r+0xd0>
 80057ae:	2a0b      	cmp	r2, #11
 80057b0:	d917      	bls.n	80057e2 <_malloc_r+0xc2>
 80057b2:	1961      	adds	r1, r4, r5
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	6059      	strne	r1, [r3, #4]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	bf08      	it	eq
 80057c0:	f8c8 1000 	streq.w	r1, [r8]
 80057c4:	5162      	str	r2, [r4, r5]
 80057c6:	604b      	str	r3, [r1, #4]
 80057c8:	4630      	mov	r0, r6
 80057ca:	f000 f82f 	bl	800582c <__malloc_unlock>
 80057ce:	f104 000b 	add.w	r0, r4, #11
 80057d2:	1d23      	adds	r3, r4, #4
 80057d4:	f020 0007 	bic.w	r0, r0, #7
 80057d8:	1ac2      	subs	r2, r0, r3
 80057da:	bf1c      	itt	ne
 80057dc:	1a1b      	subne	r3, r3, r0
 80057de:	50a3      	strne	r3, [r4, r2]
 80057e0:	e7af      	b.n	8005742 <_malloc_r+0x22>
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	bf0c      	ite	eq
 80057e8:	f8c8 2000 	streq.w	r2, [r8]
 80057ec:	605a      	strne	r2, [r3, #4]
 80057ee:	e7eb      	b.n	80057c8 <_malloc_r+0xa8>
 80057f0:	4623      	mov	r3, r4
 80057f2:	6864      	ldr	r4, [r4, #4]
 80057f4:	e7ae      	b.n	8005754 <_malloc_r+0x34>
 80057f6:	463c      	mov	r4, r7
 80057f8:	687f      	ldr	r7, [r7, #4]
 80057fa:	e7b6      	b.n	800576a <_malloc_r+0x4a>
 80057fc:	461a      	mov	r2, r3
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	42a3      	cmp	r3, r4
 8005802:	d1fb      	bne.n	80057fc <_malloc_r+0xdc>
 8005804:	2300      	movs	r3, #0
 8005806:	6053      	str	r3, [r2, #4]
 8005808:	e7de      	b.n	80057c8 <_malloc_r+0xa8>
 800580a:	230c      	movs	r3, #12
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	4630      	mov	r0, r6
 8005810:	f000 f80c 	bl	800582c <__malloc_unlock>
 8005814:	e794      	b.n	8005740 <_malloc_r+0x20>
 8005816:	6005      	str	r5, [r0, #0]
 8005818:	e7d6      	b.n	80057c8 <_malloc_r+0xa8>
 800581a:	bf00      	nop
 800581c:	2000029c 	.word	0x2000029c

08005820 <__malloc_lock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_lock+0x8>)
 8005822:	f000 b84b 	b.w	80058bc <__retarget_lock_acquire_recursive>
 8005826:	bf00      	nop
 8005828:	200003dc 	.word	0x200003dc

0800582c <__malloc_unlock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_unlock+0x8>)
 800582e:	f000 b846 	b.w	80058be <__retarget_lock_release_recursive>
 8005832:	bf00      	nop
 8005834:	200003dc 	.word	0x200003dc

08005838 <memset>:
 8005838:	4402      	add	r2, r0
 800583a:	4603      	mov	r3, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	f803 1b01 	strb.w	r1, [r3], #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <_sbrk_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d06      	ldr	r5, [pc, #24]	@ (8005864 <_sbrk_r+0x1c>)
 800584c:	2300      	movs	r3, #0
 800584e:	4604      	mov	r4, r0
 8005850:	4608      	mov	r0, r1
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	f7fb ffd6 	bl	8001804 <_sbrk>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_sbrk_r+0x1a>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_sbrk_r+0x1a>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	200003d8 	.word	0x200003d8

08005868 <__errno>:
 8005868:	4b01      	ldr	r3, [pc, #4]	@ (8005870 <__errno+0x8>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	2000004c 	.word	0x2000004c

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	@ (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	@ (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	@ (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	@ (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 ffc4 	bl	8006814 <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08006960 	.word	0x08006960
 80058b0:	08006960 	.word	0x08006960
 80058b4:	08006960 	.word	0x08006960
 80058b8:	08006964 	.word	0x08006964

080058bc <__retarget_lock_acquire_recursive>:
 80058bc:	4770      	bx	lr

080058be <__retarget_lock_release_recursive>:
 80058be:	4770      	bx	lr

080058c0 <_free_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4605      	mov	r5, r0
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d041      	beq.n	800594c <_free_r+0x8c>
 80058c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058cc:	1f0c      	subs	r4, r1, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	18e4      	addlt	r4, r4, r3
 80058d4:	f7ff ffa4 	bl	8005820 <__malloc_lock>
 80058d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <_free_r+0x90>)
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	b933      	cbnz	r3, 80058ec <_free_r+0x2c>
 80058de:	6063      	str	r3, [r4, #4]
 80058e0:	6014      	str	r4, [r2, #0]
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e8:	f7ff bfa0 	b.w	800582c <__malloc_unlock>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d908      	bls.n	8005902 <_free_r+0x42>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	1821      	adds	r1, r4, r0
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf01      	itttt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	1809      	addeq	r1, r1, r0
 80058fe:	6021      	streq	r1, [r4, #0]
 8005900:	e7ed      	b.n	80058de <_free_r+0x1e>
 8005902:	461a      	mov	r2, r3
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b10b      	cbz	r3, 800590c <_free_r+0x4c>
 8005908:	42a3      	cmp	r3, r4
 800590a:	d9fa      	bls.n	8005902 <_free_r+0x42>
 800590c:	6811      	ldr	r1, [r2, #0]
 800590e:	1850      	adds	r0, r2, r1
 8005910:	42a0      	cmp	r0, r4
 8005912:	d10b      	bne.n	800592c <_free_r+0x6c>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	4401      	add	r1, r0
 8005918:	1850      	adds	r0, r2, r1
 800591a:	4283      	cmp	r3, r0
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	d1e0      	bne.n	80058e2 <_free_r+0x22>
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	6053      	str	r3, [r2, #4]
 8005926:	4408      	add	r0, r1
 8005928:	6010      	str	r0, [r2, #0]
 800592a:	e7da      	b.n	80058e2 <_free_r+0x22>
 800592c:	d902      	bls.n	8005934 <_free_r+0x74>
 800592e:	230c      	movs	r3, #12
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	e7d6      	b.n	80058e2 <_free_r+0x22>
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	1821      	adds	r1, r4, r0
 8005938:	428b      	cmp	r3, r1
 800593a:	bf04      	itt	eq
 800593c:	6819      	ldreq	r1, [r3, #0]
 800593e:	685b      	ldreq	r3, [r3, #4]
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	bf04      	itt	eq
 8005944:	1809      	addeq	r1, r1, r0
 8005946:	6021      	streq	r1, [r4, #0]
 8005948:	6054      	str	r4, [r2, #4]
 800594a:	e7ca      	b.n	80058e2 <_free_r+0x22>
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	2000029c 	.word	0x2000029c

08005954 <pow>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	ed2d 8b02 	vpush	{d8}
 800595a:	eeb0 8a40 	vmov.f32	s16, s0
 800595e:	eef0 8a60 	vmov.f32	s17, s1
 8005962:	ec55 4b11 	vmov	r4, r5, d1
 8005966:	f000 f873 	bl	8005a50 <__ieee754_pow>
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	ec57 6b10 	vmov	r6, r7, d0
 8005976:	f7fb f87d 	bl	8000a74 <__aeabi_dcmpun>
 800597a:	2800      	cmp	r0, #0
 800597c:	d13b      	bne.n	80059f6 <pow+0xa2>
 800597e:	ec51 0b18 	vmov	r0, r1, d8
 8005982:	2200      	movs	r2, #0
 8005984:	2300      	movs	r3, #0
 8005986:	f7fb f843 	bl	8000a10 <__aeabi_dcmpeq>
 800598a:	b1b8      	cbz	r0, 80059bc <pow+0x68>
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	4620      	mov	r0, r4
 8005992:	4629      	mov	r1, r5
 8005994:	f7fb f83c 	bl	8000a10 <__aeabi_dcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d146      	bne.n	8005a2a <pow+0xd6>
 800599c:	ec45 4b10 	vmov	d0, r4, r5
 80059a0:	f000 f848 	bl	8005a34 <finite>
 80059a4:	b338      	cbz	r0, 80059f6 <pow+0xa2>
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fb f839 	bl	8000a24 <__aeabi_dcmplt>
 80059b2:	b300      	cbz	r0, 80059f6 <pow+0xa2>
 80059b4:	f7ff ff58 	bl	8005868 <__errno>
 80059b8:	2322      	movs	r3, #34	@ 0x22
 80059ba:	e01b      	b.n	80059f4 <pow+0xa0>
 80059bc:	ec47 6b10 	vmov	d0, r6, r7
 80059c0:	f000 f838 	bl	8005a34 <finite>
 80059c4:	b9e0      	cbnz	r0, 8005a00 <pow+0xac>
 80059c6:	eeb0 0a48 	vmov.f32	s0, s16
 80059ca:	eef0 0a68 	vmov.f32	s1, s17
 80059ce:	f000 f831 	bl	8005a34 <finite>
 80059d2:	b1a8      	cbz	r0, 8005a00 <pow+0xac>
 80059d4:	ec45 4b10 	vmov	d0, r4, r5
 80059d8:	f000 f82c 	bl	8005a34 <finite>
 80059dc:	b180      	cbz	r0, 8005a00 <pow+0xac>
 80059de:	4632      	mov	r2, r6
 80059e0:	463b      	mov	r3, r7
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fb f845 	bl	8000a74 <__aeabi_dcmpun>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0e2      	beq.n	80059b4 <pow+0x60>
 80059ee:	f7ff ff3b 	bl	8005868 <__errno>
 80059f2:	2321      	movs	r3, #33	@ 0x21
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	ecbd 8b02 	vpop	{d8}
 80059fa:	ec47 6b10 	vmov	d0, r6, r7
 80059fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	4630      	mov	r0, r6
 8005a06:	4639      	mov	r1, r7
 8005a08:	f7fb f802 	bl	8000a10 <__aeabi_dcmpeq>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d0f2      	beq.n	80059f6 <pow+0xa2>
 8005a10:	eeb0 0a48 	vmov.f32	s0, s16
 8005a14:	eef0 0a68 	vmov.f32	s1, s17
 8005a18:	f000 f80c 	bl	8005a34 <finite>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d0ea      	beq.n	80059f6 <pow+0xa2>
 8005a20:	ec45 4b10 	vmov	d0, r4, r5
 8005a24:	f000 f806 	bl	8005a34 <finite>
 8005a28:	e7c3      	b.n	80059b2 <pow+0x5e>
 8005a2a:	4f01      	ldr	r7, [pc, #4]	@ (8005a30 <pow+0xdc>)
 8005a2c:	2600      	movs	r6, #0
 8005a2e:	e7e2      	b.n	80059f6 <pow+0xa2>
 8005a30:	3ff00000 	.word	0x3ff00000

08005a34 <finite>:
 8005a34:	b082      	sub	sp, #8
 8005a36:	ed8d 0b00 	vstr	d0, [sp]
 8005a3a:	9801      	ldr	r0, [sp, #4]
 8005a3c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005a40:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005a44:	0fc0      	lsrs	r0, r0, #31
 8005a46:	b002      	add	sp, #8
 8005a48:	4770      	bx	lr
 8005a4a:	0000      	movs	r0, r0
 8005a4c:	0000      	movs	r0, r0
	...

08005a50 <__ieee754_pow>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b091      	sub	sp, #68	@ 0x44
 8005a56:	ed8d 1b00 	vstr	d1, [sp]
 8005a5a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005a5e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005a62:	ea5a 0001 	orrs.w	r0, sl, r1
 8005a66:	ec57 6b10 	vmov	r6, r7, d0
 8005a6a:	d113      	bne.n	8005a94 <__ieee754_pow+0x44>
 8005a6c:	19b3      	adds	r3, r6, r6
 8005a6e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005a72:	4152      	adcs	r2, r2
 8005a74:	4298      	cmp	r0, r3
 8005a76:	4b98      	ldr	r3, [pc, #608]	@ (8005cd8 <__ieee754_pow+0x288>)
 8005a78:	4193      	sbcs	r3, r2
 8005a7a:	f080 84ea 	bcs.w	8006452 <__ieee754_pow+0xa02>
 8005a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a82:	4630      	mov	r0, r6
 8005a84:	4639      	mov	r1, r7
 8005a86:	f7fa fba5 	bl	80001d4 <__adddf3>
 8005a8a:	ec41 0b10 	vmov	d0, r0, r1
 8005a8e:	b011      	add	sp, #68	@ 0x44
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	4a91      	ldr	r2, [pc, #580]	@ (8005cdc <__ieee754_pow+0x28c>)
 8005a96:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005a9a:	4590      	cmp	r8, r2
 8005a9c:	463d      	mov	r5, r7
 8005a9e:	4633      	mov	r3, r6
 8005aa0:	d806      	bhi.n	8005ab0 <__ieee754_pow+0x60>
 8005aa2:	d101      	bne.n	8005aa8 <__ieee754_pow+0x58>
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	d1ea      	bne.n	8005a7e <__ieee754_pow+0x2e>
 8005aa8:	4592      	cmp	sl, r2
 8005aaa:	d801      	bhi.n	8005ab0 <__ieee754_pow+0x60>
 8005aac:	d10e      	bne.n	8005acc <__ieee754_pow+0x7c>
 8005aae:	b169      	cbz	r1, 8005acc <__ieee754_pow+0x7c>
 8005ab0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005ab4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005ab8:	431d      	orrs	r5, r3
 8005aba:	d1e0      	bne.n	8005a7e <__ieee754_pow+0x2e>
 8005abc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ac0:	18db      	adds	r3, r3, r3
 8005ac2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005ac6:	4152      	adcs	r2, r2
 8005ac8:	429d      	cmp	r5, r3
 8005aca:	e7d4      	b.n	8005a76 <__ieee754_pow+0x26>
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	46c3      	mov	fp, r8
 8005ad0:	da3a      	bge.n	8005b48 <__ieee754_pow+0xf8>
 8005ad2:	4a83      	ldr	r2, [pc, #524]	@ (8005ce0 <__ieee754_pow+0x290>)
 8005ad4:	4592      	cmp	sl, r2
 8005ad6:	d84d      	bhi.n	8005b74 <__ieee754_pow+0x124>
 8005ad8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005adc:	4592      	cmp	sl, r2
 8005ade:	f240 84c7 	bls.w	8006470 <__ieee754_pow+0xa20>
 8005ae2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005ae6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005aea:	2a14      	cmp	r2, #20
 8005aec:	dd0f      	ble.n	8005b0e <__ieee754_pow+0xbe>
 8005aee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005af2:	fa21 f402 	lsr.w	r4, r1, r2
 8005af6:	fa04 f202 	lsl.w	r2, r4, r2
 8005afa:	428a      	cmp	r2, r1
 8005afc:	f040 84b8 	bne.w	8006470 <__ieee754_pow+0xa20>
 8005b00:	f004 0401 	and.w	r4, r4, #1
 8005b04:	f1c4 0402 	rsb	r4, r4, #2
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d158      	bne.n	8005bbe <__ieee754_pow+0x16e>
 8005b0c:	e00e      	b.n	8005b2c <__ieee754_pow+0xdc>
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	d154      	bne.n	8005bbc <__ieee754_pow+0x16c>
 8005b12:	f1c2 0214 	rsb	r2, r2, #20
 8005b16:	fa4a f402 	asr.w	r4, sl, r2
 8005b1a:	fa04 f202 	lsl.w	r2, r4, r2
 8005b1e:	4552      	cmp	r2, sl
 8005b20:	f040 84a3 	bne.w	800646a <__ieee754_pow+0xa1a>
 8005b24:	f004 0401 	and.w	r4, r4, #1
 8005b28:	f1c4 0402 	rsb	r4, r4, #2
 8005b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce4 <__ieee754_pow+0x294>)
 8005b2e:	4592      	cmp	sl, r2
 8005b30:	d12e      	bne.n	8005b90 <__ieee754_pow+0x140>
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	f280 8494 	bge.w	8006462 <__ieee754_pow+0xa12>
 8005b3a:	496a      	ldr	r1, [pc, #424]	@ (8005ce4 <__ieee754_pow+0x294>)
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	463b      	mov	r3, r7
 8005b40:	2000      	movs	r0, #0
 8005b42:	f7fa fe27 	bl	8000794 <__aeabi_ddiv>
 8005b46:	e7a0      	b.n	8005a8a <__ieee754_pow+0x3a>
 8005b48:	2400      	movs	r4, #0
 8005b4a:	bbc1      	cbnz	r1, 8005bbe <__ieee754_pow+0x16e>
 8005b4c:	4a63      	ldr	r2, [pc, #396]	@ (8005cdc <__ieee754_pow+0x28c>)
 8005b4e:	4592      	cmp	sl, r2
 8005b50:	d1ec      	bne.n	8005b2c <__ieee754_pow+0xdc>
 8005b52:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005b56:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	f000 8479 	beq.w	8006452 <__ieee754_pow+0xa02>
 8005b60:	4b61      	ldr	r3, [pc, #388]	@ (8005ce8 <__ieee754_pow+0x298>)
 8005b62:	4598      	cmp	r8, r3
 8005b64:	d908      	bls.n	8005b78 <__ieee754_pow+0x128>
 8005b66:	f1b9 0f00 	cmp.w	r9, #0
 8005b6a:	f2c0 8476 	blt.w	800645a <__ieee754_pow+0xa0a>
 8005b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b72:	e78a      	b.n	8005a8a <__ieee754_pow+0x3a>
 8005b74:	2402      	movs	r4, #2
 8005b76:	e7e8      	b.n	8005b4a <__ieee754_pow+0xfa>
 8005b78:	f1b9 0f00 	cmp.w	r9, #0
 8005b7c:	f04f 0000 	mov.w	r0, #0
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	da81      	bge.n	8005a8a <__ieee754_pow+0x3a>
 8005b86:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005b8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005b8e:	e77c      	b.n	8005a8a <__ieee754_pow+0x3a>
 8005b90:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005b94:	d106      	bne.n	8005ba4 <__ieee754_pow+0x154>
 8005b96:	4632      	mov	r2, r6
 8005b98:	463b      	mov	r3, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	f7fa fccf 	bl	8000540 <__aeabi_dmul>
 8005ba2:	e772      	b.n	8005a8a <__ieee754_pow+0x3a>
 8005ba4:	4a51      	ldr	r2, [pc, #324]	@ (8005cec <__ieee754_pow+0x29c>)
 8005ba6:	4591      	cmp	r9, r2
 8005ba8:	d109      	bne.n	8005bbe <__ieee754_pow+0x16e>
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	db07      	blt.n	8005bbe <__ieee754_pow+0x16e>
 8005bae:	ec47 6b10 	vmov	d0, r6, r7
 8005bb2:	b011      	add	sp, #68	@ 0x44
 8005bb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	f000 bd52 	b.w	8006660 <__ieee754_sqrt>
 8005bbc:	2400      	movs	r4, #0
 8005bbe:	ec47 6b10 	vmov	d0, r6, r7
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	f000 fc88 	bl	80064d8 <fabs>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	ec51 0b10 	vmov	r0, r1, d0
 8005bce:	bb53      	cbnz	r3, 8005c26 <__ieee754_pow+0x1d6>
 8005bd0:	4b44      	ldr	r3, [pc, #272]	@ (8005ce4 <__ieee754_pow+0x294>)
 8005bd2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d002      	beq.n	8005be0 <__ieee754_pow+0x190>
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	d122      	bne.n	8005c26 <__ieee754_pow+0x1d6>
 8005be0:	f1b9 0f00 	cmp.w	r9, #0
 8005be4:	da05      	bge.n	8005bf2 <__ieee754_pow+0x1a2>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	2000      	movs	r0, #0
 8005bec:	493d      	ldr	r1, [pc, #244]	@ (8005ce4 <__ieee754_pow+0x294>)
 8005bee:	f7fa fdd1 	bl	8000794 <__aeabi_ddiv>
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	f6bf af49 	bge.w	8005a8a <__ieee754_pow+0x3a>
 8005bf8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005bfc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005c00:	ea58 0804 	orrs.w	r8, r8, r4
 8005c04:	d108      	bne.n	8005c18 <__ieee754_pow+0x1c8>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f7fa fadf 	bl	80001d0 <__aeabi_dsub>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	e794      	b.n	8005b42 <__ieee754_pow+0xf2>
 8005c18:	2c01      	cmp	r4, #1
 8005c1a:	f47f af36 	bne.w	8005a8a <__ieee754_pow+0x3a>
 8005c1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c22:	4619      	mov	r1, r3
 8005c24:	e731      	b.n	8005a8a <__ieee754_pow+0x3a>
 8005c26:	0feb      	lsrs	r3, r5, #31
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	ea53 0204 	orrs.w	r2, r3, r4
 8005c2e:	d102      	bne.n	8005c36 <__ieee754_pow+0x1e6>
 8005c30:	4632      	mov	r2, r6
 8005c32:	463b      	mov	r3, r7
 8005c34:	e7e9      	b.n	8005c0a <__ieee754_pow+0x1ba>
 8005c36:	3c01      	subs	r4, #1
 8005c38:	431c      	orrs	r4, r3
 8005c3a:	d016      	beq.n	8005c6a <__ieee754_pow+0x21a>
 8005c3c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005cc8 <__ieee754_pow+0x278>
 8005c40:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005c44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c48:	f240 8112 	bls.w	8005e70 <__ieee754_pow+0x420>
 8005c4c:	4b28      	ldr	r3, [pc, #160]	@ (8005cf0 <__ieee754_pow+0x2a0>)
 8005c4e:	459a      	cmp	sl, r3
 8005c50:	4b25      	ldr	r3, [pc, #148]	@ (8005ce8 <__ieee754_pow+0x298>)
 8005c52:	d916      	bls.n	8005c82 <__ieee754_pow+0x232>
 8005c54:	4598      	cmp	r8, r3
 8005c56:	d80b      	bhi.n	8005c70 <__ieee754_pow+0x220>
 8005c58:	f1b9 0f00 	cmp.w	r9, #0
 8005c5c:	da0b      	bge.n	8005c76 <__ieee754_pow+0x226>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	b011      	add	sp, #68	@ 0x44
 8005c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f000 bcf3 	b.w	8006650 <__math_oflow>
 8005c6a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005cd0 <__ieee754_pow+0x280>
 8005c6e:	e7e7      	b.n	8005c40 <__ieee754_pow+0x1f0>
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	dcf3      	bgt.n	8005c5e <__ieee754_pow+0x20e>
 8005c76:	2000      	movs	r0, #0
 8005c78:	b011      	add	sp, #68	@ 0x44
 8005c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7e:	f000 bcdf 	b.w	8006640 <__math_uflow>
 8005c82:	4598      	cmp	r8, r3
 8005c84:	d20c      	bcs.n	8005ca0 <__ieee754_pow+0x250>
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f7fa fec9 	bl	8000a24 <__aeabi_dcmplt>
 8005c92:	3800      	subs	r0, #0
 8005c94:	bf18      	it	ne
 8005c96:	2001      	movne	r0, #1
 8005c98:	f1b9 0f00 	cmp.w	r9, #0
 8005c9c:	daec      	bge.n	8005c78 <__ieee754_pow+0x228>
 8005c9e:	e7df      	b.n	8005c60 <__ieee754_pow+0x210>
 8005ca0:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <__ieee754_pow+0x294>)
 8005ca2:	4598      	cmp	r8, r3
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	d924      	bls.n	8005cf4 <__ieee754_pow+0x2a4>
 8005caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f7fa feb8 	bl	8000a24 <__aeabi_dcmplt>
 8005cb4:	3800      	subs	r0, #0
 8005cb6:	bf18      	it	ne
 8005cb8:	2001      	movne	r0, #1
 8005cba:	f1b9 0f00 	cmp.w	r9, #0
 8005cbe:	dccf      	bgt.n	8005c60 <__ieee754_pow+0x210>
 8005cc0:	e7da      	b.n	8005c78 <__ieee754_pow+0x228>
 8005cc2:	bf00      	nop
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	bff00000 	.word	0xbff00000
 8005cd8:	fff00000 	.word	0xfff00000
 8005cdc:	7ff00000 	.word	0x7ff00000
 8005ce0:	433fffff 	.word	0x433fffff
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	3fefffff 	.word	0x3fefffff
 8005cec:	3fe00000 	.word	0x3fe00000
 8005cf0:	43f00000 	.word	0x43f00000
 8005cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e60 <__ieee754_pow+0x410>)
 8005cf6:	f7fa fa6b 	bl	80001d0 <__aeabi_dsub>
 8005cfa:	a351      	add	r3, pc, #324	@ (adr r3, 8005e40 <__ieee754_pow+0x3f0>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	f7fa fc1c 	bl	8000540 <__aeabi_dmul>
 8005d08:	a34f      	add	r3, pc, #316	@ (adr r3, 8005e48 <__ieee754_pow+0x3f8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7fa fc13 	bl	8000540 <__aeabi_dmul>
 8005d1a:	4b52      	ldr	r3, [pc, #328]	@ (8005e64 <__ieee754_pow+0x414>)
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	468b      	mov	fp, r1
 8005d20:	2200      	movs	r2, #0
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fc0b 	bl	8000540 <__aeabi_dmul>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	a148      	add	r1, pc, #288	@ (adr r1, 8005e50 <__ieee754_pow+0x400>)
 8005d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d34:	f7fa fa4c 	bl	80001d0 <__aeabi_dsub>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	f7fa fc00 	bl	8000540 <__aeabi_dmul>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	2000      	movs	r0, #0
 8005d46:	4948      	ldr	r1, [pc, #288]	@ (8005e68 <__ieee754_pow+0x418>)
 8005d48:	f7fa fa42 	bl	80001d0 <__aeabi_dsub>
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	4680      	mov	r8, r0
 8005d50:	4689      	mov	r9, r1
 8005d52:	462b      	mov	r3, r5
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fbf2 	bl	8000540 <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fbec 	bl	8000540 <__aeabi_dmul>
 8005d68:	a33b      	add	r3, pc, #236	@ (adr r3, 8005e58 <__ieee754_pow+0x408>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fbe7 	bl	8000540 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4650      	mov	r0, sl
 8005d78:	4659      	mov	r1, fp
 8005d7a:	f7fa fa29 	bl	80001d0 <__aeabi_dsub>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4680      	mov	r8, r0
 8005d84:	4689      	mov	r9, r1
 8005d86:	4630      	mov	r0, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f7fa fa23 	bl	80001d4 <__adddf3>
 8005d8e:	2400      	movs	r4, #0
 8005d90:	4632      	mov	r2, r6
 8005d92:	463b      	mov	r3, r7
 8005d94:	4620      	mov	r0, r4
 8005d96:	460d      	mov	r5, r1
 8005d98:	f7fa fa1a 	bl	80001d0 <__aeabi_dsub>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	f7fa fa14 	bl	80001d0 <__aeabi_dsub>
 8005da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005db0:	2300      	movs	r3, #0
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	465b      	mov	r3, fp
 8005dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc4:	f7fa fa04 	bl	80001d0 <__aeabi_dsub>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	462b      	mov	r3, r5
 8005dcc:	f7fa fbb8 	bl	8000540 <__aeabi_dmul>
 8005dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	4689      	mov	r9, r1
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa fbb0 	bl	8000540 <__aeabi_dmul>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4640      	mov	r0, r8
 8005de6:	4649      	mov	r1, r9
 8005de8:	f7fa f9f4 	bl	80001d4 <__adddf3>
 8005dec:	4652      	mov	r2, sl
 8005dee:	465b      	mov	r3, fp
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	4620      	mov	r0, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fba2 	bl	8000540 <__aeabi_dmul>
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4680      	mov	r8, r0
 8005e02:	4689      	mov	r9, r1
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa f9e4 	bl	80001d4 <__adddf3>
 8005e0c:	4b17      	ldr	r3, [pc, #92]	@ (8005e6c <__ieee754_pow+0x41c>)
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	468a      	mov	sl, r1
 8005e16:	468b      	mov	fp, r1
 8005e18:	f340 82ef 	ble.w	80063fa <__ieee754_pow+0x9aa>
 8005e1c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005e20:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005e24:	4303      	orrs	r3, r0
 8005e26:	f000 81e8 	beq.w	80061fa <__ieee754_pow+0x7aa>
 8005e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2300      	movs	r3, #0
 8005e32:	f7fa fdf7 	bl	8000a24 <__aeabi_dcmplt>
 8005e36:	3800      	subs	r0, #0
 8005e38:	bf18      	it	ne
 8005e3a:	2001      	movne	r0, #1
 8005e3c:	e710      	b.n	8005c60 <__ieee754_pow+0x210>
 8005e3e:	bf00      	nop
 8005e40:	60000000 	.word	0x60000000
 8005e44:	3ff71547 	.word	0x3ff71547
 8005e48:	f85ddf44 	.word	0xf85ddf44
 8005e4c:	3e54ae0b 	.word	0x3e54ae0b
 8005e50:	55555555 	.word	0x55555555
 8005e54:	3fd55555 	.word	0x3fd55555
 8005e58:	652b82fe 	.word	0x652b82fe
 8005e5c:	3ff71547 	.word	0x3ff71547
 8005e60:	3ff00000 	.word	0x3ff00000
 8005e64:	3fd00000 	.word	0x3fd00000
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	408fffff 	.word	0x408fffff
 8005e70:	4bd5      	ldr	r3, [pc, #852]	@ (80061c8 <__ieee754_pow+0x778>)
 8005e72:	402b      	ands	r3, r5
 8005e74:	2200      	movs	r2, #0
 8005e76:	b92b      	cbnz	r3, 8005e84 <__ieee754_pow+0x434>
 8005e78:	4bd4      	ldr	r3, [pc, #848]	@ (80061cc <__ieee754_pow+0x77c>)
 8005e7a:	f7fa fb61 	bl	8000540 <__aeabi_dmul>
 8005e7e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005e82:	468b      	mov	fp, r1
 8005e84:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005e88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005e8c:	4413      	add	r3, r2
 8005e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e90:	4bcf      	ldr	r3, [pc, #828]	@ (80061d0 <__ieee754_pow+0x780>)
 8005e92:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005e96:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005e9a:	459b      	cmp	fp, r3
 8005e9c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005ea0:	dd08      	ble.n	8005eb4 <__ieee754_pow+0x464>
 8005ea2:	4bcc      	ldr	r3, [pc, #816]	@ (80061d4 <__ieee754_pow+0x784>)
 8005ea4:	459b      	cmp	fp, r3
 8005ea6:	f340 81a5 	ble.w	80061f4 <__ieee754_pow+0x7a4>
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eac:	3301      	adds	r3, #1
 8005eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005eb4:	f04f 0a00 	mov.w	sl, #0
 8005eb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ebe:	4bc6      	ldr	r3, [pc, #792]	@ (80061d8 <__ieee754_pow+0x788>)
 8005ec0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ec4:	ed93 7b00 	vldr	d7, [r3]
 8005ec8:	4629      	mov	r1, r5
 8005eca:	ec53 2b17 	vmov	r2, r3, d7
 8005ece:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ed2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ed6:	f7fa f97b 	bl	80001d0 <__aeabi_dsub>
 8005eda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee6:	f7fa f975 	bl	80001d4 <__adddf3>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	2000      	movs	r0, #0
 8005ef0:	49ba      	ldr	r1, [pc, #744]	@ (80061dc <__ieee754_pow+0x78c>)
 8005ef2:	f7fa fc4f 	bl	8000794 <__aeabi_ddiv>
 8005ef6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fb1d 	bl	8000540 <__aeabi_dmul>
 8005f06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005f0e:	106d      	asrs	r5, r5, #1
 8005f10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005f14:	f04f 0b00 	mov.w	fp, #0
 8005f18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005f1c:	4661      	mov	r1, ip
 8005f1e:	2200      	movs	r2, #0
 8005f20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005f24:	4658      	mov	r0, fp
 8005f26:	46e1      	mov	r9, ip
 8005f28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	461d      	mov	r5, r3
 8005f30:	f7fa fb06 	bl	8000540 <__aeabi_dmul>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa f948 	bl	80001d0 <__aeabi_dsub>
 8005f40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	f7fa f940 	bl	80001d0 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f58:	f7fa f93a 	bl	80001d0 <__aeabi_dsub>
 8005f5c:	465a      	mov	r2, fp
 8005f5e:	464b      	mov	r3, r9
 8005f60:	f7fa faee 	bl	8000540 <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa f930 	bl	80001d0 <__aeabi_dsub>
 8005f70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f74:	f7fa fae4 	bl	8000540 <__aeabi_dmul>
 8005f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	f7fa fadc 	bl	8000540 <__aeabi_dmul>
 8005f88:	a37d      	add	r3, pc, #500	@ (adr r3, 8006180 <__ieee754_pow+0x730>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	4604      	mov	r4, r0
 8005f90:	460d      	mov	r5, r1
 8005f92:	f7fa fad5 	bl	8000540 <__aeabi_dmul>
 8005f96:	a37c      	add	r3, pc, #496	@ (adr r3, 8006188 <__ieee754_pow+0x738>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa f91a 	bl	80001d4 <__adddf3>
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	f7fa facc 	bl	8000540 <__aeabi_dmul>
 8005fa8:	a379      	add	r3, pc, #484	@ (adr r3, 8006190 <__ieee754_pow+0x740>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa f911 	bl	80001d4 <__adddf3>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	f7fa fac3 	bl	8000540 <__aeabi_dmul>
 8005fba:	a377      	add	r3, pc, #476	@ (adr r3, 8006198 <__ieee754_pow+0x748>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa f908 	bl	80001d4 <__adddf3>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	f7fa faba 	bl	8000540 <__aeabi_dmul>
 8005fcc:	a374      	add	r3, pc, #464	@ (adr r3, 80061a0 <__ieee754_pow+0x750>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f8ff 	bl	80001d4 <__adddf3>
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	462b      	mov	r3, r5
 8005fda:	f7fa fab1 	bl	8000540 <__aeabi_dmul>
 8005fde:	a372      	add	r3, pc, #456	@ (adr r3, 80061a8 <__ieee754_pow+0x758>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa f8f6 	bl	80001d4 <__adddf3>
 8005fe8:	4622      	mov	r2, r4
 8005fea:	4606      	mov	r6, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	462b      	mov	r3, r5
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	f7fa faa4 	bl	8000540 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fa9e 	bl	8000540 <__aeabi_dmul>
 8006004:	465a      	mov	r2, fp
 8006006:	4604      	mov	r4, r0
 8006008:	460d      	mov	r5, r1
 800600a:	464b      	mov	r3, r9
 800600c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006010:	f7fa f8e0 	bl	80001d4 <__adddf3>
 8006014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006018:	f7fa fa92 	bl	8000540 <__aeabi_dmul>
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f7fa f8d8 	bl	80001d4 <__adddf3>
 8006024:	465a      	mov	r2, fp
 8006026:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800602a:	464b      	mov	r3, r9
 800602c:	4658      	mov	r0, fp
 800602e:	4649      	mov	r1, r9
 8006030:	f7fa fa86 	bl	8000540 <__aeabi_dmul>
 8006034:	4b6a      	ldr	r3, [pc, #424]	@ (80061e0 <__ieee754_pow+0x790>)
 8006036:	2200      	movs	r2, #0
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	f7fa f8ca 	bl	80001d4 <__adddf3>
 8006040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006044:	f7fa f8c6 	bl	80001d4 <__adddf3>
 8006048:	46d8      	mov	r8, fp
 800604a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800604e:	460d      	mov	r5, r1
 8006050:	465a      	mov	r2, fp
 8006052:	460b      	mov	r3, r1
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800605c:	f7fa fa70 	bl	8000540 <__aeabi_dmul>
 8006060:	465c      	mov	r4, fp
 8006062:	4680      	mov	r8, r0
 8006064:	4689      	mov	r9, r1
 8006066:	4b5e      	ldr	r3, [pc, #376]	@ (80061e0 <__ieee754_pow+0x790>)
 8006068:	2200      	movs	r2, #0
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa f8af 	bl	80001d0 <__aeabi_dsub>
 8006072:	4632      	mov	r2, r6
 8006074:	463b      	mov	r3, r7
 8006076:	f7fa f8ab 	bl	80001d0 <__aeabi_dsub>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006082:	f7fa f8a5 	bl	80001d0 <__aeabi_dsub>
 8006086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608a:	f7fa fa59 	bl	8000540 <__aeabi_dmul>
 800608e:	4622      	mov	r2, r4
 8006090:	4606      	mov	r6, r0
 8006092:	460f      	mov	r7, r1
 8006094:	462b      	mov	r3, r5
 8006096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800609a:	f7fa fa51 	bl	8000540 <__aeabi_dmul>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4630      	mov	r0, r6
 80060a4:	4639      	mov	r1, r7
 80060a6:	f7fa f895 	bl	80001d4 <__adddf3>
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa f88d 	bl	80001d4 <__adddf3>
 80060ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80060be:	a33c      	add	r3, pc, #240	@ (adr r3, 80061b0 <__ieee754_pow+0x760>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	4658      	mov	r0, fp
 80060c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80060ca:	460d      	mov	r5, r1
 80060cc:	f7fa fa38 	bl	8000540 <__aeabi_dmul>
 80060d0:	465c      	mov	r4, fp
 80060d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d6:	4642      	mov	r2, r8
 80060d8:	464b      	mov	r3, r9
 80060da:	4620      	mov	r0, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	f7fa f877 	bl	80001d0 <__aeabi_dsub>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4630      	mov	r0, r6
 80060e8:	4639      	mov	r1, r7
 80060ea:	f7fa f871 	bl	80001d0 <__aeabi_dsub>
 80060ee:	a332      	add	r3, pc, #200	@ (adr r3, 80061b8 <__ieee754_pow+0x768>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f7fa fa24 	bl	8000540 <__aeabi_dmul>
 80060f8:	a331      	add	r3, pc, #196	@ (adr r3, 80061c0 <__ieee754_pow+0x770>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	4606      	mov	r6, r0
 8006100:	460f      	mov	r7, r1
 8006102:	4620      	mov	r0, r4
 8006104:	4629      	mov	r1, r5
 8006106:	f7fa fa1b 	bl	8000540 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4630      	mov	r0, r6
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa f85f 	bl	80001d4 <__adddf3>
 8006116:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006118:	4b32      	ldr	r3, [pc, #200]	@ (80061e4 <__ieee754_pow+0x794>)
 800611a:	4413      	add	r3, r2
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa f858 	bl	80001d4 <__adddf3>
 8006124:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006128:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800612a:	f7fa f99f 	bl	800046c <__aeabi_i2d>
 800612e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006130:	4b2d      	ldr	r3, [pc, #180]	@ (80061e8 <__ieee754_pow+0x798>)
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006138:	4606      	mov	r6, r0
 800613a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800613e:	460f      	mov	r7, r1
 8006140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006144:	f7fa f846 	bl	80001d4 <__adddf3>
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	f7fa f842 	bl	80001d4 <__adddf3>
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	f7fa f83e 	bl	80001d4 <__adddf3>
 8006158:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800615c:	4632      	mov	r2, r6
 800615e:	463b      	mov	r3, r7
 8006160:	4658      	mov	r0, fp
 8006162:	460d      	mov	r5, r1
 8006164:	f7fa f834 	bl	80001d0 <__aeabi_dsub>
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	f7fa f830 	bl	80001d0 <__aeabi_dsub>
 8006170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006174:	f7fa f82c 	bl	80001d0 <__aeabi_dsub>
 8006178:	465c      	mov	r4, fp
 800617a:	4602      	mov	r2, r0
 800617c:	e036      	b.n	80061ec <__ieee754_pow+0x79c>
 800617e:	bf00      	nop
 8006180:	4a454eef 	.word	0x4a454eef
 8006184:	3fca7e28 	.word	0x3fca7e28
 8006188:	93c9db65 	.word	0x93c9db65
 800618c:	3fcd864a 	.word	0x3fcd864a
 8006190:	a91d4101 	.word	0xa91d4101
 8006194:	3fd17460 	.word	0x3fd17460
 8006198:	518f264d 	.word	0x518f264d
 800619c:	3fd55555 	.word	0x3fd55555
 80061a0:	db6fabff 	.word	0xdb6fabff
 80061a4:	3fdb6db6 	.word	0x3fdb6db6
 80061a8:	33333303 	.word	0x33333303
 80061ac:	3fe33333 	.word	0x3fe33333
 80061b0:	e0000000 	.word	0xe0000000
 80061b4:	3feec709 	.word	0x3feec709
 80061b8:	dc3a03fd 	.word	0xdc3a03fd
 80061bc:	3feec709 	.word	0x3feec709
 80061c0:	145b01f5 	.word	0x145b01f5
 80061c4:	be3e2fe0 	.word	0xbe3e2fe0
 80061c8:	7ff00000 	.word	0x7ff00000
 80061cc:	43400000 	.word	0x43400000
 80061d0:	0003988e 	.word	0x0003988e
 80061d4:	000bb679 	.word	0x000bb679
 80061d8:	08006950 	.word	0x08006950
 80061dc:	3ff00000 	.word	0x3ff00000
 80061e0:	40080000 	.word	0x40080000
 80061e4:	08006930 	.word	0x08006930
 80061e8:	08006940 	.word	0x08006940
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f2:	e5d7      	b.n	8005da4 <__ieee754_pow+0x354>
 80061f4:	f04f 0a01 	mov.w	sl, #1
 80061f8:	e65e      	b.n	8005eb8 <__ieee754_pow+0x468>
 80061fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80064cc <__ieee754_pow+0xa7c>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7f9 ffe6 	bl	80001d4 <__adddf3>
 8006208:	4642      	mov	r2, r8
 800620a:	e9cd 0100 	strd	r0, r1, [sp]
 800620e:	464b      	mov	r3, r9
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7f9 ffdc 	bl	80001d0 <__aeabi_dsub>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006220:	f7fa fc1e 	bl	8000a60 <__aeabi_dcmpgt>
 8006224:	2800      	cmp	r0, #0
 8006226:	f47f ae00 	bne.w	8005e2a <__ieee754_pow+0x3da>
 800622a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800622e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006232:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006236:	fa43 fa0a 	asr.w	sl, r3, sl
 800623a:	44da      	add	sl, fp
 800623c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006240:	489d      	ldr	r0, [pc, #628]	@ (80064b8 <__ieee754_pow+0xa68>)
 8006242:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006246:	4108      	asrs	r0, r1
 8006248:	ea00 030a 	and.w	r3, r0, sl
 800624c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006250:	f1c1 0114 	rsb	r1, r1, #20
 8006254:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006258:	fa4a fa01 	asr.w	sl, sl, r1
 800625c:	f1bb 0f00 	cmp.w	fp, #0
 8006260:	4640      	mov	r0, r8
 8006262:	4649      	mov	r1, r9
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	bfb8      	it	lt
 800626a:	f1ca 0a00 	rsblt	sl, sl, #0
 800626e:	f7f9 ffaf 	bl	80001d0 <__aeabi_dsub>
 8006272:	4680      	mov	r8, r0
 8006274:	4689      	mov	r9, r1
 8006276:	4632      	mov	r2, r6
 8006278:	463b      	mov	r3, r7
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7f9 ffa9 	bl	80001d4 <__adddf3>
 8006282:	2400      	movs	r4, #0
 8006284:	a37c      	add	r3, pc, #496	@ (adr r3, 8006478 <__ieee754_pow+0xa28>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	4620      	mov	r0, r4
 800628c:	460d      	mov	r5, r1
 800628e:	f7fa f957 	bl	8000540 <__aeabi_dmul>
 8006292:	4642      	mov	r2, r8
 8006294:	e9cd 0100 	strd	r0, r1, [sp]
 8006298:	464b      	mov	r3, r9
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7f9 ff97 	bl	80001d0 <__aeabi_dsub>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4630      	mov	r0, r6
 80062a8:	4639      	mov	r1, r7
 80062aa:	f7f9 ff91 	bl	80001d0 <__aeabi_dsub>
 80062ae:	a374      	add	r3, pc, #464	@ (adr r3, 8006480 <__ieee754_pow+0xa30>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7fa f944 	bl	8000540 <__aeabi_dmul>
 80062b8:	a373      	add	r3, pc, #460	@ (adr r3, 8006488 <__ieee754_pow+0xa38>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	4680      	mov	r8, r0
 80062c0:	4689      	mov	r9, r1
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f7fa f93b 	bl	8000540 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7f9 ff7f 	bl	80001d4 <__adddf3>
 80062d6:	4604      	mov	r4, r0
 80062d8:	460d      	mov	r5, r1
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e2:	f7f9 ff77 	bl	80001d4 <__adddf3>
 80062e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ea:	4680      	mov	r8, r0
 80062ec:	4689      	mov	r9, r1
 80062ee:	f7f9 ff6f 	bl	80001d0 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7f9 ff69 	bl	80001d0 <__aeabi_dsub>
 80062fe:	4642      	mov	r2, r8
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	464b      	mov	r3, r9
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7fa f919 	bl	8000540 <__aeabi_dmul>
 800630e:	a360      	add	r3, pc, #384	@ (adr r3, 8006490 <__ieee754_pow+0xa40>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	f7fa f912 	bl	8000540 <__aeabi_dmul>
 800631c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006498 <__ieee754_pow+0xa48>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff55 	bl	80001d0 <__aeabi_dsub>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7fa f909 	bl	8000540 <__aeabi_dmul>
 800632e:	a35c      	add	r3, pc, #368	@ (adr r3, 80064a0 <__ieee754_pow+0xa50>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff4e 	bl	80001d4 <__adddf3>
 8006338:	4622      	mov	r2, r4
 800633a:	462b      	mov	r3, r5
 800633c:	f7fa f900 	bl	8000540 <__aeabi_dmul>
 8006340:	a359      	add	r3, pc, #356	@ (adr r3, 80064a8 <__ieee754_pow+0xa58>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7f9 ff43 	bl	80001d0 <__aeabi_dsub>
 800634a:	4622      	mov	r2, r4
 800634c:	462b      	mov	r3, r5
 800634e:	f7fa f8f7 	bl	8000540 <__aeabi_dmul>
 8006352:	a357      	add	r3, pc, #348	@ (adr r3, 80064b0 <__ieee754_pow+0xa60>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7f9 ff3c 	bl	80001d4 <__adddf3>
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	f7fa f8ee 	bl	8000540 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7f9 ff30 	bl	80001d0 <__aeabi_dsub>
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa f8e0 	bl	8000540 <__aeabi_dmul>
 8006380:	2200      	movs	r2, #0
 8006382:	e9cd 0100 	strd	r0, r1, [sp]
 8006386:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7f9 ff1f 	bl	80001d0 <__aeabi_dsub>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800639a:	f7fa f9fb 	bl	8000794 <__aeabi_ddiv>
 800639e:	4632      	mov	r2, r6
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	463b      	mov	r3, r7
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7fa f8c9 	bl	8000540 <__aeabi_dmul>
 80063ae:	4632      	mov	r2, r6
 80063b0:	463b      	mov	r3, r7
 80063b2:	f7f9 ff0f 	bl	80001d4 <__adddf3>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7f9 ff07 	bl	80001d0 <__aeabi_dsub>
 80063c2:	4642      	mov	r2, r8
 80063c4:	464b      	mov	r3, r9
 80063c6:	f7f9 ff03 	bl	80001d0 <__aeabi_dsub>
 80063ca:	460b      	mov	r3, r1
 80063cc:	4602      	mov	r2, r0
 80063ce:	493b      	ldr	r1, [pc, #236]	@ (80064bc <__ieee754_pow+0xa6c>)
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7f9 fefd 	bl	80001d0 <__aeabi_dsub>
 80063d6:	ec41 0b10 	vmov	d0, r0, r1
 80063da:	ee10 3a90 	vmov	r3, s1
 80063de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063e6:	da30      	bge.n	800644a <__ieee754_pow+0x9fa>
 80063e8:	4650      	mov	r0, sl
 80063ea:	f000 f87d 	bl	80064e8 <scalbn>
 80063ee:	ec51 0b10 	vmov	r0, r1, d0
 80063f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f6:	f7ff bbd2 	b.w	8005b9e <__ieee754_pow+0x14e>
 80063fa:	4c31      	ldr	r4, [pc, #196]	@ (80064c0 <__ieee754_pow+0xa70>)
 80063fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006400:	42a3      	cmp	r3, r4
 8006402:	d91a      	bls.n	800643a <__ieee754_pow+0x9ea>
 8006404:	4b2f      	ldr	r3, [pc, #188]	@ (80064c4 <__ieee754_pow+0xa74>)
 8006406:	440b      	add	r3, r1
 8006408:	4303      	orrs	r3, r0
 800640a:	d009      	beq.n	8006420 <__ieee754_pow+0x9d0>
 800640c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	f7fa fb06 	bl	8000a24 <__aeabi_dcmplt>
 8006418:	3800      	subs	r0, #0
 800641a:	bf18      	it	ne
 800641c:	2001      	movne	r0, #1
 800641e:	e42b      	b.n	8005c78 <__ieee754_pow+0x228>
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	f7f9 fed4 	bl	80001d0 <__aeabi_dsub>
 8006428:	4632      	mov	r2, r6
 800642a:	463b      	mov	r3, r7
 800642c:	f7fa fb0e 	bl	8000a4c <__aeabi_dcmpge>
 8006430:	2800      	cmp	r0, #0
 8006432:	d1eb      	bne.n	800640c <__ieee754_pow+0x9bc>
 8006434:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80064d4 <__ieee754_pow+0xa84>
 8006438:	e6f7      	b.n	800622a <__ieee754_pow+0x7da>
 800643a:	469a      	mov	sl, r3
 800643c:	4b22      	ldr	r3, [pc, #136]	@ (80064c8 <__ieee754_pow+0xa78>)
 800643e:	459a      	cmp	sl, r3
 8006440:	f63f aef3 	bhi.w	800622a <__ieee754_pow+0x7da>
 8006444:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006448:	e715      	b.n	8006276 <__ieee754_pow+0x826>
 800644a:	ec51 0b10 	vmov	r0, r1, d0
 800644e:	4619      	mov	r1, r3
 8006450:	e7cf      	b.n	80063f2 <__ieee754_pow+0x9a2>
 8006452:	491a      	ldr	r1, [pc, #104]	@ (80064bc <__ieee754_pow+0xa6c>)
 8006454:	2000      	movs	r0, #0
 8006456:	f7ff bb18 	b.w	8005a8a <__ieee754_pow+0x3a>
 800645a:	2000      	movs	r0, #0
 800645c:	2100      	movs	r1, #0
 800645e:	f7ff bb14 	b.w	8005a8a <__ieee754_pow+0x3a>
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7ff bb10 	b.w	8005a8a <__ieee754_pow+0x3a>
 800646a:	460c      	mov	r4, r1
 800646c:	f7ff bb5e 	b.w	8005b2c <__ieee754_pow+0xdc>
 8006470:	2400      	movs	r4, #0
 8006472:	f7ff bb49 	b.w	8005b08 <__ieee754_pow+0xb8>
 8006476:	bf00      	nop
 8006478:	00000000 	.word	0x00000000
 800647c:	3fe62e43 	.word	0x3fe62e43
 8006480:	fefa39ef 	.word	0xfefa39ef
 8006484:	3fe62e42 	.word	0x3fe62e42
 8006488:	0ca86c39 	.word	0x0ca86c39
 800648c:	be205c61 	.word	0xbe205c61
 8006490:	72bea4d0 	.word	0x72bea4d0
 8006494:	3e663769 	.word	0x3e663769
 8006498:	c5d26bf1 	.word	0xc5d26bf1
 800649c:	3ebbbd41 	.word	0x3ebbbd41
 80064a0:	af25de2c 	.word	0xaf25de2c
 80064a4:	3f11566a 	.word	0x3f11566a
 80064a8:	16bebd93 	.word	0x16bebd93
 80064ac:	3f66c16c 	.word	0x3f66c16c
 80064b0:	5555553e 	.word	0x5555553e
 80064b4:	3fc55555 	.word	0x3fc55555
 80064b8:	fff00000 	.word	0xfff00000
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	4090cbff 	.word	0x4090cbff
 80064c4:	3f6f3400 	.word	0x3f6f3400
 80064c8:	3fe00000 	.word	0x3fe00000
 80064cc:	652b82fe 	.word	0x652b82fe
 80064d0:	3c971547 	.word	0x3c971547
 80064d4:	4090cc00 	.word	0x4090cc00

080064d8 <fabs>:
 80064d8:	ec51 0b10 	vmov	r0, r1, d0
 80064dc:	4602      	mov	r2, r0
 80064de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80064e2:	ec43 2b10 	vmov	d0, r2, r3
 80064e6:	4770      	bx	lr

080064e8 <scalbn>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	ec55 4b10 	vmov	r4, r5, d0
 80064ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80064f2:	4606      	mov	r6, r0
 80064f4:	462b      	mov	r3, r5
 80064f6:	b991      	cbnz	r1, 800651e <scalbn+0x36>
 80064f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80064fc:	4323      	orrs	r3, r4
 80064fe:	d03d      	beq.n	800657c <scalbn+0x94>
 8006500:	4b35      	ldr	r3, [pc, #212]	@ (80065d8 <scalbn+0xf0>)
 8006502:	4620      	mov	r0, r4
 8006504:	4629      	mov	r1, r5
 8006506:	2200      	movs	r2, #0
 8006508:	f7fa f81a 	bl	8000540 <__aeabi_dmul>
 800650c:	4b33      	ldr	r3, [pc, #204]	@ (80065dc <scalbn+0xf4>)
 800650e:	429e      	cmp	r6, r3
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	da0f      	bge.n	8006536 <scalbn+0x4e>
 8006516:	a328      	add	r3, pc, #160	@ (adr r3, 80065b8 <scalbn+0xd0>)
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	e01e      	b.n	800655c <scalbn+0x74>
 800651e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006522:	4291      	cmp	r1, r2
 8006524:	d10b      	bne.n	800653e <scalbn+0x56>
 8006526:	4622      	mov	r2, r4
 8006528:	4620      	mov	r0, r4
 800652a:	4629      	mov	r1, r5
 800652c:	f7f9 fe52 	bl	80001d4 <__adddf3>
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	e022      	b.n	800657c <scalbn+0x94>
 8006536:	460b      	mov	r3, r1
 8006538:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800653c:	3936      	subs	r1, #54	@ 0x36
 800653e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006542:	4296      	cmp	r6, r2
 8006544:	dd0d      	ble.n	8006562 <scalbn+0x7a>
 8006546:	2d00      	cmp	r5, #0
 8006548:	a11d      	add	r1, pc, #116	@ (adr r1, 80065c0 <scalbn+0xd8>)
 800654a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654e:	da02      	bge.n	8006556 <scalbn+0x6e>
 8006550:	a11d      	add	r1, pc, #116	@ (adr r1, 80065c8 <scalbn+0xe0>)
 8006552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006556:	a31a      	add	r3, pc, #104	@ (adr r3, 80065c0 <scalbn+0xd8>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fff0 	bl	8000540 <__aeabi_dmul>
 8006560:	e7e6      	b.n	8006530 <scalbn+0x48>
 8006562:	1872      	adds	r2, r6, r1
 8006564:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006568:	428a      	cmp	r2, r1
 800656a:	dcec      	bgt.n	8006546 <scalbn+0x5e>
 800656c:	2a00      	cmp	r2, #0
 800656e:	dd08      	ble.n	8006582 <scalbn+0x9a>
 8006570:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006574:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006578:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800657c:	ec45 4b10 	vmov	d0, r4, r5
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006586:	da08      	bge.n	800659a <scalbn+0xb2>
 8006588:	2d00      	cmp	r5, #0
 800658a:	a10b      	add	r1, pc, #44	@ (adr r1, 80065b8 <scalbn+0xd0>)
 800658c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006590:	dac1      	bge.n	8006516 <scalbn+0x2e>
 8006592:	a10f      	add	r1, pc, #60	@ (adr r1, 80065d0 <scalbn+0xe8>)
 8006594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006598:	e7bd      	b.n	8006516 <scalbn+0x2e>
 800659a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800659e:	3236      	adds	r2, #54	@ 0x36
 80065a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065a8:	4620      	mov	r0, r4
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <scalbn+0xf8>)
 80065ac:	4629      	mov	r1, r5
 80065ae:	2200      	movs	r2, #0
 80065b0:	e7d4      	b.n	800655c <scalbn+0x74>
 80065b2:	bf00      	nop
 80065b4:	f3af 8000 	nop.w
 80065b8:	c2f8f359 	.word	0xc2f8f359
 80065bc:	01a56e1f 	.word	0x01a56e1f
 80065c0:	8800759c 	.word	0x8800759c
 80065c4:	7e37e43c 	.word	0x7e37e43c
 80065c8:	8800759c 	.word	0x8800759c
 80065cc:	fe37e43c 	.word	0xfe37e43c
 80065d0:	c2f8f359 	.word	0xc2f8f359
 80065d4:	81a56e1f 	.word	0x81a56e1f
 80065d8:	43500000 	.word	0x43500000
 80065dc:	ffff3cb0 	.word	0xffff3cb0
 80065e0:	3c900000 	.word	0x3c900000

080065e4 <with_errno>:
 80065e4:	b510      	push	{r4, lr}
 80065e6:	ed2d 8b02 	vpush	{d8}
 80065ea:	eeb0 8a40 	vmov.f32	s16, s0
 80065ee:	eef0 8a60 	vmov.f32	s17, s1
 80065f2:	4604      	mov	r4, r0
 80065f4:	f7ff f938 	bl	8005868 <__errno>
 80065f8:	eeb0 0a48 	vmov.f32	s0, s16
 80065fc:	eef0 0a68 	vmov.f32	s1, s17
 8006600:	ecbd 8b02 	vpop	{d8}
 8006604:	6004      	str	r4, [r0, #0]
 8006606:	bd10      	pop	{r4, pc}

08006608 <xflow>:
 8006608:	4603      	mov	r3, r0
 800660a:	b507      	push	{r0, r1, r2, lr}
 800660c:	ec51 0b10 	vmov	r0, r1, d0
 8006610:	b183      	cbz	r3, 8006634 <xflow+0x2c>
 8006612:	4602      	mov	r2, r0
 8006614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006618:	e9cd 2300 	strd	r2, r3, [sp]
 800661c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006620:	f7f9 ff8e 	bl	8000540 <__aeabi_dmul>
 8006624:	ec41 0b10 	vmov	d0, r0, r1
 8006628:	2022      	movs	r0, #34	@ 0x22
 800662a:	b003      	add	sp, #12
 800662c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006630:	f7ff bfd8 	b.w	80065e4 <with_errno>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e7ee      	b.n	8006618 <xflow+0x10>
 800663a:	0000      	movs	r0, r0
 800663c:	0000      	movs	r0, r0
	...

08006640 <__math_uflow>:
 8006640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006648 <__math_uflow+0x8>
 8006644:	f7ff bfe0 	b.w	8006608 <xflow>
 8006648:	00000000 	.word	0x00000000
 800664c:	10000000 	.word	0x10000000

08006650 <__math_oflow>:
 8006650:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006658 <__math_oflow+0x8>
 8006654:	f7ff bfd8 	b.w	8006608 <xflow>
 8006658:	00000000 	.word	0x00000000
 800665c:	70000000 	.word	0x70000000

08006660 <__ieee754_sqrt>:
 8006660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	4a68      	ldr	r2, [pc, #416]	@ (8006808 <__ieee754_sqrt+0x1a8>)
 8006666:	ec55 4b10 	vmov	r4, r5, d0
 800666a:	43aa      	bics	r2, r5
 800666c:	462b      	mov	r3, r5
 800666e:	4621      	mov	r1, r4
 8006670:	d110      	bne.n	8006694 <__ieee754_sqrt+0x34>
 8006672:	4622      	mov	r2, r4
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f7f9 ff62 	bl	8000540 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	f7f9 fda6 	bl	80001d4 <__adddf3>
 8006688:	4604      	mov	r4, r0
 800668a:	460d      	mov	r5, r1
 800668c:	ec45 4b10 	vmov	d0, r4, r5
 8006690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	2d00      	cmp	r5, #0
 8006696:	dc0e      	bgt.n	80066b6 <__ieee754_sqrt+0x56>
 8006698:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800669c:	4322      	orrs	r2, r4
 800669e:	d0f5      	beq.n	800668c <__ieee754_sqrt+0x2c>
 80066a0:	b19d      	cbz	r5, 80066ca <__ieee754_sqrt+0x6a>
 80066a2:	4622      	mov	r2, r4
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fd92 	bl	80001d0 <__aeabi_dsub>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	f7fa f870 	bl	8000794 <__aeabi_ddiv>
 80066b4:	e7e8      	b.n	8006688 <__ieee754_sqrt+0x28>
 80066b6:	152a      	asrs	r2, r5, #20
 80066b8:	d115      	bne.n	80066e6 <__ieee754_sqrt+0x86>
 80066ba:	2000      	movs	r0, #0
 80066bc:	e009      	b.n	80066d2 <__ieee754_sqrt+0x72>
 80066be:	0acb      	lsrs	r3, r1, #11
 80066c0:	3a15      	subs	r2, #21
 80066c2:	0549      	lsls	r1, r1, #21
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0fa      	beq.n	80066be <__ieee754_sqrt+0x5e>
 80066c8:	e7f7      	b.n	80066ba <__ieee754_sqrt+0x5a>
 80066ca:	462a      	mov	r2, r5
 80066cc:	e7fa      	b.n	80066c4 <__ieee754_sqrt+0x64>
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	3001      	adds	r0, #1
 80066d2:	02dc      	lsls	r4, r3, #11
 80066d4:	d5fb      	bpl.n	80066ce <__ieee754_sqrt+0x6e>
 80066d6:	1e44      	subs	r4, r0, #1
 80066d8:	1b12      	subs	r2, r2, r4
 80066da:	f1c0 0420 	rsb	r4, r0, #32
 80066de:	fa21 f404 	lsr.w	r4, r1, r4
 80066e2:	4323      	orrs	r3, r4
 80066e4:	4081      	lsls	r1, r0
 80066e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80066ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f2:	07d2      	lsls	r2, r2, #31
 80066f4:	bf5c      	itt	pl
 80066f6:	005b      	lslpl	r3, r3, #1
 80066f8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80066fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006700:	bf58      	it	pl
 8006702:	0049      	lslpl	r1, r1, #1
 8006704:	2600      	movs	r6, #0
 8006706:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800670a:	106d      	asrs	r5, r5, #1
 800670c:	0049      	lsls	r1, r1, #1
 800670e:	2016      	movs	r0, #22
 8006710:	4632      	mov	r2, r6
 8006712:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006716:	1917      	adds	r7, r2, r4
 8006718:	429f      	cmp	r7, r3
 800671a:	bfde      	ittt	le
 800671c:	193a      	addle	r2, r7, r4
 800671e:	1bdb      	suble	r3, r3, r7
 8006720:	1936      	addle	r6, r6, r4
 8006722:	0fcf      	lsrs	r7, r1, #31
 8006724:	3801      	subs	r0, #1
 8006726:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800672a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800672e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006732:	d1f0      	bne.n	8006716 <__ieee754_sqrt+0xb6>
 8006734:	4604      	mov	r4, r0
 8006736:	2720      	movs	r7, #32
 8006738:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800673c:	429a      	cmp	r2, r3
 800673e:	eb00 0e0c 	add.w	lr, r0, ip
 8006742:	db02      	blt.n	800674a <__ieee754_sqrt+0xea>
 8006744:	d113      	bne.n	800676e <__ieee754_sqrt+0x10e>
 8006746:	458e      	cmp	lr, r1
 8006748:	d811      	bhi.n	800676e <__ieee754_sqrt+0x10e>
 800674a:	f1be 0f00 	cmp.w	lr, #0
 800674e:	eb0e 000c 	add.w	r0, lr, ip
 8006752:	da42      	bge.n	80067da <__ieee754_sqrt+0x17a>
 8006754:	2800      	cmp	r0, #0
 8006756:	db40      	blt.n	80067da <__ieee754_sqrt+0x17a>
 8006758:	f102 0801 	add.w	r8, r2, #1
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	458e      	cmp	lr, r1
 8006760:	bf88      	it	hi
 8006762:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006766:	eba1 010e 	sub.w	r1, r1, lr
 800676a:	4464      	add	r4, ip
 800676c:	4642      	mov	r2, r8
 800676e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006772:	3f01      	subs	r7, #1
 8006774:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006778:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800677c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006780:	d1dc      	bne.n	800673c <__ieee754_sqrt+0xdc>
 8006782:	4319      	orrs	r1, r3
 8006784:	d01b      	beq.n	80067be <__ieee754_sqrt+0x15e>
 8006786:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800680c <__ieee754_sqrt+0x1ac>
 800678a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006810 <__ieee754_sqrt+0x1b0>
 800678e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006792:	e9db 2300 	ldrd	r2, r3, [fp]
 8006796:	f7f9 fd1b 	bl	80001d0 <__aeabi_dsub>
 800679a:	e9da 8900 	ldrd	r8, r9, [sl]
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	f7fa f947 	bl	8000a38 <__aeabi_dcmple>
 80067aa:	b140      	cbz	r0, 80067be <__ieee754_sqrt+0x15e>
 80067ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80067b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80067b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80067b8:	d111      	bne.n	80067de <__ieee754_sqrt+0x17e>
 80067ba:	3601      	adds	r6, #1
 80067bc:	463c      	mov	r4, r7
 80067be:	1072      	asrs	r2, r6, #1
 80067c0:	0863      	lsrs	r3, r4, #1
 80067c2:	07f1      	lsls	r1, r6, #31
 80067c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80067c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80067cc:	bf48      	it	mi
 80067ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80067d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80067d6:	4618      	mov	r0, r3
 80067d8:	e756      	b.n	8006688 <__ieee754_sqrt+0x28>
 80067da:	4690      	mov	r8, r2
 80067dc:	e7be      	b.n	800675c <__ieee754_sqrt+0xfc>
 80067de:	f7f9 fcf9 	bl	80001d4 <__adddf3>
 80067e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	f7fa f919 	bl	8000a24 <__aeabi_dcmplt>
 80067f2:	b120      	cbz	r0, 80067fe <__ieee754_sqrt+0x19e>
 80067f4:	1ca0      	adds	r0, r4, #2
 80067f6:	bf08      	it	eq
 80067f8:	3601      	addeq	r6, #1
 80067fa:	3402      	adds	r4, #2
 80067fc:	e7df      	b.n	80067be <__ieee754_sqrt+0x15e>
 80067fe:	1c63      	adds	r3, r4, #1
 8006800:	f023 0401 	bic.w	r4, r3, #1
 8006804:	e7db      	b.n	80067be <__ieee754_sqrt+0x15e>
 8006806:	bf00      	nop
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	200000a8 	.word	0x200000a8
 8006810:	200000a0 	.word	0x200000a0

08006814 <_init>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr

08006820 <_fini>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr
