
active_marker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  000070b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800583c  0800583c  000070b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800583c  0800583c  000070b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800583c  0800583c  0000683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005840  08005840  00006840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005844  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070b4  2**0
                  CONTENTS
 10 .bss          00000340  200000b4  200000b4  000070b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  000070b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012124  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c50  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0001be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b72  00000000  00000000  0001cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000306d  00000000  00000000  0001d89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015304  00000000  00000000  00020907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1a2d  00000000  00000000  00035c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7638  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ff8  00000000  00000000  000d767c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000db674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056dc 	.word	0x080056dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	080056dc 	.word	0x080056dc

080001c8 <HAL_GPIO_EXTI_Callback>:
static const int msg_size = 8;
static uint8_t ID = 8;
static bool color = TEAM_COLOR_BLUE;
static uint16_t illuminance = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  if (getMode() == MODE_MEMORY) {
 80001d2:	f000 f87b 	bl	80002cc <getMode>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d16f      	bne.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
    switch (GPIO_Pin) {
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	2b20      	cmp	r3, #32
 80001e0:	dc42      	bgt.n	8000268 <HAL_GPIO_EXTI_Callback+0xa0>
 80001e2:	2b04      	cmp	r3, #4
 80001e4:	db67      	blt.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
 80001e6:	3b04      	subs	r3, #4
 80001e8:	2b1c      	cmp	r3, #28
 80001ea:	d864      	bhi.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
 80001ec:	a201      	add	r2, pc, #4	@ (adr r2, 80001f4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	08000275 	.word	0x08000275
 80001f8:	080002b7 	.word	0x080002b7
 80001fc:	080002b7 	.word	0x080002b7
 8000200:	080002b7 	.word	0x080002b7
 8000204:	0800026f 	.word	0x0800026f
 8000208:	080002b7 	.word	0x080002b7
 800020c:	080002b7 	.word	0x080002b7
 8000210:	080002b7 	.word	0x080002b7
 8000214:	080002b7 	.word	0x080002b7
 8000218:	080002b7 	.word	0x080002b7
 800021c:	080002b7 	.word	0x080002b7
 8000220:	080002b7 	.word	0x080002b7
 8000224:	0800027b 	.word	0x0800027b
 8000228:	080002b7 	.word	0x080002b7
 800022c:	080002b7 	.word	0x080002b7
 8000230:	080002b7 	.word	0x080002b7
 8000234:	080002b7 	.word	0x080002b7
 8000238:	080002b7 	.word	0x080002b7
 800023c:	080002b7 	.word	0x080002b7
 8000240:	080002b7 	.word	0x080002b7
 8000244:	080002b7 	.word	0x080002b7
 8000248:	080002b7 	.word	0x080002b7
 800024c:	080002b7 	.word	0x080002b7
 8000250:	080002b7 	.word	0x080002b7
 8000254:	080002b7 	.word	0x080002b7
 8000258:	080002b7 	.word	0x080002b7
 800025c:	080002b7 	.word	0x080002b7
 8000260:	080002b7 	.word	0x080002b7
 8000264:	0800026f 	.word	0x0800026f
 8000268:	2b40      	cmp	r3, #64	@ 0x40
 800026a:	d014      	beq.n	8000296 <HAL_GPIO_EXTI_Callback+0xce>
    case USER_BTN2_Pin:
      color = !color;
      break;

    default:
      break;
 800026c:	e023      	b.n	80002b6 <HAL_GPIO_EXTI_Callback+0xee>
      setIDSwitch();
 800026e:	f000 f84f 	bl	8000310 <setIDSwitch>
      break;
 8000272:	e023      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      setColorSwitch();
 8000274:	f000 f8a6 	bl	80003c4 <setColorSwitch>
      break;
 8000278:	e020      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      ID++;
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000284:	701a      	strb	r2, [r3, #0]
      if (ID > 15) {
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b0f      	cmp	r3, #15
 800028c:	d915      	bls.n	80002ba <HAL_GPIO_EXTI_Callback+0xf2>
        ID = 0;
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
      break;
 8000294:	e011      	b.n	80002ba <HAL_GPIO_EXTI_Callback+0xf2>
      color = !color;
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <HAL_GPIO_EXTI_Callback+0x100>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	bf14      	ite	ne
 800029e:	2301      	movne	r3, #1
 80002a0:	2300      	moveq	r3, #0
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	f083 0301 	eor.w	r3, r3, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <HAL_GPIO_EXTI_Callback+0x100>)
 80002b2:	701a      	strb	r2, [r3, #0]
      break;
 80002b4:	e002      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0xf4>
      break;
 80002ba:	bf00      	nop
    }
  }
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000054 	.word	0x20000054
 80002c8:	20000055 	.word	0x20000055

080002cc <getMode>:

int getMode(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80002d0:	2102      	movs	r1, #2
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d6:	f001 fe03 	bl	8001ee0 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	bd80      	pop	{r7, pc}

080002e0 <getID>:

uint8_t getID(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return ID;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <getID+0x14>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000054 	.word	0x20000054

080002f8 <getColor>:

bool getColor(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return color;
 80002fc:	4b03      	ldr	r3, [pc, #12]	@ (800030c <getColor+0x14>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000055 	.word	0x20000055

08000310 <setIDSwitch>:

void setIDSwitch(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  // Because of my bad circuit specs......
  ID = 0;
 8000314:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <setIDSwitch+0xac>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin)) << 0;
 800031a:	2108      	movs	r1, #8
 800031c:	4828      	ldr	r0, [pc, #160]	@ (80003c0 <setIDSwitch+0xb0>)
 800031e:	f001 fddf 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	bf0c      	ite	eq
 8000328:	2301      	moveq	r3, #1
 800032a:	2300      	movne	r3, #0
 800032c:	b2db      	uxtb	r3, r3
 800032e:	b25a      	sxtb	r2, r3
 8000330:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <setIDSwitch+0xac>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b25b      	sxtb	r3, r3
 8000336:	4313      	orrs	r3, r2
 8000338:	b25b      	sxtb	r3, r3
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <setIDSwitch+0xac>)
 800033e:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin)) << 1;
 8000340:	2120      	movs	r1, #32
 8000342:	481f      	ldr	r0, [pc, #124]	@ (80003c0 <setIDSwitch+0xb0>)
 8000344:	f001 fdcc 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d101      	bne.n	8000352 <setIDSwitch+0x42>
 800034e:	2302      	movs	r3, #2
 8000350:	e000      	b.n	8000354 <setIDSwitch+0x44>
 8000352:	2300      	movs	r3, #0
 8000354:	b25a      	sxtb	r2, r3
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <setIDSwitch+0xac>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	b25b      	sxtb	r3, r3
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <setIDSwitch+0xac>)
 8000364:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID4_GPIO_Port, ID4_Pin)) << 2;
 8000366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800036a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036e:	f001 fdb7 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d101      	bne.n	800037c <setIDSwitch+0x6c>
 8000378:	2304      	movs	r3, #4
 800037a:	e000      	b.n	800037e <setIDSwitch+0x6e>
 800037c:	2300      	movs	r3, #0
 800037e:	b25a      	sxtb	r2, r3
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <setIDSwitch+0xac>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b25b      	sxtb	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b25b      	sxtb	r3, r3
 800038a:	b2da      	uxtb	r2, r3
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <setIDSwitch+0xac>)
 800038e:	701a      	strb	r2, [r3, #0]
  ID |= !(HAL_GPIO_ReadPin(ID8_GPIO_Port, ID8_Pin)) << 3;
 8000390:	2110      	movs	r1, #16
 8000392:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <setIDSwitch+0xb0>)
 8000394:	f001 fda4 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d101      	bne.n	80003a2 <setIDSwitch+0x92>
 800039e:	2308      	movs	r3, #8
 80003a0:	e000      	b.n	80003a4 <setIDSwitch+0x94>
 80003a2:	2300      	movs	r3, #0
 80003a4:	b25a      	sxtb	r2, r3
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <setIDSwitch+0xac>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b02      	ldr	r3, [pc, #8]	@ (80003bc <setIDSwitch+0xac>)
 80003b4:	701a      	strb	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000054 	.word	0x20000054
 80003c0:	48000400 	.word	0x48000400

080003c4 <setColorSwitch>:

void setColorSwitch(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  color = HAL_GPIO_ReadPin(COLOR_GPIO_Port, COLOR_Pin);
 80003c8:	2104      	movs	r1, #4
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ce:	f001 fd87 	bl	8001ee0 <HAL_GPIO_ReadPin>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bf14      	ite	ne
 80003d8:	2301      	movne	r3, #1
 80003da:	2300      	moveq	r3, #0
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b02      	ldr	r3, [pc, #8]	@ (80003e8 <setColorSwitch+0x24>)
 80003e0:	701a      	strb	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000055 	.word	0x20000055

080003ec <setPattern>:

/* 0     4
 *    2
 *  1   3
 */
void setPattern(uint8_t ID, uint8_t color) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
  RGB pattern[5];
  pattern[0] = *(PATTERN_ADDR[ID]->dot0);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <setPattern+0xb0>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	8811      	ldrh	r1, [r2, #0]
 800040c:	7892      	ldrb	r2, [r2, #2]
 800040e:	8019      	strh	r1, [r3, #0]
 8000410:	709a      	strb	r2, [r3, #2]
  pattern[1] = *(PATTERN_ADDR[ID]->dot1);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a21      	ldr	r2, [pc, #132]	@ (800049c <setPattern+0xb0>)
 8000416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	f107 030b 	add.w	r3, r7, #11
 8000420:	8811      	ldrh	r1, [r2, #0]
 8000422:	7892      	ldrb	r2, [r2, #2]
 8000424:	8019      	strh	r1, [r3, #0]
 8000426:	709a      	strb	r2, [r3, #2]
  pattern[3] = *(PATTERN_ADDR[ID]->dot2);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <setPattern+0xb0>)
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	f107 0311 	add.w	r3, r7, #17
 8000436:	8811      	ldrh	r1, [r2, #0]
 8000438:	7892      	ldrb	r2, [r2, #2]
 800043a:	8019      	strh	r1, [r3, #0]
 800043c:	709a      	strb	r2, [r3, #2]
  pattern[4] = *(PATTERN_ADDR[ID]->dot3);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4a16      	ldr	r2, [pc, #88]	@ (800049c <setPattern+0xb0>)
 8000442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	8811      	ldrh	r1, [r2, #0]
 800044e:	7892      	ldrb	r2, [r2, #2]
 8000450:	8019      	strh	r1, [r3, #0]
 8000452:	709a      	strb	r2, [r3, #2]
  if (color == TEAM_COLOR_BLUE) {
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d107      	bne.n	800046a <setPattern+0x7e>
    pattern[2] = color_blue;
 800045a:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <setPattern+0xb4>)
 800045c:	f107 030e 	add.w	r3, r7, #14
 8000460:	8811      	ldrh	r1, [r2, #0]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	8019      	strh	r1, [r3, #0]
 8000466:	709a      	strb	r2, [r3, #2]
 8000468:	e006      	b.n	8000478 <setPattern+0x8c>
  } else {
    pattern[2] = color_yellow;
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <setPattern+0xb8>)
 800046c:	f107 030e 	add.w	r3, r7, #14
 8000470:	8811      	ldrh	r1, [r2, #0]
 8000472:	7892      	ldrb	r2, [r2, #2]
 8000474:	8019      	strh	r1, [r3, #0]
 8000476:	709a      	strb	r2, [r3, #2]
  }
  /*
   * Since data transfer to the first LED may fail,
   * the same output process is repeated.
   */
  NeoPixel_Send(pattern);
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fb9f 	bl	8000bc0 <NeoPixel_Send>
  HAL_Delay(10);
 8000482:	200a      	movs	r0, #10
 8000484:	f000 ff60 	bl	8001348 <HAL_Delay>
  NeoPixel_Send(pattern);
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fb97 	bl	8000bc0 <NeoPixel_Send>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000010 	.word	0x20000010
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000004 	.word	0x20000004

080004a8 <Uart_Init>:

//--------------------------------------------
// UART

void Uart_Init(UART_HandleTypeDef *huart_arg) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  huart = huart_arg;
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <Uart_Init+0x28>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <Uart_Init+0x28>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2208      	movs	r2, #8
 80004bc:	b292      	uxth	r2, r2
 80004be:	4905      	ldr	r1, [pc, #20]	@ (80004d4 <Uart_Init+0x2c>)
 80004c0:	4618      	mov	r0, r3
 80004c2:	f003 fe5d 	bl	8004180 <HAL_UART_Receive_IT>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000d4 	.word	0x200000d4
 80004d4:	200000d8 	.word	0x200000d8

080004d8 <Uart_checkReset>:

void Uart_checkReset() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  if (getMode() == MODE_UART && !uart_first_received && uwTick > 3000) {
 80004dc:	f7ff fef6 	bl	80002cc <getMode>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d10e      	bne.n	8000504 <Uart_checkReset+0x2c>
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <Uart_checkReset+0x30>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d007      	beq.n	8000504 <Uart_checkReset+0x2c>
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <Uart_checkReset+0x34>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d901      	bls.n	8000504 <Uart_checkReset+0x2c>
    HAL_NVIC_SystemReset();
 8000500:	f001 f95d 	bl	80017be <HAL_NVIC_SystemReset>
  }
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000d0 	.word	0x200000d0
 800050c:	200002a8 	.word	0x200002a8

08000510 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart_arg) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if (huart_arg == huart && getMode() == MODE_UART) {
 8000518:	4b40      	ldr	r3, [pc, #256]	@ (800061c <HAL_UART_RxCpltCallback+0x10c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	d16f      	bne.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
 8000522:	f7ff fed3 	bl	80002cc <getMode>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d16a      	bne.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    uart_first_received = true;
 800052c:	4b3c      	ldr	r3, [pc, #240]	@ (8000620 <HAL_UART_RxCpltCallback+0x110>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
    switch (rx_buf[0]) {
 8000532:	4b3c      	ldr	r3, [pc, #240]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b05      	cmp	r3, #5
 8000538:	d862      	bhi.n	8000600 <HAL_UART_RxCpltCallback+0xf0>
 800053a:	a201      	add	r2, pc, #4	@ (adr r2, 8000540 <HAL_UART_RxCpltCallback+0x30>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000559 	.word	0x08000559
 8000544:	08000573 	.word	0x08000573
 8000548:	0800058d 	.word	0x0800058d
 800054c:	080005a7 	.word	0x080005a7
 8000550:	080005c1 	.word	0x080005c1
 8000554:	080005e5 	.word	0x080005e5
    case COMMAND_BLUE:
      color_blue.r = rx_buf[1];
 8000558:	4b32      	ldr	r3, [pc, #200]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800055a:	785a      	ldrb	r2, [r3, #1]
 800055c:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <HAL_UART_RxCpltCallback+0x118>)
 800055e:	701a      	strb	r2, [r3, #0]
      color_blue.g = rx_buf[2];
 8000560:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 8000562:	789a      	ldrb	r2, [r3, #2]
 8000564:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <HAL_UART_RxCpltCallback+0x118>)
 8000566:	705a      	strb	r2, [r3, #1]
      color_blue.b = rx_buf[3];
 8000568:	4b2e      	ldr	r3, [pc, #184]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800056a:	78da      	ldrb	r2, [r3, #3]
 800056c:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <HAL_UART_RxCpltCallback+0x118>)
 800056e:	709a      	strb	r2, [r3, #2]
      break;
 8000570:	e047      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_YELLOW:
      color_yellow.r = rx_buf[1];
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	4b2d      	ldr	r3, [pc, #180]	@ (800062c <HAL_UART_RxCpltCallback+0x11c>)
 8000578:	701a      	strb	r2, [r3, #0]
      color_yellow.g = rx_buf[2];
 800057a:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800057c:	789a      	ldrb	r2, [r3, #2]
 800057e:	4b2b      	ldr	r3, [pc, #172]	@ (800062c <HAL_UART_RxCpltCallback+0x11c>)
 8000580:	705a      	strb	r2, [r3, #1]
      color_yellow.b = rx_buf[3];
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 8000584:	78da      	ldrb	r2, [r3, #3]
 8000586:	4b29      	ldr	r3, [pc, #164]	@ (800062c <HAL_UART_RxCpltCallback+0x11c>)
 8000588:	709a      	strb	r2, [r3, #2]
      break;
 800058a:	e03a      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_PINK:
      color_pink.r = rx_buf[1];
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800058e:	785a      	ldrb	r2, [r3, #1]
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <HAL_UART_RxCpltCallback+0x120>)
 8000592:	701a      	strb	r2, [r3, #0]
      color_pink.g = rx_buf[2];
 8000594:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 8000596:	789a      	ldrb	r2, [r3, #2]
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <HAL_UART_RxCpltCallback+0x120>)
 800059a:	705a      	strb	r2, [r3, #1]
      color_pink.b = rx_buf[3];
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800059e:	78da      	ldrb	r2, [r3, #3]
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <HAL_UART_RxCpltCallback+0x120>)
 80005a2:	709a      	strb	r2, [r3, #2]
      break;
 80005a4:	e02d      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_GREEN:
      color_green.r = rx_buf[1];
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005a8:	785a      	ldrb	r2, [r3, #1]
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <HAL_UART_RxCpltCallback+0x124>)
 80005ac:	701a      	strb	r2, [r3, #0]
      color_green.g = rx_buf[2];
 80005ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005b0:	789a      	ldrb	r2, [r3, #2]
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <HAL_UART_RxCpltCallback+0x124>)
 80005b4:	705a      	strb	r2, [r3, #1]
      color_green.b = rx_buf[3];
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005b8:	78da      	ldrb	r2, [r3, #3]
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <HAL_UART_RxCpltCallback+0x124>)
 80005bc:	709a      	strb	r2, [r3, #2]
      break;
 80005be:	e020      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_ILLUMINANCE:
      illuminance = 0;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <HAL_UART_RxCpltCallback+0x128>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	801a      	strh	r2, [r3, #0]
      illuminance += (rx_buf[1] << 8) + rx_buf[2];
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005d0:	7892      	ldrb	r2, [r2, #2]
 80005d2:	4413      	add	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <HAL_UART_RxCpltCallback+0x128>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <HAL_UART_RxCpltCallback+0x128>)
 80005e0:	801a      	strh	r2, [r3, #0]
      break;
 80005e2:	e00e      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    case COMMAND_ID:
      ID = rx_buf[1];
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005e6:	785a      	ldrb	r2, [r3, #1]
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <HAL_UART_RxCpltCallback+0x12c>)
 80005ea:	701a      	strb	r2, [r3, #0]
      color = rx_buf[2];
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <HAL_UART_RxCpltCallback+0x130>)
 80005fc:	701a      	strb	r2, [r3, #0]
      break;
 80005fe:	e000      	b.n	8000602 <HAL_UART_RxCpltCallback+0xf2>
    default:
      break;
 8000600:	bf00      	nop
    }
  }
  HAL_UART_Receive_IT(huart, rx_buf, msg_size);
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_UART_RxCpltCallback+0x10c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2208      	movs	r2, #8
 8000608:	b292      	uxth	r2, r2
 800060a:	4906      	ldr	r1, [pc, #24]	@ (8000624 <HAL_UART_RxCpltCallback+0x114>)
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fdb7 	bl	8004180 <HAL_UART_Receive_IT>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000d4 	.word	0x200000d4
 8000620:	200000d0 	.word	0x200000d0
 8000624:	200000d8 	.word	0x200000d8
 8000628:	20000000 	.word	0x20000000
 800062c:	20000004 	.word	0x20000004
 8000630:	20000008 	.word	0x20000008
 8000634:	2000000c 	.word	0x2000000c
 8000638:	200000e0 	.word	0x200000e0
 800063c:	20000054 	.word	0x20000054
 8000640:	20000055 	.word	0x20000055

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ID = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
  bool color = TEAM_COLOR_YELLOW;
 800064e:	2300      	movs	r3, #0
 8000650:	73bb      	strb	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fe13 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f861 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f9e1 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800065e:	f000 f9c1 	bl	80009e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000662:	f000 f94f 	bl	8000904 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000666:	f000 f98b 	bl	8000980 <MX_USART1_UART_Init>
  MX_CAN_Init();
 800066a:	f000 f8b9 	bl	80007e0 <MX_CAN_Init>
  MX_I2C1_Init();
 800066e:	f000 f8eb 	bl	8000848 <MX_I2C1_Init>
  MX_IWDG_Init();
 8000672:	f000 f929 	bl	80008c8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
//  VEML6030_init(&hi2c1, SENS_ADDR_0);
//  VEML6030_init(&hi2c1, SENS_ADDR_1);
  NeoPixel_Init(&hspi1);
 8000676:	4824      	ldr	r0, [pc, #144]	@ (8000708 <main+0xc4>)
 8000678:	f000 fa92 	bl	8000ba0 <NeoPixel_Init>
  Uart_Init(&huart1);
 800067c:	4823      	ldr	r0, [pc, #140]	@ (800070c <main+0xc8>)
 800067e:	f7ff ff13 	bl	80004a8 <Uart_Init>
  setColorSwitch();
 8000682:	f7ff fe9f 	bl	80003c4 <setColorSwitch>
  setIDSwitch();
 8000686:	f7ff fe43 	bl	8000310 <setIDSwitch>
//setup cycle
  float *cycle_basis = calloc(CYCLE_LAST, sizeof(float));
 800068a:	2104      	movs	r1, #4
 800068c:	2003      	movs	r0, #3
 800068e:	f004 fec5 	bl	800541c <calloc>
 8000692:	4603      	mov	r3, r0
 8000694:	60bb      	str	r3, [r7, #8]
  uint32_t *cycle_old = calloc(CYCLE_LAST, sizeof(uint32_t));
 8000696:	2104      	movs	r1, #4
 8000698:	2003      	movs	r0, #3
 800069a:	f004 febf 	bl	800541c <calloc>
 800069e:	4603      	mov	r3, r0
 80006a0:	607b      	str	r3, [r7, #4]
  cycle_basis[CYCLE_MAIN] = 20;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <main+0xcc>)
 80006a6:	601a      	str	r2, [r3, #0]
  cycle_basis[CYCLE_PATTERN] = 50;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3308      	adds	r3, #8
 80006ac:	4a19      	ldr	r2, [pc, #100]	@ (8000714 <main+0xd0>)
 80006ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    ID = getID();
 80006b0:	f7ff fe16 	bl	80002e0 <getID>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
    color = getColor();
 80006b8:	f7ff fe1e 	bl	80002f8 <getColor>
 80006bc:	4603      	mov	r3, r0
 80006be:	73bb      	strb	r3, [r7, #14]
    if (CycleController(CYCLE_PATTERN, cycle_basis, cycle_old)) {
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	2002      	movs	r0, #2
 80006c6:	f000 fd6f 	bl	80011a8 <CycleController>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d009      	beq.n	80006e4 <main+0xa0>
      setPattern(ID, color);
 80006d0:	7bba      	ldrb	r2, [r7, #14]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe88 	bl	80003ec <setPattern>
    }

    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 80006dc:	e002      	b.n	80006e4 <main+0xa0>
      HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fe32 	bl	8001348 <HAL_Delay>
    while (!CycleController(CYCLE_MAIN, cycle_basis, cycle_old)) {
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fd5d 	bl	80011a8 <CycleController>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f1      	bne.n	80006de <main+0x9a>
    }
    Uart_checkReset();
 80006fa:	f7ff feed 	bl	80004d8 <Uart_checkReset>
    HAL_IWDG_Refresh(&hiwdg);
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <main+0xd4>)
 8000700:	f001 fdab 	bl	800225a <HAL_IWDG_Refresh>
    ID = getID();
 8000704:	e7d4      	b.n	80006b0 <main+0x6c>
 8000706:	bf00      	nop
 8000708:	20000170 	.word	0x20000170
 800070c:	20000218 	.word	0x20000218
 8000710:	41a00000 	.word	0x41a00000
 8000714:	42480000 	.word	0x42480000
 8000718:	20000160 	.word	0x20000160

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	@ 0x58
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000726:	2228      	movs	r2, #40	@ 0x28
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 ff48 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
 800074e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000750:	230b      	movs	r3, #11
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 800075a:	2307      	movs	r3, #7
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000766:	2301      	movs	r3, #1
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000772:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000774:	f44f 1330 	mov.w	r3, #2883584	@ 0x2c0000
 8000778:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fd7c 	bl	800227c <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800078a:	f000 fa03 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fda4 	bl	80032f8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b6:	f000 f9ed 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80007ba:	2321      	movs	r3, #33	@ 0x21
 80007bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 ffcd 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007d4:	f000 f9de 	bl	8000b94 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	@ 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_CAN_Init+0x60>)
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <MX_CAN_Init+0x64>)
 80007e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_CAN_Init+0x60>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_CAN_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_CAN_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_CAN_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_CAN_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000808:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <MX_CAN_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_CAN_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_CAN_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_CAN_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_CAN_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_CAN_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_CAN_Init+0x60>)
 800082e:	f000 fdaf 	bl	8001390 <HAL_CAN_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 f9ac 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000e4 	.word	0x200000e4
 8000844:	40006400 	.word	0x40006400

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 fb74 	bl	8001f70 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 f981 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f001 fbfa 	bl	800208e <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f978 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f001 fc3c 	bl	8002124 <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f96f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00101d7c 	.word	0x00101d7c

080008c8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_IWDG_Init+0x34>)
 80008ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <MX_IWDG_Init+0x38>)
 80008d0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_IWDG_Init+0x34>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_IWDG_Init+0x34>)
 80008da:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008de:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_IWDG_Init+0x34>)
 80008e2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008e6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_IWDG_Init+0x34>)
 80008ea:	f001 fc67 	bl	80021bc <HAL_IWDG_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80008f4:	f000 f94e 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000160 	.word	0x20000160
 8000900:	40003000 	.word	0x40003000

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_SPI1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_SPI1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000918:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800091c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000920:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_SPI1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_SPI1_Init+0x74>)
 800093c:	2210      	movs	r2, #16
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_SPI1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000954:	2207      	movs	r2, #7
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_SPI1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000966:	f003 f825 	bl	80039b4 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f910 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000170 	.word	0x20000170
 800097c:	40013000 	.word	0x40013000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 8000986:	4a16      	ldr	r2, [pc, #88]	@ (80009e0 <MX_USART1_UART_Init+0x60>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 8000994:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000998:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 80009c8:	f003 fb8c 	bl	80040e4 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80009d2:	f000 f8df 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000218 	.word	0x20000218
 80009e0:	40013800 	.word	0x40013800

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200d      	movs	r0, #13
 8000a08:	f000 feaf 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a0c:	200d      	movs	r0, #13
 8000a0e:	f000 fec8 	bl	80017a2 <HAL_NVIC_EnableIRQ>

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a36:	4b55      	ldr	r3, [pc, #340]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a54      	ldr	r2, [pc, #336]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b52      	ldr	r3, [pc, #328]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a4e      	ldr	r2, [pc, #312]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b49      	ldr	r3, [pc, #292]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b46      	ldr	r3, [pc, #280]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4843      	ldr	r0, [pc, #268]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000a84:	f001 fa44 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin ID4_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ID4_Pin;
 8000a88:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f001 f8ac 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : COLOR_Pin */
  GPIO_InitStruct.Pin = COLOR_Pin;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000aa8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COLOR_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f001 f89e 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_VR_Pin */
  GPIO_InitStruct.Pin = USER_VR_Pin;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_VR_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f001 f891 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BTN1_Pin USER_BTN2_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin|USER_BTN2_Pin;
 8000ada:	2350      	movs	r3, #80	@ 0x50
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ade:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f001 f883 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4820      	ldr	r0, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000b0e:	f001 f875 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ID1_Pin ID2_Pin */
  GPIO_InitStruct.Pin = ID1_Pin|ID2_Pin;
 8000b12:	2328      	movs	r3, #40	@ 0x28
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b16:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481a      	ldr	r0, [pc, #104]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000b28:	f001 f868 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ID8_Pin */
  GPIO_InitStruct.Pin = ID8_Pin;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ID8_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000b40:	f001 f85c 	bl	8001bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f000 fe0e 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000b4e:	2008      	movs	r0, #8
 8000b50:	f000 fe27 	bl	80017a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2009      	movs	r0, #9
 8000b5a:	f000 fe06 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b5e:	2009      	movs	r0, #9
 8000b60:	f000 fe1f 	bl	80017a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f000 fdfe 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b6e:	200a      	movs	r0, #10
 8000b70:	f000 fe17 	bl	80017a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2017      	movs	r0, #23
 8000b7a:	f000 fdf6 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b7e:	2017      	movs	r0, #23
 8000b80:	f000 fe0f 	bl	80017a2 <HAL_NVIC_EnableIRQ>

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <NeoPixel_Init>:
 */
#include "neopixel_spi.h"

SPI_HandleTypeDef *hspi;

void NeoPixel_Init(SPI_HandleTypeDef *p_hspi) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  hspi = p_hspi;
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <NeoPixel_Init+0x1c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200002a0 	.word	0x200002a0

08000bc0 <NeoPixel_Send>:
    RGB_buf[i].b = 255;
  }
  NeoPixel_Send(RGB_buf);
}

void NeoPixel_Send(RGB RGB_buf[]) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  uint8_t *send_buf = (uint8_t*) calloc(sizeof(uint8_t), N * 24 + 1);
 8000bc8:	2179      	movs	r1, #121	@ 0x79
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f004 fc26 	bl	800541c <calloc>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60fb      	str	r3, [r7, #12]
  NeoPixel_Serialize(RGB_buf, send_buf+1);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f832 	bl	8000c44 <NeoPixel_Serialize>
  NeoPixel_Reset();
 8000be0:	f000 f814 	bl	8000c0c <NeoPixel_Reset>
  HAL_Delay(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fbaf 	bl	8001348 <HAL_Delay>
  HAL_SPI_Transmit_DMA(hspi, send_buf, N * 24);
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <NeoPixel_Send+0x48>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2278      	movs	r2, #120	@ 0x78
 8000bf0:	68f9      	ldr	r1, [r7, #12]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 ff82 	bl	8003afc <HAL_SPI_Transmit_DMA>
  free(send_buf);
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f004 fc2b 	bl	8005454 <free>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200002a0 	.word	0x200002a0

08000c0c <NeoPixel_Reset>:

void NeoPixel_Reset() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  uint8_t buf = NP_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 100; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	e009      	b.n	8000c30 <NeoPixel_Reset+0x24>
    HAL_SPI_Transmit_DMA(hspi, &buf, 1);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <NeoPixel_Reset+0x34>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1cf9      	adds	r1, r7, #3
 8000c22:	2201      	movs	r2, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 ff69 	bl	8003afc <HAL_SPI_Transmit_DMA>
  for (int i = 0; i < 100; i++) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b63      	cmp	r3, #99	@ 0x63
 8000c34:	ddf2      	ble.n	8000c1c <NeoPixel_Reset+0x10>
  }
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200002a0 	.word	0x200002a0

08000c44 <NeoPixel_Serialize>:

void NeoPixel_Serialize(RGB RGB[], uint8_t buf[]) {
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  for (int n = 0; n < N; n++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e090      	b.n	8000d76 <NeoPixel_Serialize+0x132>
    for (int i = 0; i < 8; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e086      	b.n	8000d68 <NeoPixel_Serialize+0x124>
      if (RGB[n].g & (1 << (7 - i))) {
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f1c3 0307 	rsb	r3, r3, #7
 8000c70:	fa42 f303 	asr.w	r3, r2, r3
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00d      	beq.n	8000c98 <NeoPixel_Serialize+0x54>
        buf[n * 24 + i] = NP_HIGH;
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	461a      	mov	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	22f0      	movs	r2, #240	@ 0xf0
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e00c      	b.n	8000cb2 <NeoPixel_Serialize+0x6e>
      } else {
        buf[n * 24 + i] = NP_LOW;
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	22c0      	movs	r2, #192	@ 0xc0
 8000cb0:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].r & (1 << (7 - i))) {
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f1c3 0307 	rsb	r3, r3, #7
 8000cc8:	fa42 f303 	asr.w	r3, r2, r3
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00d      	beq.n	8000cf0 <NeoPixel_Serialize+0xac>
        buf[n * 24 + i + 8] = NP_HIGH;
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	22f0      	movs	r2, #240	@ 0xf0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e00c      	b.n	8000d0a <NeoPixel_Serialize+0xc6>
      } else {
        buf[n * 24 + i + 8] = NP_LOW;
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	3308      	adds	r3, #8
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	22c0      	movs	r2, #192	@ 0xc0
 8000d08:	701a      	strb	r2, [r3, #0]
      }
      if (RGB[n].b & (1 << (7 - i))) {
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	f1c3 0307 	rsb	r3, r3, #7
 8000d20:	fa42 f303 	asr.w	r3, r2, r3
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00d      	beq.n	8000d48 <NeoPixel_Serialize+0x104>
        buf[n * 24 + i + 16] = NP_HIGH;
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	22f0      	movs	r2, #240	@ 0xf0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e00c      	b.n	8000d62 <NeoPixel_Serialize+0x11e>
      } else {
        buf[n * 24 + i + 16] = NP_LOW;
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4413      	add	r3, r2
 8000d58:	3310      	adds	r3, #16
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	22c0      	movs	r2, #192	@ 0xc0
 8000d60:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	f77f af75 	ble.w	8000c5a <NeoPixel_Serialize+0x16>
  for (int n = 0; n < N; n++) {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	f77f af6b 	ble.w	8000c54 <NeoPixel_Serialize+0x10>
      }
    }
  }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x44>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <HAL_CAN_MspInit+0x80>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d129      	bne.n	8000e4a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000dfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	6153      	str	r3, [r2, #20]
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_CAN_MspInit+0x84>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e38:	2309      	movs	r3, #9
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e46:	f000 fed9 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40006400 	.word	0x40006400
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_I2C_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d127      	bne.n	8000ece <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a16      	ldr	r2, [pc, #88]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	23c0      	movs	r3, #192	@ 0xc0
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <HAL_I2C_MspInit+0x84>)
 8000eb2:	f000 fea3 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_I2C_MspInit+0x80>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_SPI_MspInit+0xc8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d14e      	bne.n	8000fa4 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f36:	23a0      	movs	r3, #160	@ 0xa0
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f46:	2305      	movs	r3, #5
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f000 fe52 	bl	8001bfc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <HAL_SPI_MspInit+0xd4>)
 8000f5c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f8a:	f000 fc28 	bl	80017de <HAL_DMA_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000f94:	f7ff fdfe 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000f9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <HAL_SPI_MspInit+0xd0>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	200001d4 	.word	0x200001d4
 8000fb8:	40020030 	.word	0x40020030

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <HAL_UART_MspInit+0x90>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d131      	bne.n	8001042 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_UART_MspInit+0x94>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800100e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001020:	2307      	movs	r3, #7
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f000 fde5 	bl	8001bfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2025      	movs	r0, #37	@ 0x25
 8001038:	f000 fb97 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800103c:	2025      	movs	r0, #37	@ 0x25
 800103e:	f000 fbb0 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40013800 	.word	0x40013800
 8001050:	40021000 	.word	0x40021000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <NMI_Handler+0x4>

0800105c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <UsageFault_Handler+0x4>

0800107c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f000 f92d 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and touch sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLOR_Pin);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f000 ff42 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID1_Pin);
 80010c4:	2008      	movs	r0, #8
 80010c6:	f000 ff3b 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}

080010ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN1_Pin);
 80010d2:	2010      	movs	r0, #16
 80010d4:	f000 ff34 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <DMA1_Channel3_IRQHandler+0x10>)
 80010e2:	f000 fc99 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001d4 	.word	0x200001d4

080010f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ID2_Pin);
 80010f4:	2020      	movs	r0, #32
 80010f6:	f000 ff23 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BTN2_Pin);
 80010fa:	2040      	movs	r0, #64	@ 0x40
 80010fc:	f000 ff20 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <USART1_IRQHandler+0x10>)
 800110a:	f003 f87d 	bl	8004208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000218 	.word	0x20000218

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f004 fa52 	bl	80055f0 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20003000 	.word	0x20003000
 8001178:	00000400 	.word	0x00000400
 800117c:	200002a4 	.word	0x200002a4
 8001180:	200003f8 	.word	0x200003f8

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <CycleController>:

/*
 * @brief CycleController
 * @param[ms] ms Cycle[ms]
 */
bool CycleController(int data, float *basis, uint32_t *old) {
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  if (old[data] == 0) {
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <CycleController+0x2a>
    old[data] = HAL_GetTick();
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	18d4      	adds	r4, r2, r3
 80011ca:	f000 f8b1 	bl	8001330 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	6023      	str	r3, [r4, #0]
  }
  uint32_t current = HAL_GetTick();
 80011d2:	f000 f8ad 	bl	8001330 <HAL_GetTick>
 80011d6:	6178      	str	r0, [r7, #20]
  if (current - (float)old[data] > basis[data]) {
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120c:	dd07      	ble.n	800121e <CycleController+0x76>
    old[data] = current;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	601a      	str	r2, [r3, #0]
    return 1;
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <CycleController+0x78>
  } else {
    return 0;
 800121e:	2300      	movs	r3, #0
  }
}
 8001220:	4618      	mov	r0, r3
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}

08001228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001260 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800122c:	f7ff ffaa 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f004 f9d1 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125a:	f7ff f9f3 	bl	8000644 <main>

0800125e <LoopForever>:

LoopForever:
    b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001260:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800126c:	08005844 	.word	0x08005844
  ldr r2, =_sbss
 8001270:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001274:	200003f4 	.word	0x200003f4

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_Init+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_Init+0x28>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 fa61 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fd78 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fa7d 	bl	80017c6 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 fa41 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000058 	.word	0x20000058
 8001300:	20000060 	.word	0x20000060
 8001304:	2000005c 	.word	0x2000005c

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000060 	.word	0x20000060
 800132c:	200002a8 	.word	0x200002a8

08001330 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;  
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200002a8 	.word	0x200002a8

08001348 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000060 	.word	0x20000060

08001390 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0ed      	b.n	800157e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd10 	bl	8000dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff ffb4 	bl	8001330 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ca:	e012      	b.n	80013f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013cc:	f7ff ffb0 	bl	8001330 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b0a      	cmp	r3, #10
 80013d8:	d90b      	bls.n	80013f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2205      	movs	r2, #5
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0c5      	b.n	800157e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0e5      	beq.n	80013cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0202 	bic.w	r2, r2, #2
 800140e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001410:	f7ff ff8e 	bl	8001330 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001416:	e012      	b.n	800143e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001418:	f7ff ff8a 	bl	8001330 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d90b      	bls.n	800143e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2205      	movs	r2, #5
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e09f      	b.n	800157e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e5      	bne.n	8001418 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e1b      	ldrb	r3, [r3, #24]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e007      	b.n	8001476 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e5b      	ldrb	r3, [r3, #25]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e007      	b.n	80014a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800149e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7e9b      	ldrb	r3, [r3, #26]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0220 	orr.w	r2, r2, #32
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e007      	b.n	80014ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0220 	bic.w	r2, r2, #32
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7edb      	ldrb	r3, [r3, #27]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0210 	bic.w	r2, r2, #16
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e007      	b.n	80014f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0210 	orr.w	r2, r2, #16
 80014f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7f1b      	ldrb	r3, [r3, #28]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0208 	orr.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e007      	b.n	800151e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7f5b      	ldrb	r3, [r3, #29]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e007      	b.n	8001548 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	ea42 0103 	orr.w	r1, r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	@ (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016e8:	f3bf 8f4f 	dsb	sy
}
 80016ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <__NVIC_SystemReset+0x24>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016f6:	4904      	ldr	r1, [pc, #16]	@ (8001708 <__NVIC_SystemReset+0x24>)
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_SystemReset+0x28>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016fe:	f3bf 8f4f 	dsb	sy
}
 8001702:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <__NVIC_SystemReset+0x20>
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0004 	.word	0x05fa0004

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff78 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff13 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff28 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff78 	bl	800167c <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff47 	bl	8001628 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff1b 	bl	80015ec <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80017c2:	f7ff ff8f 	bl	80016e4 <__NVIC_SystemReset>

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff9e 	bl	8001710 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e037      	b.n	8001864 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800180a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800180e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f9b8 	bl	8001bbc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}  
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_DMA_Start_IT+0x20>
 8001888:	2302      	movs	r3, #2
 800188a:	e04a      	b.n	8001922 <HAL_DMA_Start_IT+0xb6>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800189a:	2b01      	cmp	r3, #1
 800189c:	d13a      	bne.n	8001914 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f94b 	bl	8001b5e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 020e 	orr.w	r2, r2, #14
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e00f      	b.n	8001902 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 020a 	orr.w	r2, r2, #10
 80018f0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0204 	bic.w	r2, r2, #4
 8001900:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e005      	b.n	8001920 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800191c:	2302      	movs	r3, #2
 800191e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001920:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e020      	b.n	8001990 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020e 	bic.w	r2, r2, #14
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d005      	beq.n	80019be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e027      	b.n	8001a0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020e 	bic.w	r2, r2, #14
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
    } 
  }
  return status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	2204      	movs	r2, #4
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d024      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x72>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01f      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0204 	bic.w	r2, r2, #4
 8001a66:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a70:	2104      	movs	r1, #4
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d06a      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	e065      	b.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2202      	movs	r2, #2
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d02c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0xdc>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d027      	beq.n	8001af4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10b      	bne.n	8001aca <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020a 	bic.w	r2, r2, #10
 8001ac0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d035      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001af2:	e030      	b.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	2208      	movs	r2, #8
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d028      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d023      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 020e 	bic.w	r2, r2, #14
 8001b1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
    }
  }
}  
 8001b54:	e7ff      	b.n	8001b56 <HAL_DMA_IRQHandler+0x13e>
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d108      	bne.n	8001b9e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b9c:	e007      	b.n	8001bae <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <DMA_CalcBaseAndBitshift+0x34>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <DMA_CalcBaseAndBitshift+0x38>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	009a      	lsls	r2, r3, #2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <DMA_CalcBaseAndBitshift+0x3c>)
 8001be0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	bffdfff8 	.word	0xbffdfff8
 8001bf4:	cccccccd 	.word	0xcccccccd
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e14e      	b.n	8001eaa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8140 	beq.w	8001ea4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 809a 	beq.w	8001ea4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a54      	ldr	r2, [pc, #336]	@ (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d88:	4a50      	ldr	r2, [pc, #320]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a46      	ldr	r2, [pc, #280]	@ (8001ed0 <HAL_GPIO_Init+0x2d4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1dc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a45      	ldr	r2, [pc, #276]	@ (8001ed4 <HAL_GPIO_Init+0x2d8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a44      	ldr	r2, [pc, #272]	@ (8001ed8 <HAL_GPIO_Init+0x2dc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1d4>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dee:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfc:	4b37      	ldr	r3, [pc, #220]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e4a:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <HAL_GPIO_Init+0x2e0>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f aea9 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e001      	b.n	8001f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f932 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e081      	b.n	8002086 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe ff60 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	@ 0x24
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e006      	b.n	8001ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d104      	bne.n	800200a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800201c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800202c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d138      	bne.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e032      	b.n	8002118 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2224      	movs	r2, #36	@ 0x24
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002116:	2302      	movs	r3, #2
  }
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d139      	bne.n	80021ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002144:	2302      	movs	r3, #2
 8002146:	e033      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2224      	movs	r2, #36	@ 0x24
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80021d6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80021e0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80021f6:	f7ff f89b 	bl	8001330 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80021fc:	e00f      	b.n	800221e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80021fe:	f7ff f897 	bl	8001330 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b27      	cmp	r3, #39	@ 0x27
 800220a:	d908      	bls.n	800221e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e019      	b.n	8002252 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e8      	bne.n	80021fe <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d005      	beq.n	8002246 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	e004      	b.n	8002250 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800226a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002282:	af00      	add	r7, sp, #0
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800228e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f001 b823 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 817d 	beq.w	80025b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022b8:	4bbc      	ldr	r3, [pc, #752]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d00c      	beq.n	80022de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c4:	4bb9      	ldr	r3, [pc, #740]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d15c      	bne.n	800238a <HAL_RCC_OscConfig+0x10e>
 80022d0:	4bb6      	ldr	r3, [pc, #728]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d155      	bne.n	800238a <HAL_RCC_OscConfig+0x10e>
 80022de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0x94>
 800230a:	4ba8      	ldr	r3, [pc, #672]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e015      	b.n	800233c <HAL_RCC_OscConfig+0xc0>
 8002310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002314:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002328:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800232c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002338:	4b9c      	ldr	r3, [pc, #624]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002340:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002344:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002350:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f042 0220 	orr.w	r2, r2, #32
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f002 021f 	and.w	r2, r2, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f202 	lsl.w	r2, r1, r2
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 811f 	beq.w	80025b0 <HAL_RCC_OscConfig+0x334>
 8002372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 8116 	bne.w	80025b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f000 bfaf 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x12e>
 800239c:	4b83      	ldr	r3, [pc, #524]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a82      	ldr	r2, [pc, #520]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e036      	b.n	8002418 <HAL_RCC_OscConfig+0x19c>
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x158>
 80023ba:	4b7c      	ldr	r3, [pc, #496]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7b      	ldr	r2, [pc, #492]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b79      	ldr	r3, [pc, #484]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a78      	ldr	r2, [pc, #480]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e021      	b.n	8002418 <HAL_RCC_OscConfig+0x19c>
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x184>
 80023e6:	4b71      	ldr	r3, [pc, #452]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a70      	ldr	r2, [pc, #448]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6e      	ldr	r3, [pc, #440]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6d      	ldr	r2, [pc, #436]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x19c>
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a69      	ldr	r2, [pc, #420]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b67      	ldr	r3, [pc, #412]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a66      	ldr	r2, [pc, #408]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002418:	4b64      	ldr	r3, [pc, #400]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	f023 020f 	bic.w	r2, r3, #15
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	495f      	ldr	r1, [pc, #380]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 800242e:	4313      	orrs	r3, r2
 8002430:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d059      	beq.n	80024f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe ff75 	bl	8001330 <HAL_GetTick>
 8002446:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe ff70 	bl	8001330 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	@ 0x64
 800245a:	d902      	bls.n	8002462 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	f000 bf43 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002466:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002476:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0x218>
 800248e:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e015      	b.n	80024c0 <HAL_RCC_OscConfig+0x244>
 8002494:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002498:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80024a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80024b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80024bc:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80024c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80024d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80024d8:	fab2 f282 	clz	r2, r2
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f042 0220 	orr.w	r2, r2, #32
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f002 021f 	and.w	r2, r2, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ab      	beq.n	800244c <HAL_RCC_OscConfig+0x1d0>
 80024f4:	e05d      	b.n	80025b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe ff1b 	bl	8001330 <HAL_GetTick>
 80024fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe ff16 	bl	8001330 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	@ 0x64
 800250e:	d902      	bls.n	8002516 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	f000 bee9 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002516:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800251a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800252a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_RCC_OscConfig+0x2cc>
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	e015      	b.n	8002574 <HAL_RCC_OscConfig+0x2f8>
 8002548:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800254c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800255c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002560:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002564:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002570:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_RCC_OscConfig+0x330>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002578:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800257c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002580:	fa92 f2a2 	rbit	r2, r2
 8002584:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002588:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ab      	bne.n	8002500 <HAL_RCC_OscConfig+0x284>
 80025a8:	e003      	b.n	80025b2 <HAL_RCC_OscConfig+0x336>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 817d 	beq.w	80028c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025c8:	4ba6      	ldr	r3, [pc, #664]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025d4:	4ba3      	ldr	r3, [pc, #652]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d172      	bne.n	80026c6 <HAL_RCC_OscConfig+0x44a>
 80025e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d16c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x44a>
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0x3a0>
 8002616:	4b93      	ldr	r3, [pc, #588]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e013      	b.n	8002644 <HAL_RCC_OscConfig+0x3c8>
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002634:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002640:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	2202      	movs	r2, #2
 8002646:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800264a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002656:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800265a:	fab2 f282 	clz	r2, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f042 0220 	orr.w	r2, r2, #32
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f002 021f 	and.w	r2, r2, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCC_OscConfig+0x410>
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d002      	beq.n	800268c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f000 be2e 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	21f8      	movs	r1, #248	@ 0xf8
 80026a2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80026aa:	fa91 f1a1 	rbit	r1, r1
 80026ae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80026b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80026b6:	fab1 f181 	clz	r1, r1
 80026ba:	b2c9      	uxtb	r1, r1
 80026bc:	408b      	lsls	r3, r1
 80026be:	4969      	ldr	r1, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c4:	e0fd      	b.n	80028c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8088 	beq.w	80027e8 <HAL_RCC_OscConfig+0x56c>
 80026d8:	2301      	movs	r3, #1
 80026da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80026ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fe14 	bl	8001330 <HAL_GetTick>
 8002708:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fe0f 	bl	8001330 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	f000 bde2 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002736:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0x4d8>
 800274e:	4b45      	ldr	r3, [pc, #276]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e013      	b.n	800277c <HAL_RCC_OscConfig+0x500>
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800276c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002778:	4b3a      	ldr	r3, [pc, #232]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	2202      	movs	r2, #2
 800277e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002782:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800278e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0af      	beq.n	800270e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	21f8      	movs	r1, #248	@ 0xf8
 80027c4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80027cc:	fa91 f1a1 	rbit	r1, r1
 80027d0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027d8:	fab1 f181 	clz	r1, r1
 80027dc:	b2c9      	uxtb	r1, r1
 80027de:	408b      	lsls	r3, r1
 80027e0:	4920      	ldr	r1, [pc, #128]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
 80027e6:	e06c      	b.n	80028c2 <HAL_RCC_OscConfig+0x646>
 80027e8:	2301      	movs	r3, #1
 80027ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80027fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002808:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	2300      	movs	r3, #0
 8002812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fd8c 	bl	8001330 <HAL_GetTick>
 8002818:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fd87 	bl	8001330 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	f000 bd5a 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002846:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d104      	bne.n	8002868 <HAL_RCC_OscConfig+0x5ec>
 800285e:	4b01      	ldr	r3, [pc, #4]	@ (8002864 <HAL_RCC_OscConfig+0x5e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e015      	b.n	8002890 <HAL_RCC_OscConfig+0x614>
 8002864:	40021000 	.word	0x40021000
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800287a:	2302      	movs	r3, #2
 800287c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002880:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800288c:	4bc8      	ldr	r3, [pc, #800]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	2202      	movs	r2, #2
 8002892:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002896:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80028a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ad      	bne.n	800281e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8110 	beq.w	8002af8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d079      	beq.n	80029dc <HAL_RCC_OscConfig+0x760>
 80028e8:	2301      	movs	r3, #1
 80028ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80028fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4bab      	ldr	r3, [pc, #684]	@ (8002bb4 <HAL_RCC_OscConfig+0x938>)
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	461a      	mov	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe fd0d 	bl	8001330 <HAL_GetTick>
 8002916:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fd08 	bl	8001330 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d902      	bls.n	8002932 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	f000 bcdb 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800298a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298c:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 800298e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002998:	2102      	movs	r1, #2
 800299a:	6019      	str	r1, [r3, #0]
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f1a3 	rbit	r1, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029b2:	6019      	str	r1, [r3, #0]
  return result;
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0a0      	beq.n	800291c <HAL_RCC_OscConfig+0x6a0>
 80029da:	e08d      	b.n	8002af8 <HAL_RCC_OscConfig+0x87c>
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029fe:	601a      	str	r2, [r3, #0]
  return result;
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b68      	ldr	r3, [pc, #416]	@ (8002bb4 <HAL_RCC_OscConfig+0x938>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fc87 	bl	8001330 <HAL_GetTick>
 8002a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fc82 	bl	8001330 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f000 bc55 	b.w	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a8e:	2202      	movs	r2, #2
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002aa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	6019      	str	r1, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f1a3 	rbit	r1, r3
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ad0:	6019      	str	r1, [r3, #0]
  return result;
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d197      	bne.n	8002a28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 81a1 	beq.w	8002e50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <HAL_RCC_OscConfig+0x93c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCC_OscConfig+0x93c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a16      	ldr	r2, [pc, #88]	@ (8002bb8 <HAL_RCC_OscConfig+0x93c>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fbe3 	bl	8001330 <HAL_GetTick>
 8002b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	e009      	b.n	8002b84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe fbde 	bl	8001330 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	@ 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e3b1      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <HAL_RCC_OscConfig+0x93c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x940>
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a02      	ldr	r2, [pc, #8]	@ (8002bb0 <HAL_RCC_OscConfig+0x934>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e03c      	b.n	8002c28 <HAL_RCC_OscConfig+0x9ac>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	10908120 	.word	0x10908120
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x96a>
 8002bcc:	4bc1      	ldr	r3, [pc, #772]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4ac0      	ldr	r2, [pc, #768]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	4bbe      	ldr	r3, [pc, #760]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4abd      	ldr	r2, [pc, #756]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e020      	b.n	8002c28 <HAL_RCC_OscConfig+0x9ac>
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x994>
 8002bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4ab6      	ldr	r2, [pc, #728]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4bb4      	ldr	r3, [pc, #720]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4ab3      	ldr	r2, [pc, #716]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6213      	str	r3, [r2, #32]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0x9ac>
 8002c10:	4bb0      	ldr	r3, [pc, #704]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4aaf      	ldr	r2, [pc, #700]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	4bad      	ldr	r3, [pc, #692]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4aac      	ldr	r2, [pc, #688]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8081 	beq.w	8002d3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fb79 	bl	8001330 <HAL_GetTick>
 8002c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe fb74 	bl	8001330 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e345      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c64:	2202      	movs	r2, #2
 8002c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ca2:	601a      	str	r2, [r3, #0]
  return result;
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xa4c>
 8002cc2:	4b84      	ldr	r3, [pc, #528]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	e013      	b.n	8002cf0 <HAL_RCC_OscConfig+0xa74>
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	6011      	str	r1, [r2, #0]
 8002cfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	fa92 f1a2 	rbit	r1, r2
 8002d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d0e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d12:	6011      	str	r1, [r2, #0]
  return result;
 8002d14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d18:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d084      	beq.n	8002c44 <HAL_RCC_OscConfig+0x9c8>
 8002d3a:	e07f      	b.n	8002e3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe faf8 	bl	8001330 <HAL_GetTick>
 8002d40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe faf3 	bl	8001330 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e2c4      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d92:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002da4:	601a      	str	r2, [r3, #0]
  return result;
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_OscConfig+0xb4e>
 8002dc4:	4b43      	ldr	r3, [pc, #268]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	e013      	b.n	8002df2 <HAL_RCC_OscConfig+0xb76>
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e02:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	fa92 f1a2 	rbit	r1, r2
 8002e0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e10:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e14:	6011      	str	r1, [r2, #0]
  return result;
 8002e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d184      	bne.n	8002d46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8242 	beq.w	80032e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <HAL_RCC_OscConfig+0xc58>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	f000 8213 	beq.w	8003296 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 8162 	bne.w	8003146 <HAL_RCC_OscConfig+0xeca>
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ea6:	601a      	str	r2, [r3, #0]
  return result;
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002eb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ebc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fa32 	bl	8001330 <HAL_GetTick>
 8002ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e00c      	b.n	8002eec <HAL_RCC_OscConfig+0xc70>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fa2a 	bl	8001330 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1fd      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ef4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f10:	601a      	str	r2, [r3, #0]
  return result;
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0xcba>
 8002f30:	4bb0      	ldr	r3, [pc, #704]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	e027      	b.n	8002f86 <HAL_RCC_OscConfig+0xd0a>
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f56:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	4b9c      	ldr	r3, [pc, #624]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f8e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f92:	6011      	str	r1, [r2, #0]
 8002f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f98:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	fa92 f1a2 	rbit	r1, r2
 8002fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002faa:	6011      	str	r1, [r2, #0]
  return result;
 8002fac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d182      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	4b88      	ldr	r3, [pc, #544]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	497f      	ldr	r1, [pc, #508]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800301e:	601a      	str	r2, [r3, #0]
  return result;
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003028:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003034:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	461a      	mov	r2, r3
 800303c:	2301      	movs	r3, #1
 800303e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe f976 	bl	8001330 <HAL_GetTick>
 8003044:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	e009      	b.n	800305e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f971 	bl	8001330 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e144      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003066:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003082:	601a      	str	r2, [r3, #0]
  return result;
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800308c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_OscConfig+0xe2c>
 80030a2:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e027      	b.n	80030f8 <HAL_RCC_OscConfig+0xe7c>
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003100:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003104:	6011      	str	r1, [r2, #0]
 8003106:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800310a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fa92 f1a2 	rbit	r1, r2
 8003114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003118:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800311c:	6011      	str	r1, [r2, #0]
  return result;
 800311e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003122:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	f042 0220 	orr.w	r2, r2, #32
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	f002 021f 	and.w	r2, r2, #31
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f202 	lsl.w	r2, r1, r2
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d082      	beq.n	800304a <HAL_RCC_OscConfig+0xdce>
 8003144:	e0cf      	b.n	80032e6 <HAL_RCC_OscConfig+0x106a>
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800314e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800316a:	601a      	str	r2, [r3, #0]
  return result;
 800316c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003170:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003174:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003180:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe f8d0 	bl	8001330 <HAL_GetTick>
 8003190:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	e009      	b.n	80031aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe f8cb 	bl	8001330 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e09e      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031ce:	601a      	str	r2, [r3, #0]
  return result;
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <HAL_RCC_OscConfig+0xf7c>
 80031ee:	4b01      	ldr	r3, [pc, #4]	@ (80031f4 <HAL_RCC_OscConfig+0xf78>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e029      	b.n	8003248 <HAL_RCC_OscConfig+0xfcc>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003226:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <HAL_RCC_OscConfig+0x1078>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003250:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003254:	6011      	str	r1, [r2, #0]
 8003256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800325a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	fa92 f1a2 	rbit	r1, r2
 8003264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003268:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800326c:	6011      	str	r1, [r2, #0]
  return result;
 800326e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003272:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	fab2 f282 	clz	r2, r2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f042 0220 	orr.w	r2, r2, #32
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f002 021f 	and.w	r2, r2, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d180      	bne.n	8003196 <HAL_RCC_OscConfig+0xf1a>
 8003294:	e027      	b.n	80032e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e01e      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCC_OscConfig+0x1078>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000

080032f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b09e      	sub	sp, #120	@ 0x78
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e162      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b90      	ldr	r3, [pc, #576]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d910      	bls.n	8003340 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	498b      	ldr	r1, [pc, #556]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b89      	ldr	r3, [pc, #548]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e14a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b82      	ldr	r3, [pc, #520]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	497f      	ldr	r1, [pc, #508]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80dc 	beq.w	8003524 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d13c      	bne.n	80033ee <HAL_RCC_ClockConfig+0xf6>
 8003374:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003378:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HAL_RCC_ClockConfig+0xa6>
 8003398:	4b6f      	ldr	r3, [pc, #444]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	e00f      	b.n	80033be <HAL_RCC_ClockConfig+0xc6>
 800339e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80033ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80033b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ba:	4b67      	ldr	r3, [pc, #412]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033c6:	fa92 f2a2 	rbit	r2, r2
 80033ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d17b      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0f3      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d13c      	bne.n	8003470 <HAL_RCC_ClockConfig+0x178>
 80033f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_RCC_ClockConfig+0x128>
 800341a:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e00f      	b.n	8003440 <HAL_RCC_ClockConfig+0x148>
 8003420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003424:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	647b      	str	r3, [r7, #68]	@ 0x44
 800342e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003432:	643b      	str	r3, [r7, #64]	@ 0x40
 8003434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800343c:	4b46      	ldr	r3, [pc, #280]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003444:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003448:	fa92 f2a2 	rbit	r2, r2
 800344c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800344e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003450:	fab2 f282 	clz	r2, r2
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f002 021f 	and.w	r2, r2, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d13a      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b2      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
 8003470:	2302      	movs	r3, #2
 8003472:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_RCC_ClockConfig+0x1a0>
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e00d      	b.n	80034b4 <HAL_RCC_ClockConfig+0x1bc>
 8003498:	2302      	movs	r3, #2
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	2202      	movs	r2, #2
 80034b6:	61ba      	str	r2, [r7, #24]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	fa92 f2a2 	rbit	r2, r2
 80034be:	617a      	str	r2, [r7, #20]
  return result;
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e079      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	491a      	ldr	r1, [pc, #104]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fd ff1c 	bl	8001330 <HAL_GetTick>
 80034f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fd ff18 	bl	8001330 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e061      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_RCC_ClockConfig+0x260>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d214      	bcs.n	800355c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4906      	ldr	r1, [pc, #24]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <HAL_RCC_ClockConfig+0x25c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e040      	b.n	80035d6 <HAL_RCC_ClockConfig+0x2de>
 8003554:	40022000 	.word	0x40022000
 8003558:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_RCC_ClockConfig+0x2e8>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	491a      	ldr	r1, [pc, #104]	@ (80035e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4912      	ldr	r1, [pc, #72]	@ (80035e0 <HAL_RCC_ClockConfig+0x2e8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800359a:	f000 f829 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 800359e:	4601      	mov	r1, r0
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <HAL_RCC_ClockConfig+0x2e8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a8:	22f0      	movs	r2, #240	@ 0xf0
 80035aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	fa92 f2a2 	rbit	r2, r2
 80035b2:	60fa      	str	r2, [r7, #12]
  return result;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	40d3      	lsrs	r3, r2
 80035be:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x2ec>)
 80035c0:	5cd3      	ldrb	r3, [r2, r3]
 80035c2:	fa21 f303 	lsr.w	r3, r1, r3
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <HAL_RCC_ClockConfig+0x2f0>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_RCC_ClockConfig+0x2f4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fe6a 	bl	80012a8 <HAL_InitTick>
  
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3778      	adds	r7, #120	@ 0x78
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	08005804 	.word	0x08005804
 80035e8:	20000058 	.word	0x20000058
 80035ec:	2000005c 	.word	0x2000005c

080035f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b08b      	sub	sp, #44	@ 0x2c
 80035f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800360a:	4b29      	ldr	r3, [pc, #164]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d002      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x30>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x36>
 800361e:	e03c      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003620:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003622:	623b      	str	r3, [r7, #32]
      break;
 8003624:	e03c      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800362c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003630:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	fa92 f2a2 	rbit	r2, r2
 8003638:	607a      	str	r2, [r7, #4]
  return result;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	fab2 f282 	clz	r2, r2
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	40d3      	lsrs	r3, r2
 8003644:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	220f      	movs	r2, #15
 8003654:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	60fa      	str	r2, [r7, #12]
  return result;
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	40d3      	lsrs	r3, r2
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003678:	4a0e      	ldr	r2, [pc, #56]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
 8003688:	e004      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4a0c      	ldr	r2, [pc, #48]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	e002      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800369a:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800369c:	623b      	str	r3, [r7, #32]
      break;
 800369e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	372c      	adds	r7, #44	@ 0x2c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	01e84800 	.word	0x01e84800
 80036b8:	0800581c 	.word	0x0800581c
 80036bc:	0800582c 	.word	0x0800582c
 80036c0:	003d0900 	.word	0x003d0900
 80036c4:	007a1200 	.word	0x007a1200

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000058 	.word	0x20000058

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036e6:	f7ff ffef 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036ea:	4601      	mov	r1, r0
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	fa92 f2a2 	rbit	r2, r2
 8003700:	603a      	str	r2, [r7, #0]
  return result;
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	fab2 f282 	clz	r2, r2
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	40d3      	lsrs	r3, r2
 800370c:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x40>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	08005814 	.word	0x08005814

08003724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800372a:	f7ff ffcd 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 800372e:	4601      	mov	r1, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003738:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800373c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	603a      	str	r2, [r7, #0]
  return result;
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	40d3      	lsrs	r3, r2
 8003750:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	08005814 	.word	0x08005814

08003768 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b092      	sub	sp, #72	@ 0x48
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80cd 	beq.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378c:	4b86      	ldr	r3, [pc, #536]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10e      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b83      	ldr	r3, [pc, #524]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a82      	ldr	r2, [pc, #520]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
 80037a4:	4b80      	ldr	r3, [pc, #512]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b7d      	ldr	r3, [pc, #500]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b7a      	ldr	r3, [pc, #488]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a79      	ldr	r2, [pc, #484]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7fd fdaf 	bl	8001330 <HAL_GetTick>
 80037d2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fd fdab 	bl	8001330 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	@ 0x64
 80037e2:	d901      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0db      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b70      	ldr	r3, [pc, #448]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f4:	4b6c      	ldr	r3, [pc, #432]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d07d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800380c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800380e:	429a      	cmp	r2, r3
 8003810:	d076      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003812:	4b65      	ldr	r3, [pc, #404]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003820:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800382a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	4b5e      	ldr	r3, [pc, #376]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	2301      	movs	r3, #1
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800384e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	4b55      	ldr	r3, [pc, #340]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003864:	4a50      	ldr	r2, [pc, #320]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003868:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800386a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d045      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fd fd5c 	bl	8001330 <HAL_GetTick>
 8003878:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fd fd58 	bl	8001330 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e086      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003892:	2302      	movs	r3, #2
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
 800389e:	2302      	movs	r3, #2
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	61fb      	str	r3, [r7, #28]
  return result;
 80038aa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d102      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80038c0:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	e007      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	2202      	movs	r2, #2
 80038d8:	613a      	str	r2, [r7, #16]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	fa92 f2a2 	rbit	r2, r2
 80038e0:	60fa      	str	r2, [r7, #12]
  return result;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	fab2 f282 	clz	r2, r2
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	f002 021f 	and.w	r2, r2, #31
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f202 	lsl.w	r2, r1, r2
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0bd      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003900:	4b29      	ldr	r3, [pc, #164]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4926      	ldr	r1, [pc, #152]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800390e:	4313      	orrs	r3, r2
 8003910:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003912:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003924:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	491a      	ldr	r1, [pc, #104]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	f023 0210 	bic.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4912      	ldr	r1, [pc, #72]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395e:	4313      	orrs	r3, r2
 8003960:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800396e:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	490b      	ldr	r1, [pc, #44]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800397c:	4313      	orrs	r3, r2
 800397e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800399a:	4313      	orrs	r3, r2
 800399c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3748      	adds	r7, #72	@ 0x48
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	10908100 	.word	0x10908100

080039b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e095      	b.n	8003af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d6:	d009      	beq.n	80039ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
 80039de:	e005      	b.n	80039ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fa6c 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a2c:	d902      	bls.n	8003a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	e002      	b.n	8003a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a42:	d007      	beq.n	8003a54 <HAL_SPI_Init+0xa0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	ea42 0103 	orr.w	r1, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	f003 0204 	and.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_SPI_Transmit_DMA+0x20>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0d4      	b.n	8003cc6 <HAL_SPI_Transmit_DMA+0x1ca>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b34:	e0c2      	b.n	8003cbc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Transmit_DMA+0x46>
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b46:	e0b9      	b.n	8003cbc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b92:	d10f      	bne.n	8003bb4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb8:	4a45      	ldr	r2, [pc, #276]	@ (8003cd0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003bba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc0:	4a44      	ldr	r2, [pc, #272]	@ (8003cd4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4a43      	ldr	r2, [pc, #268]	@ (8003cd8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003be2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bec:	d82d      	bhi.n	8003c4a <HAL_SPI_Transmit_DMA+0x14e>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf8:	d127      	bne.n	8003c4a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c16:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c26:	e010      	b.n	8003c4a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c36:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	4619      	mov	r1, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c62:	f7fd fe03 	bl	800186c <HAL_DMA_Start_IT>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003c7c:	e01e      	b.n	8003cbc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d007      	beq.n	8003c9c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0220 	orr.w	r2, r2, #32
 8003caa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0202 	orr.w	r2, r2, #2
 8003cba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003dbf 	.word	0x08003dbf
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003ddb 	.word	0x08003ddb

08003cdc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d26:	f7fd fb03 	bl	8001330 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d03b      	beq.n	8003db2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0220 	bic.w	r2, r2, #32
 8003d48:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0202 	bic.w	r2, r2, #2
 8003d58:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	2164      	movs	r1, #100	@ 0x64
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f000 f97a 	bl	8004058 <SPI_EndRxTxTransaction>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ffaa 	bl	8003d04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003db0:	e002      	b.n	8003db8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f7ff ff92 	bl	8003cdc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff8f 	bl	8003cf0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0203 	bic.w	r2, r2, #3
 8003df6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f043 0210 	orr.w	r2, r3, #16
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ff79 	bl	8003d04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e2c:	f7fd fa80 	bl	8001330 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e3c:	f7fd fa78 	bl	8001330 <HAL_GetTick>
 8003e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e42:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e52:	e054      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d050      	beq.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5c:	f7fd fa68 	bl	8001330 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13d      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8a:	d111      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	d004      	beq.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d107      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb8:	d10f      	bne.n	8003eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e017      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d19b      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000058 	.word	0x20000058

08003f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3e:	f7fd f9f7 	bl	8001330 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f4e:	f7fd f9ef 	bl	8001330 <HAL_GetTick>
 8003f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	0d1b      	lsrs	r3, r3, #20
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f74:	e060      	b.n	8004038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f7c:	d107      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d050      	beq.n	8004038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f96:	f7fd f9cb 	bl	8001330 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d902      	bls.n	8003fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d13d      	bne.n	8004028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc4:	d111      	bne.n	8003fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fce:	d004      	beq.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd8:	d107      	bne.n	8003fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff2:	d10f      	bne.n	8004014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e010      	b.n	800404a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3b01      	subs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d196      	bne.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3728      	adds	r7, #40	@ 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000058 	.word	0x20000058

08004058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff5b 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e027      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fec0 	bl	8003e1c <SPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e014      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff ff34 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e000      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e040      	b.n	8004178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc ff58 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fb76 	bl	8004814 <UART_SetConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fca0 	bl	8004a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fd27 	bl	8004bc4 <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	@ 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004194:	2b20      	cmp	r3, #32
 8004196:	d132      	bne.n	80041fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Receive_IT+0x24>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e02b      	b.n	8004200 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d018      	beq.n	80041ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	69f9      	ldr	r1, [r7, #28]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e6      	bne.n	80041bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	461a      	mov	r2, r3
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fdf5 	bl	8004de4 <UART_Start_Receive_IT>
 80041fa:	4603      	mov	r3, r0
 80041fc:	e000      	b.n	8004200 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	@ 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0ba      	sub	sp, #232	@ 0xe8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800422e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004232:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004236:	4013      	ands	r3, r2
 8004238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800423c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d115      	bne.n	8004270 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00f      	beq.n	8004270 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 82ab 	beq.w	80047bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
      }
      return;
 800426e:	e2a5      	b.n	80047bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8117 	beq.w	80044a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800427a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800428a:	4b85      	ldr	r3, [pc, #532]	@ (80044a0 <HAL_UART_IRQHandler+0x298>)
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 810a 	beq.w	80044a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_UART_IRQHandler+0xbc>
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d011      	beq.n	80042f4 <HAL_UART_IRQHandler+0xec>
 80042d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2202      	movs	r2, #2
 80042e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_UART_IRQHandler+0x11c>
 8004300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2204      	movs	r2, #4
 8004312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431a:	f043 0202 	orr.w	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d017      	beq.n	8004360 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004340:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2208      	movs	r2, #8
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <HAL_UART_IRQHandler+0x18a>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8211 	beq.w	80047c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043da:	2b40      	cmp	r3, #64	@ 0x40
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04f      	beq.n	800448a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fdc0 	bl	8004f70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fa:	2b40      	cmp	r3, #64	@ 0x40
 80043fc:	d141      	bne.n	8004482 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3308      	adds	r3, #8
 8004404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800442a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800442e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1d9      	bne.n	80043fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <HAL_UART_IRQHandler+0x29c>)
 8004458:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fa9c 	bl	800199c <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	e00f      	b.n	800449a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9b4 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00b      	b.n	800449a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9b0 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e007      	b.n	800449a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9ac 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004498:	e192      	b.n	80047c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449a:	bf00      	nop
    return;
 800449c:	e190      	b.n	80047c0 <HAL_UART_IRQHandler+0x5b8>
 800449e:	bf00      	nop
 80044a0:	04000120 	.word	0x04000120
 80044a4:	08005039 	.word	0x08005039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 814b 	bne.w	8004748 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8144 	beq.w	8004748 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 813d 	beq.w	8004748 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	f040 80b5 	bne.w	8004650 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8164 	beq.w	80047c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004506:	429a      	cmp	r2, r3
 8004508:	f080 815c 	bcs.w	80047c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004512:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b20      	cmp	r3, #32
 800451e:	f000 8086 	beq.w	800462e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004536:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800453a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800454c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004550:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004558:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1da      	bne.n	8004522 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800457c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004590:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004594:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004598:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e1      	bne.n	800456c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004610:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004612:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004616:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800461e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e4      	bne.n	80045ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004628:	4618      	mov	r0, r3
 800462a:	f7fd f97e 	bl	800192a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004640:	b29b      	uxth	r3, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8d7 	bl	80047fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800464e:	e0b9      	b.n	80047c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80ab 	beq.w	80047c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80a6 	beq.w	80047c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800469e:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e4      	bne.n	800467c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	623b      	str	r3, [r7, #32]
   return(result);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	617b      	str	r3, [r7, #20]
   return(result);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e4      	bne.n	80046fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800473a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f85b 	bl	80047fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004746:	e03f      	b.n	80047c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <HAL_UART_IRQHandler+0x56a>
 8004754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fe4c 	bl	8005408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004770:	e02d      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01c      	beq.n	80047cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
    }
    return;
 800479a:	e017      	b.n	80047cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_UART_IRQHandler+0x5c6>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fc55 	bl	8005064 <UART_EndTransmit_IT>
    return;
 80047ba:	e008      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80047bc:	bf00      	nop
 80047be:	e006      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80047c0:	bf00      	nop
 80047c2:	e004      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80047c4:	bf00      	nop
 80047c6:	e002      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80047cc:	bf00      	nop
  }

}
 80047ce:	37e8      	adds	r7, #232	@ 0xe8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <UART_SetConfig+0x254>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	430b      	orrs	r3, r1
 800484a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a78      	ldr	r2, [pc, #480]	@ (8004a6c <UART_SetConfig+0x258>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d120      	bne.n	80048d2 <UART_SetConfig+0xbe>
 8004890:	4b77      	ldr	r3, [pc, #476]	@ (8004a70 <UART_SetConfig+0x25c>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b03      	cmp	r3, #3
 800489a:	d817      	bhi.n	80048cc <UART_SetConfig+0xb8>
 800489c:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0x90>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c1 	.word	0x080048c1
 80048ac:	080048c7 	.word	0x080048c7
 80048b0:	080048bb 	.word	0x080048bb
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e01d      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e01a      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e017      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e011      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a67      	ldr	r2, [pc, #412]	@ (8004a74 <UART_SetConfig+0x260>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d102      	bne.n	80048e2 <UART_SetConfig+0xce>
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a64      	ldr	r2, [pc, #400]	@ (8004a78 <UART_SetConfig+0x264>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <UART_SetConfig+0xde>
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e001      	b.n	80048f6 <UART_SetConfig+0xe2>
 80048f2:	2310      	movs	r3, #16
 80048f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fe:	d15a      	bne.n	80049b6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d827      	bhi.n	8004956 <UART_SetConfig+0x142>
 8004906:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0xf8>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe fed6 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe fef4 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b4e      	ldr	r3, [pc, #312]	@ (8004a7c <UART_SetConfig+0x268>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fe fe53 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d074      	beq.n	8004a50 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	005a      	lsls	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	d916      	bls.n	80049b0 <UART_SetConfig+0x19c>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d212      	bcs.n	80049b0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f023 030f 	bic.w	r3, r3, #15
 8004992:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	b29b      	uxth	r3, r3
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	b29a      	uxth	r2, r3
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	89fa      	ldrh	r2, [r7, #14]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e04f      	b.n	8004a50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	77bb      	strb	r3, [r7, #30]
 80049b4:	e04c      	b.n	8004a50 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d828      	bhi.n	8004a0e <UART_SetConfig+0x1fa>
 80049bc:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <UART_SetConfig+0x1b0>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7fe fe7a 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e013      	b.n	8004a18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7fe fe98 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 80049f4:	61b8      	str	r0, [r7, #24]
        break;
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b20      	ldr	r3, [pc, #128]	@ (8004a7c <UART_SetConfig+0x268>)
 80049fa:	61bb      	str	r3, [r7, #24]
        break;
 80049fc:	e00c      	b.n	8004a18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fe fdf7 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 8004a02:	61b8      	str	r0, [r7, #24]
        break;
 8004a04:	e008      	b.n	8004a18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0a:	61bb      	str	r3, [r7, #24]
        break;
 8004a0c:	e004      	b.n	8004a18 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77bb      	strb	r3, [r7, #30]
        break;
 8004a16:	bf00      	nop
    }

    if (pclk != 0U)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085a      	lsrs	r2, r3, #1
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	441a      	add	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d909      	bls.n	8004a4c <UART_SetConfig+0x238>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3e:	d205      	bcs.n	8004a4c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	efff69f3 	.word	0xefff69f3
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40004400 	.word	0x40004400
 8004a78:	40004800 	.word	0x40004800
 8004a7c:	007a1200 	.word	0x007a1200

08004a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7e:	d10a      	bne.n	8004b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b098      	sub	sp, #96	@ 0x60
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd4:	f7fc fbac 	bl	8001330 <HAL_GetTick>
 8004bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d12e      	bne.n	8004c46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f88c 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e062      	b.n	8004d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d149      	bne.n	8004ce8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f856 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03c      	beq.n	8004ce8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc0:	61fa      	str	r2, [r7, #28]
 8004cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e011      	b.n	8004d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3758      	adds	r7, #88	@ 0x58
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	e049      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d045      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fc faff 	bl	8001330 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e048      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d031      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d110      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f8ff 	bl	8004f70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2208      	movs	r2, #8
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e029      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d94:	d111      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f8e5 	bl	8004f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0a6      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b097      	sub	sp, #92	@ 0x5c
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e16:	d10e      	bne.n	8004e36 <UART_Start_Receive_IT+0x52>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <UART_Start_Receive_IT+0x48>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e2a:	e02d      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	22ff      	movs	r2, #255	@ 0xff
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e34:	e028      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <UART_Start_Receive_IT+0x76>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <UART_Start_Receive_IT+0x6c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	@ 0xff
 8004e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e4e:	e01b      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	227f      	movs	r2, #127	@ 0x7f
 8004e54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e58:	e016      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e62:	d10d      	bne.n	8004e80 <UART_Start_Receive_IT+0x9c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <UART_Start_Receive_IT+0x92>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	227f      	movs	r2, #127	@ 0x7f
 8004e70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e74:	e008      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	223f      	movs	r2, #63	@ 0x3f
 8004e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e7e:	e003      	b.n	8004e88 <UART_Start_Receive_IT+0xa4>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2222      	movs	r2, #34	@ 0x22
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004eb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004eba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed4:	d107      	bne.n	8004ee6 <UART_Start_Receive_IT+0x102>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <UART_Start_Receive_IT+0x184>)
 8004ee2:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ee4:	e002      	b.n	8004eec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a20      	ldr	r2, [pc, #128]	@ (8004f6c <UART_Start_Receive_IT+0x188>)
 8004eea:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f14:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e6      	bne.n	8004ef4 <UART_Start_Receive_IT+0x110>
 8004f26:	e018      	b.n	8004f5a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f043 0320 	orr.w	r3, r3, #32
 8004f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e6      	bne.n	8004f28 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	375c      	adds	r7, #92	@ 0x5c
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	08005261 	.word	0x08005261
 8004f6c:	080050b9 	.word	0x080050b9

08004f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b095      	sub	sp, #84	@ 0x54
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d118      	bne.n	8005018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f023 0310 	bic.w	r3, r3, #16
 8004ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	613b      	str	r3, [r7, #16]
   return(result);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800502c:	bf00      	nop
 800502e:	3754      	adds	r7, #84	@ 0x54
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fbc6 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	60bb      	str	r3, [r7, #8]
   return(result);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6979      	ldr	r1, [r7, #20]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e6      	bne.n	800506c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fb92 	bl	80047d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b0:	bf00      	nop
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b09c      	sub	sp, #112	@ 0x70
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d0:	2b22      	cmp	r3, #34	@ 0x22
 80050d2:	f040 80b9 	bne.w	8005248 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80050dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	400a      	ands	r2, r1
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 809c 	bne.w	8005258 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800512e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800513e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005140:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800514c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e6      	bne.n	8005120 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	667b      	str	r3, [r7, #100]	@ 0x64
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005172:	647a      	str	r2, [r7, #68]	@ 0x44
 8005174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e5      	bne.n	8005152 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	623b      	str	r3, [r7, #32]
   return(result);
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e6      	bne.n	80051a8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d12e      	bne.n	8005240 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	617b      	str	r3, [r7, #20]
   return(result);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d103      	bne.n	8005230 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2210      	movs	r2, #16
 800522e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fadf 	bl	80047fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800523e:	e00b      	b.n	8005258 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fb f965 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 8005246:	e007      	b.n	8005258 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0208 	orr.w	r2, r2, #8
 8005256:	619a      	str	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	3770      	adds	r7, #112	@ 0x70
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b09c      	sub	sp, #112	@ 0x70
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800526e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005278:	2b22      	cmp	r3, #34	@ 0x22
 800527a:	f040 80b9 	bne.w	80053f0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005284:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800528e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005292:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005296:	4013      	ands	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800529c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	1c9a      	adds	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 809c 	bne.w	8005400 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	663b      	str	r3, [r7, #96]	@ 0x60
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800531a:	643a      	str	r2, [r7, #64]	@ 0x40
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d018      	beq.n	8005382 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	61fb      	str	r3, [r7, #28]
   return(result);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005386:	2b01      	cmp	r3, #1
 8005388:	d12e      	bne.n	80053e8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	60bb      	str	r3, [r7, #8]
   return(result);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0310 	bic.w	r3, r3, #16
 80053a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	613b      	str	r3, [r7, #16]
   return(result);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d103      	bne.n	80053d8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fa0b 	bl	80047fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e6:	e00b      	b.n	8005400 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fb f891 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 80053ee:	e007      	b.n	8005400 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0208 	orr.w	r2, r2, #8
 80053fe:	619a      	str	r2, [r3, #24]
}
 8005400:	bf00      	nop
 8005402:	3770      	adds	r7, #112	@ 0x70
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <calloc>:
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <calloc+0xc>)
 800541e:	460a      	mov	r2, r1
 8005420:	4601      	mov	r1, r0
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	f000 b802 	b.w	800542c <_calloc_r>
 8005428:	20000064 	.word	0x20000064

0800542c <_calloc_r>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	fba1 5402 	umull	r5, r4, r1, r2
 8005432:	b93c      	cbnz	r4, 8005444 <_calloc_r+0x18>
 8005434:	4629      	mov	r1, r5
 8005436:	f000 f837 	bl	80054a8 <_malloc_r>
 800543a:	4606      	mov	r6, r0
 800543c:	b928      	cbnz	r0, 800544a <_calloc_r+0x1e>
 800543e:	2600      	movs	r6, #0
 8005440:	4630      	mov	r0, r6
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	220c      	movs	r2, #12
 8005446:	6002      	str	r2, [r0, #0]
 8005448:	e7f9      	b.n	800543e <_calloc_r+0x12>
 800544a:	462a      	mov	r2, r5
 800544c:	4621      	mov	r1, r4
 800544e:	f000 f8b7 	bl	80055c0 <memset>
 8005452:	e7f5      	b.n	8005440 <_calloc_r+0x14>

08005454 <free>:
 8005454:	4b02      	ldr	r3, [pc, #8]	@ (8005460 <free+0xc>)
 8005456:	4601      	mov	r1, r0
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f000 b8f5 	b.w	8005648 <_free_r>
 800545e:	bf00      	nop
 8005460:	20000064 	.word	0x20000064

08005464 <sbrk_aligned>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4e0f      	ldr	r6, [pc, #60]	@ (80054a4 <sbrk_aligned+0x40>)
 8005468:	460c      	mov	r4, r1
 800546a:	6831      	ldr	r1, [r6, #0]
 800546c:	4605      	mov	r5, r0
 800546e:	b911      	cbnz	r1, 8005476 <sbrk_aligned+0x12>
 8005470:	f000 f8ae 	bl	80055d0 <_sbrk_r>
 8005474:	6030      	str	r0, [r6, #0]
 8005476:	4621      	mov	r1, r4
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f8a9 	bl	80055d0 <_sbrk_r>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d103      	bne.n	800548a <sbrk_aligned+0x26>
 8005482:	f04f 34ff 	mov.w	r4, #4294967295
 8005486:	4620      	mov	r0, r4
 8005488:	bd70      	pop	{r4, r5, r6, pc}
 800548a:	1cc4      	adds	r4, r0, #3
 800548c:	f024 0403 	bic.w	r4, r4, #3
 8005490:	42a0      	cmp	r0, r4
 8005492:	d0f8      	beq.n	8005486 <sbrk_aligned+0x22>
 8005494:	1a21      	subs	r1, r4, r0
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f89a 	bl	80055d0 <_sbrk_r>
 800549c:	3001      	adds	r0, #1
 800549e:	d1f2      	bne.n	8005486 <sbrk_aligned+0x22>
 80054a0:	e7ef      	b.n	8005482 <sbrk_aligned+0x1e>
 80054a2:	bf00      	nop
 80054a4:	200002ac 	.word	0x200002ac

080054a8 <_malloc_r>:
 80054a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ac:	1ccd      	adds	r5, r1, #3
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	4606      	mov	r6, r0
 80054be:	db01      	blt.n	80054c4 <_malloc_r+0x1c>
 80054c0:	42a9      	cmp	r1, r5
 80054c2:	d904      	bls.n	80054ce <_malloc_r+0x26>
 80054c4:	230c      	movs	r3, #12
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	2000      	movs	r0, #0
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055a4 <_malloc_r+0xfc>
 80054d2:	f000 f869 	bl	80055a8 <__malloc_lock>
 80054d6:	f8d8 3000 	ldr.w	r3, [r8]
 80054da:	461c      	mov	r4, r3
 80054dc:	bb44      	cbnz	r4, 8005530 <_malloc_r+0x88>
 80054de:	4629      	mov	r1, r5
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ffbf 	bl	8005464 <sbrk_aligned>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	4604      	mov	r4, r0
 80054ea:	d158      	bne.n	800559e <_malloc_r+0xf6>
 80054ec:	f8d8 4000 	ldr.w	r4, [r8]
 80054f0:	4627      	mov	r7, r4
 80054f2:	2f00      	cmp	r7, #0
 80054f4:	d143      	bne.n	800557e <_malloc_r+0xd6>
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	d04b      	beq.n	8005592 <_malloc_r+0xea>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	4639      	mov	r1, r7
 80054fe:	4630      	mov	r0, r6
 8005500:	eb04 0903 	add.w	r9, r4, r3
 8005504:	f000 f864 	bl	80055d0 <_sbrk_r>
 8005508:	4581      	cmp	r9, r0
 800550a:	d142      	bne.n	8005592 <_malloc_r+0xea>
 800550c:	6821      	ldr	r1, [r4, #0]
 800550e:	1a6d      	subs	r5, r5, r1
 8005510:	4629      	mov	r1, r5
 8005512:	4630      	mov	r0, r6
 8005514:	f7ff ffa6 	bl	8005464 <sbrk_aligned>
 8005518:	3001      	adds	r0, #1
 800551a:	d03a      	beq.n	8005592 <_malloc_r+0xea>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	442b      	add	r3, r5
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	f8d8 3000 	ldr.w	r3, [r8]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	bb62      	cbnz	r2, 8005584 <_malloc_r+0xdc>
 800552a:	f8c8 7000 	str.w	r7, [r8]
 800552e:	e00f      	b.n	8005550 <_malloc_r+0xa8>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	1b52      	subs	r2, r2, r5
 8005534:	d420      	bmi.n	8005578 <_malloc_r+0xd0>
 8005536:	2a0b      	cmp	r2, #11
 8005538:	d917      	bls.n	800556a <_malloc_r+0xc2>
 800553a:	1961      	adds	r1, r4, r5
 800553c:	42a3      	cmp	r3, r4
 800553e:	6025      	str	r5, [r4, #0]
 8005540:	bf18      	it	ne
 8005542:	6059      	strne	r1, [r3, #4]
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	bf08      	it	eq
 8005548:	f8c8 1000 	streq.w	r1, [r8]
 800554c:	5162      	str	r2, [r4, r5]
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	4630      	mov	r0, r6
 8005552:	f000 f82f 	bl	80055b4 <__malloc_unlock>
 8005556:	f104 000b 	add.w	r0, r4, #11
 800555a:	1d23      	adds	r3, r4, #4
 800555c:	f020 0007 	bic.w	r0, r0, #7
 8005560:	1ac2      	subs	r2, r0, r3
 8005562:	bf1c      	itt	ne
 8005564:	1a1b      	subne	r3, r3, r0
 8005566:	50a3      	strne	r3, [r4, r2]
 8005568:	e7af      	b.n	80054ca <_malloc_r+0x22>
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	42a3      	cmp	r3, r4
 800556e:	bf0c      	ite	eq
 8005570:	f8c8 2000 	streq.w	r2, [r8]
 8005574:	605a      	strne	r2, [r3, #4]
 8005576:	e7eb      	b.n	8005550 <_malloc_r+0xa8>
 8005578:	4623      	mov	r3, r4
 800557a:	6864      	ldr	r4, [r4, #4]
 800557c:	e7ae      	b.n	80054dc <_malloc_r+0x34>
 800557e:	463c      	mov	r4, r7
 8005580:	687f      	ldr	r7, [r7, #4]
 8005582:	e7b6      	b.n	80054f2 <_malloc_r+0x4a>
 8005584:	461a      	mov	r2, r3
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	42a3      	cmp	r3, r4
 800558a:	d1fb      	bne.n	8005584 <_malloc_r+0xdc>
 800558c:	2300      	movs	r3, #0
 800558e:	6053      	str	r3, [r2, #4]
 8005590:	e7de      	b.n	8005550 <_malloc_r+0xa8>
 8005592:	230c      	movs	r3, #12
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	4630      	mov	r0, r6
 8005598:	f000 f80c 	bl	80055b4 <__malloc_unlock>
 800559c:	e794      	b.n	80054c8 <_malloc_r+0x20>
 800559e:	6005      	str	r5, [r0, #0]
 80055a0:	e7d6      	b.n	8005550 <_malloc_r+0xa8>
 80055a2:	bf00      	nop
 80055a4:	200002b0 	.word	0x200002b0

080055a8 <__malloc_lock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	@ (80055b0 <__malloc_lock+0x8>)
 80055aa:	f000 b84b 	b.w	8005644 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	200003f0 	.word	0x200003f0

080055b4 <__malloc_unlock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	@ (80055bc <__malloc_unlock+0x8>)
 80055b6:	f000 b846 	b.w	8005646 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	200003f0 	.word	0x200003f0

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <_sbrk_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d06      	ldr	r5, [pc, #24]	@ (80055ec <_sbrk_r+0x1c>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fb fd9c 	bl	8001118 <_sbrk>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_sbrk_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_sbrk_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	200003ec 	.word	0x200003ec

080055f0 <__errno>:
 80055f0:	4b01      	ldr	r3, [pc, #4]	@ (80055f8 <__errno+0x8>)
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000064 	.word	0x20000064

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005634 <__libc_init_array+0x38>)
 8005600:	4c0d      	ldr	r4, [pc, #52]	@ (8005638 <__libc_init_array+0x3c>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	2600      	movs	r6, #0
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	4d0b      	ldr	r5, [pc, #44]	@ (800563c <__libc_init_array+0x40>)
 800560e:	4c0c      	ldr	r4, [pc, #48]	@ (8005640 <__libc_init_array+0x44>)
 8005610:	f000 f864 	bl	80056dc <_init>
 8005614:	1b64      	subs	r4, r4, r5
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	2600      	movs	r6, #0
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	0800583c 	.word	0x0800583c
 8005638:	0800583c 	.word	0x0800583c
 800563c:	0800583c 	.word	0x0800583c
 8005640:	08005840 	.word	0x08005840

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <_free_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4605      	mov	r5, r0
 800564c:	2900      	cmp	r1, #0
 800564e:	d041      	beq.n	80056d4 <_free_r+0x8c>
 8005650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005654:	1f0c      	subs	r4, r1, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfb8      	it	lt
 800565a:	18e4      	addlt	r4, r4, r3
 800565c:	f7ff ffa4 	bl	80055a8 <__malloc_lock>
 8005660:	4a1d      	ldr	r2, [pc, #116]	@ (80056d8 <_free_r+0x90>)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x2c>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	4628      	mov	r0, r5
 800566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005670:	f7ff bfa0 	b.w	80055b4 <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x42>
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	1821      	adds	r1, r4, r0
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1809      	addeq	r1, r1, r0
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x1e>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x4c>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x42>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1850      	adds	r0, r2, r1
 8005698:	42a0      	cmp	r0, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x6c>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	4401      	add	r1, r0
 80056a0:	1850      	adds	r0, r2, r1
 80056a2:	4283      	cmp	r3, r0
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x22>
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	4408      	add	r0, r1
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	e7da      	b.n	800566a <_free_r+0x22>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x74>
 80056b6:	230c      	movs	r3, #12
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x22>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1809      	addeq	r1, r1, r0
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	6054      	str	r4, [r2, #4]
 80056d2:	e7ca      	b.n	800566a <_free_r+0x22>
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	200002b0 	.word	0x200002b0

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
